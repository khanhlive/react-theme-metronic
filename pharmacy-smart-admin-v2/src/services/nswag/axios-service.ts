/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, {
  AxiosError,
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  CancelToken,
} from "axios";

export class AccountClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  istenantavailable(
    input: IsTenantAvailableInput | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<IsTenantAvailableOutput> {
    let url_ = this.baseUrl + "/api/services/app/account/istenantavailable";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processIstenantavailable(_response);
      });
  }

  protected processIstenantavailable(
    response: AxiosResponse
  ): Promise<IsTenantAvailableOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = IsTenantAvailableOutput.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<IsTenantAvailableOutput>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  register(
    input: RegisterInput | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<RegisterOutput> {
    let url_ = this.baseUrl + "/api/services/app/account/register";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRegister(_response);
      });
  }

  protected processRegister(response: AxiosResponse): Promise<RegisterOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = RegisterOutput.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<RegisterOutput>(<any>null);
  }
}

export class BenhvienClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateDicBenhvienDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DicBenhvienDto> {
    let url_ = this.baseUrl + "/api/services/app/benhvien/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<DicBenhvienDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DicBenhvienDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DicBenhvienDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateDicBenhvienDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DicBenhvienDto> {
    let url_ = this.baseUrl + "/api/services/app/benhvien/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<DicBenhvienDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DicBenhvienDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DicBenhvienDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/benhvien/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/benhvien/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfDicBenhvienDto> {
    let url_ = this.baseUrl + "/api/services/app/benhvien/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        debugger;
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfDicBenhvienDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDicBenhvienDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfDicBenhvienDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DicBenhvienDto> {
    let url_ = this.baseUrl + "/api/services/app/benhvien/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<DicBenhvienDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DicBenhvienDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DicBenhvienDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/benhvien/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class ChucvuClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateDicChucvuDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DicChucvuDto> {
    let url_ = this.baseUrl + "/api/services/app/chucvu/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<DicChucvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DicChucvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DicChucvuDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateDicChucvuDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DicChucvuDto> {
    let url_ = this.baseUrl + "/api/services/app/chucvu/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<DicChucvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DicChucvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DicChucvuDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/chucvu/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/chucvu/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param status (optional)
   * @param ten (optional)
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    status: boolean | null | undefined,
    ten: string | null | undefined,
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfDicChucvuDto> {
    let url_ = this.baseUrl + "/api/services/app/chucvu/get-paging?";
    if (status !== undefined && status !== null)
      url_ += "Status=" + encodeURIComponent("" + status) + "&";
    if (ten !== undefined && ten !== null)
      url_ += "Ten=" + encodeURIComponent("" + ten) + "&";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfDicChucvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDicChucvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfDicChucvuDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DicChucvuDto> {
    let url_ = this.baseUrl + "/api/services/app/chucvu/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<DicChucvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DicChucvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DicChucvuDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/chucvu/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class ChuyenkhoaClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateChuyenkhoaDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<ChuyenkhoaDto> {
    let url_ = this.baseUrl + "/api/services/app/chuyenkhoa/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<ChuyenkhoaDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ChuyenkhoaDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ChuyenkhoaDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateChuyenkhoaDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<ChuyenkhoaDto> {
    let url_ = this.baseUrl + "/api/services/app/chuyenkhoa/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<ChuyenkhoaDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ChuyenkhoaDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ChuyenkhoaDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/chuyenkhoa/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/chuyenkhoa/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfChuyenkhoaDto> {
    let url_ = this.baseUrl + "/api/services/app/chuyenkhoa/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfChuyenkhoaDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfChuyenkhoaDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfChuyenkhoaDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<ChuyenkhoaDto> {
    let url_ = this.baseUrl + "/api/services/app/chuyenkhoa/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<ChuyenkhoaDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ChuyenkhoaDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ChuyenkhoaDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/chuyenkhoa/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class ConfigurationClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  changeuitheme(
    input: ChangeUiThemeInput | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/configuration/changeuitheme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processChangeuitheme(_response);
      });
  }

  protected processChangeuitheme(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class DantocClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateDantocDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DantocDto> {
    let url_ = this.baseUrl + "/api/services/app/dantoc/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<DantocDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DantocDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DantocDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateDantocDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DantocDto> {
    let url_ = this.baseUrl + "/api/services/app/dantoc/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<DantocDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DantocDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DantocDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/dantoc/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/dantoc/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param ma (optional)
   * @param ten (optional)
   * @param status (optional)
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    ma: string | null | undefined,
    ten: string | null | undefined,
    status: number | null | undefined,
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfDantocDto> {
    let url_ = this.baseUrl + "/api/services/app/dantoc/get-paging?";
    if (ma !== undefined && ma !== null)
      url_ += "Ma=" + encodeURIComponent("" + ma) + "&";
    if (ten !== undefined && ten !== null)
      url_ += "Ten=" + encodeURIComponent("" + ten) + "&";
    if (status !== undefined && status !== null)
      url_ += "Status=" + encodeURIComponent("" + status) + "&";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfDantocDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDantocDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfDantocDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DantocDto> {
    let url_ = this.baseUrl + "/api/services/app/dantoc/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<DantocDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DantocDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DantocDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/dantoc/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class DoituongClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateDoituongDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DoituongDto> {
    let url_ = this.baseUrl + "/api/services/app/doituong/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<DoituongDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DoituongDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DoituongDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateDoituongDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DoituongDto> {
    let url_ = this.baseUrl + "/api/services/app/doituong/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<DoituongDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DoituongDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DoituongDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/doituong/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/doituong/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param ma (optional)
   * @param ten (optional)
   * @param nhom (optional)
   * @param vanChuyen (optional)
   * @param maMuc (optional)
   * @param mucCu (optional)
   * @param status (optional)
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    ma: string | null | undefined,
    ten: string | null | undefined,
    nhom: string | null | undefined,
    vanChuyen: number | null | undefined,
    maMuc: number | null | undefined,
    mucCu: number | null | undefined,
    status: number | null | undefined,
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfDoituongDto> {
    let url_ = this.baseUrl + "/api/services/app/doituong/get-paging?";
    if (ma !== undefined && ma !== null)
      url_ += "Ma=" + encodeURIComponent("" + ma) + "&";
    if (ten !== undefined && ten !== null)
      url_ += "Ten=" + encodeURIComponent("" + ten) + "&";
    if (nhom !== undefined && nhom !== null)
      url_ += "Nhom=" + encodeURIComponent("" + nhom) + "&";
    if (vanChuyen !== undefined && vanChuyen !== null)
      url_ += "VanChuyen=" + encodeURIComponent("" + vanChuyen) + "&";
    if (maMuc !== undefined && maMuc !== null)
      url_ += "MaMuc=" + encodeURIComponent("" + maMuc) + "&";
    if (mucCu !== undefined && mucCu !== null)
      url_ += "MucCu=" + encodeURIComponent("" + mucCu) + "&";
    if (status !== undefined && status !== null)
      url_ += "Status=" + encodeURIComponent("" + status) + "&";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfDoituongDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDoituongDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfDoituongDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DoituongDto> {
    let url_ = this.baseUrl + "/api/services/app/doituong/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<DoituongDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DoituongDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DoituongDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/doituong/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class DoituongbenhnhanClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateDoiTuongBenhNhanDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DoiTuongBenhNhanDto> {
    let url_ = this.baseUrl + "/api/services/app/doituongbenhnhan/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(
    response: AxiosResponse
  ): Promise<DoiTuongBenhNhanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DoiTuongBenhNhanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DoiTuongBenhNhanDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateDoiTuongBenhNhanDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DoiTuongBenhNhanDto> {
    let url_ = this.baseUrl + "/api/services/app/doituongbenhnhan/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(
    response: AxiosResponse
  ): Promise<DoiTuongBenhNhanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DoiTuongBenhNhanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DoiTuongBenhNhanDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/doituongbenhnhan/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ =
      this.baseUrl + "/api/services/app/doituongbenhnhan/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfDoiTuongBenhNhanDto> {
    let url_ = this.baseUrl + "/api/services/app/doituongbenhnhan/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfDoiTuongBenhNhanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfDoiTuongBenhNhanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfDoiTuongBenhNhanDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DoiTuongBenhNhanDto> {
    let url_ = this.baseUrl + "/api/services/app/doituongbenhnhan/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<DoiTuongBenhNhanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DoiTuongBenhNhanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DoiTuongBenhNhanDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/doituongbenhnhan/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class GridviewconfigurationClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param config (optional)
   * @return Success
   */
  setItem(
    config: GridviewConfigItemDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ =
      this.baseUrl + "/api/services/app/gridviewconfiguration/set-item";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(config);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSetItem(_response);
      });
  }

  protected processSetItem(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @param gridname (optional)
   * @return Success
   */
  getItem(
    gridname: string | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ =
      this.baseUrl + "/api/services/app/gridviewconfiguration/get-item?";
    if (gridname !== undefined && gridname !== null)
      url_ += "gridname=" + encodeURIComponent("" + gridname) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetItem(_response);
      });
  }

  protected processGetItem(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class HuyenClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/huyen/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateHuyenDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<HuyenDto> {
    let url_ = this.baseUrl + "/api/services/app/huyen/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<HuyenDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = HuyenDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<HuyenDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateHuyenDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<HuyenDto> {
    let url_ = this.baseUrl + "/api/services/app/huyen/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<HuyenDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = HuyenDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<HuyenDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/huyen/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfHuyenDto> {
    let url_ = this.baseUrl + "/api/services/app/huyen/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfHuyenDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfHuyenDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfHuyenDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<HuyenDto> {
    let url_ = this.baseUrl + "/api/services/app/huyen/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<HuyenDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = HuyenDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<HuyenDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/huyen/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class Icd10Client {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateIcd10Dto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<Icd10Dto> {
    let url_ = this.baseUrl + "/api/services/app/icd10/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<Icd10Dto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Icd10Dto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Icd10Dto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateIcd10Dto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<Icd10Dto> {
    let url_ = this.baseUrl + "/api/services/app/icd10/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<Icd10Dto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Icd10Dto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Icd10Dto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/icd10/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/icd10/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfIcd10Dto> {
    let url_ = this.baseUrl + "/api/services/app/icd10/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfIcd10Dto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfIcd10Dto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfIcd10Dto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<Icd10Dto> {
    let url_ = this.baseUrl + "/api/services/app/icd10/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<Icd10Dto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = Icd10Dto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<Icd10Dto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/icd10/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class NghenghiepClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateNghenghiepDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NghenghiepDto> {
    let url_ = this.baseUrl + "/api/services/app/nghenghiep/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<NghenghiepDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NghenghiepDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NghenghiepDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateNghenghiepDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NghenghiepDto> {
    let url_ = this.baseUrl + "/api/services/app/nghenghiep/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<NghenghiepDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NghenghiepDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NghenghiepDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/nghenghiep/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/nghenghiep/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfNghenghiepDto> {
    let url_ = this.baseUrl + "/api/services/app/nghenghiep/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfNghenghiepDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfNghenghiepDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfNghenghiepDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NghenghiepDto> {
    let url_ = this.baseUrl + "/api/services/app/nghenghiep/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<NghenghiepDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NghenghiepDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NghenghiepDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/nghenghiep/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class NhacungcapClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateNhacungcapDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhacungcapDto> {
    let url_ = this.baseUrl + "/api/services/app/nhacungcap/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<NhacungcapDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhacungcapDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhacungcapDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateNhacungcapDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhacungcapDto> {
    let url_ = this.baseUrl + "/api/services/app/nhacungcap/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<NhacungcapDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhacungcapDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhacungcapDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/nhacungcap/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/nhacungcap/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfNhacungcapDto> {
    let url_ = this.baseUrl + "/api/services/app/nhacungcap/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfNhacungcapDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfNhacungcapDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfNhacungcapDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhacungcapDto> {
    let url_ = this.baseUrl + "/api/services/app/nhacungcap/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<NhacungcapDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhacungcapDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhacungcapDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/nhacungcap/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class NhapduocClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateNhapduocDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhapduocDto> {
    let url_ = this.baseUrl + "/api/services/app/nhapduoc/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<NhapduocDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhapduocDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhapduocDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateNhapduocDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhapduocDto> {
    let url_ = this.baseUrl + "/api/services/app/nhapduoc/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<NhapduocDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhapduocDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhapduocDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/nhapduoc/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/nhapduoc/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfNhapduocDto> {
    let url_ = this.baseUrl + "/api/services/app/nhapduoc/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfNhapduocDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfNhapduocDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfNhapduocDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhapduocDto> {
    let url_ = this.baseUrl + "/api/services/app/nhapduoc/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<NhapduocDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhapduocDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhapduocDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/nhapduoc/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class NhapduocchitietClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateNhapduocchitietDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhapduocchitietDto> {
    let url_ = this.baseUrl + "/api/services/app/nhapduocchitiet/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(
    response: AxiosResponse
  ): Promise<NhapduocchitietDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhapduocchitietDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhapduocchitietDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateNhapduocchitietDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhapduocchitietDto> {
    let url_ = this.baseUrl + "/api/services/app/nhapduocchitiet/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(
    response: AxiosResponse
  ): Promise<NhapduocchitietDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhapduocchitietDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhapduocchitietDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/nhapduocchitiet/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ =
      this.baseUrl + "/api/services/app/nhapduocchitiet/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfNhapduocchitietDto> {
    let url_ = this.baseUrl + "/api/services/app/nhapduocchitiet/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfNhapduocchitietDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfNhapduocchitietDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfNhapduocchitietDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhapduocchitietDto> {
    let url_ = this.baseUrl + "/api/services/app/nhapduocchitiet/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<NhapduocchitietDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhapduocchitietDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhapduocchitietDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/nhapduocchitiet/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class NhomdichvuClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateNhomdichvuDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhomdichvuDto> {
    let url_ = this.baseUrl + "/api/services/app/nhomdichvu/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<NhomdichvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhomdichvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhomdichvuDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateNhomdichvuDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhomdichvuDto> {
    let url_ = this.baseUrl + "/api/services/app/nhomdichvu/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<NhomdichvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhomdichvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhomdichvuDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/nhomdichvu/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/nhomdichvu/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfNhomdichvuDto> {
    let url_ = this.baseUrl + "/api/services/app/nhomdichvu/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfNhomdichvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfNhomdichvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfNhomdichvuDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<NhomdichvuDto> {
    let url_ = this.baseUrl + "/api/services/app/nhomdichvu/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<NhomdichvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NhomdichvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<NhomdichvuDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/nhomdichvu/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class PhanloaiphongbanClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdatePhanloaiphongbanDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PhanloaiphongbanDto> {
    let url_ = this.baseUrl + "/api/services/app/phanloaiphongban/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(
    response: AxiosResponse
  ): Promise<PhanloaiphongbanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PhanloaiphongbanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PhanloaiphongbanDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreatePhanloaiphongbanDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PhanloaiphongbanDto> {
    let url_ = this.baseUrl + "/api/services/app/phanloaiphongban/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(
    response: AxiosResponse
  ): Promise<PhanloaiphongbanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PhanloaiphongbanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PhanloaiphongbanDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/phanloaiphongban/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ =
      this.baseUrl + "/api/services/app/phanloaiphongban/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param ma (optional)
   * @param status (optional)
   * @param ten (optional)
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    ma: string | null | undefined,
    status: boolean | null | undefined,
    ten: string | null | undefined,
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfPhanloaiphongbanDto> {
    let url_ = this.baseUrl + "/api/services/app/phanloaiphongban/get-paging?";
    if (ma !== undefined && ma !== null)
      url_ += "Ma=" + encodeURIComponent("" + ma) + "&";
    if (status !== undefined && status !== null)
      url_ += "Status=" + encodeURIComponent("" + status) + "&";
    if (ten !== undefined && ten !== null)
      url_ += "Ten=" + encodeURIComponent("" + ten) + "&";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfPhanloaiphongbanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfPhanloaiphongbanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfPhanloaiphongbanDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PhanloaiphongbanDto> {
    let url_ = this.baseUrl + "/api/services/app/phanloaiphongban/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<PhanloaiphongbanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PhanloaiphongbanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PhanloaiphongbanDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/phanloaiphongban/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class PhongbanClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdatePhongbanDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PhongbanDto> {
    let url_ = this.baseUrl + "/api/services/app/phongban/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<PhongbanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PhongbanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PhongbanDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreatePhongbanDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PhongbanDto> {
    let url_ = this.baseUrl + "/api/services/app/phongban/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<PhongbanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PhongbanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PhongbanDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/phongban/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/phongban/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfPhongbanDto> {
    let url_ = this.baseUrl + "/api/services/app/phongban/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfPhongbanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfPhongbanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfPhongbanDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PhongbanDto> {
    let url_ = this.baseUrl + "/api/services/app/phongban/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<PhongbanDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PhongbanDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PhongbanDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/phongban/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class RoleClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateRoleDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<RoleDto> {
    let url_ = this.baseUrl + "/api/services/app/role/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<RoleDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = RoleDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<RoleDto>(<any>null);
  }

  /**
   * @param permission (optional)
   * @return Success
   */
  getrolesasync(
    permission: string | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<ListResultDtoOfRoleListDto> {
    let url_ = this.baseUrl + "/api/services/app/role/getrolesasync?";
    if (permission !== undefined && permission !== null)
      url_ += "Permission=" + encodeURIComponent("" + permission) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetrolesasync(_response);
      });
  }

  protected processGetrolesasync(
    response: AxiosResponse
  ): Promise<ListResultDtoOfRoleListDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfRoleListDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ListResultDtoOfRoleListDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: RoleDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<RoleDto> {
    let url_ = this.baseUrl + "/api/services/app/role/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<RoleDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = RoleDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<RoleDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/role/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @return Success
   */
  getallpermissions(
    cancelToken?: CancelToken | undefined
  ): Promise<ListResultDtoOfPermissionDto> {
    let url_ = this.baseUrl + "/api/services/app/role/getallpermissions";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetallpermissions(_response);
      });
  }

  protected processGetallpermissions(
    response: AxiosResponse
  ): Promise<ListResultDtoOfPermissionDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfPermissionDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ListResultDtoOfPermissionDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  getroleforedit(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<GetRoleForEditOutput> {
    let url_ = this.baseUrl + "/api/services/app/role/getroleforedit?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetroleforedit(_response);
      });
  }

  protected processGetroleforedit(
    response: AxiosResponse
  ): Promise<GetRoleForEditOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetRoleForEditOutput.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<GetRoleForEditOutput>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<RoleDto> {
    let url_ = this.baseUrl + "/api/services/app/role/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<RoleDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = RoleDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<RoleDto>(<any>null);
  }

  /**
   * @param keyword (optional)
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getall(
    keyword: string | null | undefined,
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfRoleDto> {
    let url_ = this.baseUrl + "/api/services/app/role/getall?";
    if (keyword !== undefined && keyword !== null)
      url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetall(_response);
      });
  }

  protected processGetall(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfRoleDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfRoleDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfRoleDto>(<any>null);
  }
}

export class SessionClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @return Success
   */
  getcurrentlogininformations(
    cancelToken?: CancelToken | undefined
  ): Promise<GetCurrentLoginInformationsOutput> {
    let url_ =
      this.baseUrl + "/api/services/app/session/getcurrentlogininformations";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetcurrentlogininformations(_response);
      });
  }

  protected processGetcurrentlogininformations(
    response: AxiosResponse
  ): Promise<GetCurrentLoginInformationsOutput> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = GetCurrentLoginInformationsOutput.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<GetCurrentLoginInformationsOutput>(<any>null);
  }
}

export class TenantClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateTenantDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<TenantDto> {
    let url_ = this.baseUrl + "/api/services/app/tenant/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<TenantDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TenantDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<TenantDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/tenant/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<TenantDto> {
    let url_ = this.baseUrl + "/api/services/app/tenant/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<TenantDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TenantDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<TenantDto>(<any>null);
  }

  /**
   * @param keyword (optional)
   * @param isActive (optional)
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getall(
    keyword: string | null | undefined,
    isActive: boolean | null | undefined,
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfTenantDto> {
    let url_ = this.baseUrl + "/api/services/app/tenant/getall?";
    if (keyword !== undefined && keyword !== null)
      url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
    if (isActive !== undefined && isActive !== null)
      url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetall(_response);
      });
  }

  protected processGetall(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfTenantDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTenantDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfTenantDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: TenantDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<TenantDto> {
    let url_ = this.baseUrl + "/api/services/app/tenant/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<TenantDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TenantDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<TenantDto>(<any>null);
  }
}

export class TieunhomdichvuClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateTieunhomdichvuDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<TieunhomdichvuDto> {
    let url_ = this.baseUrl + "/api/services/app/tieunhomdichvu/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<TieunhomdichvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TieunhomdichvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<TieunhomdichvuDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateTieunhomdichvuDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<TieunhomdichvuDto> {
    let url_ = this.baseUrl + "/api/services/app/tieunhomdichvu/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<TieunhomdichvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TieunhomdichvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<TieunhomdichvuDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/tieunhomdichvu/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/tieunhomdichvu/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfTieunhomdichvuDto> {
    let url_ = this.baseUrl + "/api/services/app/tieunhomdichvu/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfTieunhomdichvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTieunhomdichvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfTieunhomdichvuDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<TieunhomdichvuDto> {
    let url_ = this.baseUrl + "/api/services/app/tieunhomdichvu/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<TieunhomdichvuDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TieunhomdichvuDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<TieunhomdichvuDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/tieunhomdichvu/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class TinhClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UpdateTinhDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<TinhDto> {
    let url_ = this.baseUrl + "/api/services/app/tinh/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<TinhDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TinhDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<TinhDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateTinhDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<TinhDto> {
    let url_ = this.baseUrl + "/api/services/app/tinh/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<TinhDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TinhDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<TinhDto>(<any>null);
  }

  /**
   * @param request (optional)
   * @return Success
   */
  getKendo(
    request: any | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<DataSourceResult> {
    let url_ = this.baseUrl + "/api/services/app/tinh/get-kendo?";
    if (request !== undefined && request !== null)
      url_ += "request=" + encodeURIComponent("" + request) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetKendo(_response);
      });
  }

  protected processGetKendo(
    response: AxiosResponse
  ): Promise<DataSourceResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = DataSourceResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<DataSourceResult>(<any>null);
  }

  /**
   * @param loadOptions (optional)
   * @return Success
   */
  getDevextreme(
    loadOptions: DataSourceLoadOptions | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<LoadResult> {
    let url_ = this.baseUrl + "/api/services/app/tinh/get-devextreme";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(loadOptions);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetDevextreme(_response);
      });
  }

  protected processGetDevextreme(response: AxiosResponse): Promise<LoadResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = LoadResult.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<LoadResult>(<any>null);
  }

  /**
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getPaging(
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfTinhDto> {
    let url_ = this.baseUrl + "/api/services/app/tinh/get-paging?";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetPaging(_response);
      });
  }

  protected processGetPaging(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfTinhDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfTinhDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfTinhDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<TinhDto> {
    let url_ = this.baseUrl + "/api/services/app/tinh/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<TinhDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = TinhDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<TinhDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/tinh/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class TokenauthClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param model (optional)
   * @return Success
   */
  authenticate(
    model: AuthenticateModel | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<AuthenticateResultModel> {
    let url_ = this.baseUrl + "/api/tokenauth/authenticate";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processAuthenticate(_response);
      });
  }

  protected processAuthenticate(
    response: AxiosResponse
  ): Promise<AuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = AuthenticateResultModel.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<AuthenticateResultModel>(<any>null);
  }

  /**
   * @return Success
   */
  getexternalauthenticationproviders(
    cancelToken?: CancelToken | undefined
  ): Promise<ExternalLoginProviderInfoModel[]> {
    let url_ =
      this.baseUrl + "/api/tokenauth/getexternalauthenticationproviders";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetexternalauthenticationproviders(_response);
      });
  }

  protected processGetexternalauthenticationproviders(
    response: AxiosResponse
  ): Promise<ExternalLoginProviderInfoModel[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(ExternalLoginProviderInfoModel.fromJS(item));
      }
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ExternalLoginProviderInfoModel[]>(<any>null);
  }

  /**
   * @param model (optional)
   * @return Success
   */
  externalauthenticate(
    model: ExternalAuthenticateModel | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<ExternalAuthenticateResultModel> {
    let url_ = this.baseUrl + "/api/tokenauth/externalauthenticate";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(model);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processExternalauthenticate(_response);
      });
  }

  protected processExternalauthenticate(
    response: AxiosResponse
  ): Promise<ExternalAuthenticateResultModel> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ExternalAuthenticateResultModel.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ExternalAuthenticateResultModel>(<any>null);
  }
}

export class UserClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver:
    | ((key: string, value: any) => any)
    | undefined = undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param input (optional)
   * @return Success
   */
  create(
    input: CreateUserDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<UserDto> {
    let url_ = this.baseUrl + "/api/services/app/user/create";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCreate(_response);
      });
  }

  protected processCreate(response: AxiosResponse): Promise<UserDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = UserDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<UserDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  update(
    input: UserDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<UserDto> {
    let url_ = this.baseUrl + "/api/services/app/user/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processUpdate(_response);
      });
  }

  protected processUpdate(response: AxiosResponse): Promise<UserDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = UserDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<UserDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  delete(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/user/delete?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processDelete(_response);
      });
  }

  protected processDelete(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @return Success
   */
  getroles(
    cancelToken?: CancelToken | undefined
  ): Promise<ListResultDtoOfRoleDto> {
    let url_ = this.baseUrl + "/api/services/app/user/getroles";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetroles(_response);
      });
  }

  protected processGetroles(
    response: AxiosResponse
  ): Promise<ListResultDtoOfRoleDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = ListResultDtoOfRoleDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<ListResultDtoOfRoleDto>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  changelanguage(
    input: ChangeUserLanguageDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<void> {
    let url_ = this.baseUrl + "/api/services/app/user/changelanguage";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processChangelanguage(_response);
      });
  }

  protected processChangelanguage(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<void>(<any>null);
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  changepassword(
    input: ChangePasswordDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<boolean> {
    let url_ = this.baseUrl + "/api/services/app/user/changepassword";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processChangepassword(_response);
      });
  }

  protected processChangepassword(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<boolean>(<any>null);
  }

  /**
   * @param input (optional)
   * @return Success
   */
  resetpassword(
    input: ResetPasswordDto | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<boolean> {
    let url_ = this.baseUrl + "/api/services/app/user/resetpassword";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(input);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processResetpassword(_response);
      });
  }

  protected processResetpassword(response: AxiosResponse): Promise<boolean> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<boolean>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  get(
    id: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<UserDto> {
    let url_ = this.baseUrl + "/api/services/app/user/get?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGet(_response);
      });
  }

  protected processGet(response: AxiosResponse): Promise<UserDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = UserDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<UserDto>(<any>null);
  }

  /**
   * @param keyword (optional)
   * @param isActive (optional)
   * @param skipCount (optional)
   * @param maxResultCount (optional)
   * @return Success
   */
  getall(
    keyword: string | null | undefined,
    isActive: boolean | null | undefined,
    skipCount: number | null | undefined,
    maxResultCount: number | null | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<PagedResultDtoOfUserDto> {
    let url_ = this.baseUrl + "/api/services/app/user/getall?";
    if (keyword !== undefined && keyword !== null)
      url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
    if (isActive !== undefined && isActive !== null)
      url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
    if (skipCount !== undefined && skipCount !== null)
      url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
    if (maxResultCount !== undefined && maxResultCount !== null)
      url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGetall(_response);
      });
  }

  protected processGetall(
    response: AxiosResponse
  ): Promise<PagedResultDtoOfUserDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = PagedResultDtoOfUserDto.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<PagedResultDtoOfUserDto>(<any>null);
  }
}

export class IsTenantAvailableInput implements IIsTenantAvailableInput {
  tenancyName!: string;

  constructor(data?: IIsTenantAvailableInput) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.tenancyName = _data["tenancyName"];
    }
  }

  static fromJS(data: any): IsTenantAvailableInput {
    data = typeof data === "object" ? data : {};
    let result = new IsTenantAvailableInput();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["tenancyName"] = this.tenancyName;
    return data;
  }
}

export interface IIsTenantAvailableInput {
  tenancyName: string;
}

export class IsTenantAvailableOutput implements IIsTenantAvailableOutput {
  state?: IsTenantAvailableOutputState | undefined;
  tenantId?: number | undefined;

  constructor(data?: IIsTenantAvailableOutput) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.state = _data["state"];
      this.tenantId = _data["tenantId"];
    }
  }

  static fromJS(data: any): IsTenantAvailableOutput {
    data = typeof data === "object" ? data : {};
    let result = new IsTenantAvailableOutput();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["state"] = this.state;
    data["tenantId"] = this.tenantId;
    return data;
  }
}

export interface IIsTenantAvailableOutput {
  state?: IsTenantAvailableOutputState | undefined;
  tenantId?: number | undefined;
}

export class RegisterInput implements IRegisterInput {
  name!: string;
  surname!: string;
  userName!: string;
  emailAddress!: string;
  password!: string;
  captchaResponse?: string | undefined;

  constructor(data?: IRegisterInput) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.surname = _data["surname"];
      this.userName = _data["userName"];
      this.emailAddress = _data["emailAddress"];
      this.password = _data["password"];
      this.captchaResponse = _data["captchaResponse"];
    }
  }

  static fromJS(data: any): RegisterInput {
    data = typeof data === "object" ? data : {};
    let result = new RegisterInput();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["surname"] = this.surname;
    data["userName"] = this.userName;
    data["emailAddress"] = this.emailAddress;
    data["password"] = this.password;
    data["captchaResponse"] = this.captchaResponse;
    return data;
  }
}

export interface IRegisterInput {
  name: string;
  surname: string;
  userName: string;
  emailAddress: string;
  password: string;
  captchaResponse?: string | undefined;
}

export class RegisterOutput implements IRegisterOutput {
  canLogin?: boolean | undefined;

  constructor(data?: IRegisterOutput) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.canLogin = _data["canLogin"];
    }
  }

  static fromJS(data: any): RegisterOutput {
    data = typeof data === "object" ? data : {};
    let result = new RegisterOutput();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["canLogin"] = this.canLogin;
    return data;
  }
}

export interface IRegisterOutput {
  canLogin?: boolean | undefined;
}

export class CreateDicBenhvienDto implements ICreateDicBenhvienDto {
  ma?: string | undefined;
  ten?: string | undefined;
  tinhId?: number | undefined;
  huyenId?: number | undefined;
  chuQuanMa?: string | undefined;
  tuyen?: string | undefined;
  hang?: number | undefined;
  diaChi?: string | undefined;
  status?: number | undefined;
  connect?: boolean | undefined;

  constructor(data?: ICreateDicBenhvienDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.tinhId = _data["tinhId"];
      this.huyenId = _data["huyenId"];
      this.chuQuanMa = _data["chuQuanMa"];
      this.tuyen = _data["tuyen"];
      this.hang = _data["hang"];
      this.diaChi = _data["diaChi"];
      this.status = _data["status"];
      this.connect = _data["connect"];
    }
  }

  static fromJS(data: any): CreateDicBenhvienDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateDicBenhvienDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["tinhId"] = this.tinhId;
    data["huyenId"] = this.huyenId;
    data["chuQuanMa"] = this.chuQuanMa;
    data["tuyen"] = this.tuyen;
    data["hang"] = this.hang;
    data["diaChi"] = this.diaChi;
    data["status"] = this.status;
    data["connect"] = this.connect;
    return data;
  }
}

export interface ICreateDicBenhvienDto {
  ma?: string | undefined;
  ten?: string | undefined;
  tinhId?: number | undefined;
  huyenId?: number | undefined;
  chuQuanMa?: string | undefined;
  tuyen?: string | undefined;
  hang?: number | undefined;
  diaChi?: string | undefined;
  status?: number | undefined;
  connect?: boolean | undefined;
}

export class DicBenhvienDto implements IDicBenhvienDto {
  ma?: string | undefined;
  ten?: string | undefined;
  tinhId?: number | undefined;
  huyenId?: number | undefined;
  chuQuanMa?: string | undefined;
  tuyen?: string | undefined;
  hang?: number | undefined;
  diaChi?: string | undefined;
  status?: number | undefined;
  connect?: boolean | undefined;
  huyen?: DicHuyen | undefined;
  tinh?: DicTinh | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicBenhvienDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.tinhId = _data["tinhId"];
      this.huyenId = _data["huyenId"];
      this.chuQuanMa = _data["chuQuanMa"];
      this.tuyen = _data["tuyen"];
      this.hang = _data["hang"];
      this.diaChi = _data["diaChi"];
      this.status = _data["status"];
      this.connect = _data["connect"];
      this.huyen = _data["huyen"]
        ? DicHuyen.fromJS(_data["huyen"])
        : <any>undefined;
      this.tinh = _data["tinh"]
        ? DicTinh.fromJS(_data["tinh"])
        : <any>undefined;
      if (Array.isArray(_data["dicPhongban"])) {
        this.dicPhongban = [] as any;
        for (let item of _data["dicPhongban"])
          this.dicPhongban!.push(DicPhongban.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicBenhvienDto {
    data = typeof data === "object" ? data : {};
    let result = new DicBenhvienDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["tinhId"] = this.tinhId;
    data["huyenId"] = this.huyenId;
    data["chuQuanMa"] = this.chuQuanMa;
    data["tuyen"] = this.tuyen;
    data["hang"] = this.hang;
    data["diaChi"] = this.diaChi;
    data["status"] = this.status;
    data["connect"] = this.connect;
    data["huyen"] = this.huyen ? this.huyen.toJSON() : <any>undefined;
    data["tinh"] = this.tinh ? this.tinh.toJSON() : <any>undefined;
    if (Array.isArray(this.dicPhongban)) {
      data["dicPhongban"] = [];
      for (let item of this.dicPhongban)
        data["dicPhongban"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicBenhvienDto {
  ma?: string | undefined;
  ten?: string | undefined;
  tinhId?: number | undefined;
  huyenId?: number | undefined;
  chuQuanMa?: string | undefined;
  tuyen?: string | undefined;
  hang?: number | undefined;
  diaChi?: string | undefined;
  status?: number | undefined;
  connect?: boolean | undefined;
  huyen?: DicHuyen | undefined;
  tinh?: DicTinh | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;
}

export class DicHuyen implements IDicHuyen {
  ma?: string | undefined;
  ten?: string | undefined;
  cap?: string | undefined;
  tinhId?: number | undefined;
  status?: number | undefined;
  tinh?: DicTinh | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicHuyen) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.cap = _data["cap"];
      this.tinhId = _data["tinhId"];
      this.status = _data["status"];
      this.tinh = _data["tinh"]
        ? DicTinh.fromJS(_data["tinh"])
        : <any>undefined;
      if (Array.isArray(_data["dicBenhvien"])) {
        this.dicBenhvien = [] as any;
        for (let item of _data["dicBenhvien"])
          this.dicBenhvien!.push(DicBenhvien.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicHuyen {
    data = typeof data === "object" ? data : {};
    let result = new DicHuyen();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["cap"] = this.cap;
    data["tinhId"] = this.tinhId;
    data["status"] = this.status;
    data["tinh"] = this.tinh ? this.tinh.toJSON() : <any>undefined;
    if (Array.isArray(this.dicBenhvien)) {
      data["dicBenhvien"] = [];
      for (let item of this.dicBenhvien)
        data["dicBenhvien"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicHuyen {
  ma?: string | undefined;
  ten?: string | undefined;
  cap?: string | undefined;
  tinhId?: number | undefined;
  status?: number | undefined;
  tinh?: DicTinh | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  id?: number | undefined;
}

export class DicTinh implements IDicTinh {
  ma?: string | undefined;
  tenTinh?: string | undefined;
  cap?: string | undefined;
  status?: number | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  dicHuyen?: DicHuyen[] | undefined;
  dicXaphuong?: DicXaphuong[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicTinh) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.tenTinh = _data["tenTinh"];
      this.cap = _data["cap"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicBenhvien"])) {
        this.dicBenhvien = [] as any;
        for (let item of _data["dicBenhvien"])
          this.dicBenhvien!.push(DicBenhvien.fromJS(item));
      }
      if (Array.isArray(_data["dicHuyen"])) {
        this.dicHuyen = [] as any;
        for (let item of _data["dicHuyen"])
          this.dicHuyen!.push(DicHuyen.fromJS(item));
      }
      if (Array.isArray(_data["dicXaphuong"])) {
        this.dicXaphuong = [] as any;
        for (let item of _data["dicXaphuong"])
          this.dicXaphuong!.push(DicXaphuong.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicTinh {
    data = typeof data === "object" ? data : {};
    let result = new DicTinh();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["tenTinh"] = this.tenTinh;
    data["cap"] = this.cap;
    data["status"] = this.status;
    if (Array.isArray(this.dicBenhvien)) {
      data["dicBenhvien"] = [];
      for (let item of this.dicBenhvien)
        data["dicBenhvien"].push(item.toJSON());
    }
    if (Array.isArray(this.dicHuyen)) {
      data["dicHuyen"] = [];
      for (let item of this.dicHuyen) data["dicHuyen"].push(item.toJSON());
    }
    if (Array.isArray(this.dicXaphuong)) {
      data["dicXaphuong"] = [];
      for (let item of this.dicXaphuong)
        data["dicXaphuong"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicTinh {
  ma?: string | undefined;
  tenTinh?: string | undefined;
  cap?: string | undefined;
  status?: number | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  dicHuyen?: DicHuyen[] | undefined;
  dicXaphuong?: DicXaphuong[] | undefined;
  id?: number | undefined;
}

export class DicPhongban implements IDicPhongban {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: number | undefined;
  chuyenKhoaTen?: string | undefined;
  phanLoaiId?: number | undefined;
  quanLy?: number | undefined;
  buongGiuong?: string | undefined;
  maQuyetDinh?: string | undefined;
  phongBanCuId?: number | undefined;
  chuyenKhoaId?: number | undefined;
  tuTruc?: boolean | undefined;
  isTrongBenhVien?: number | undefined;
  phuongPhapXuatDuoc?: number | undefined;
  phuongPhapHuHaoDongY?: number | undefined;
  diaChi?: string | undefined;
  benhVienId?: number | undefined;
  status?: number | undefined;
  benhVien?: DicBenhvien | undefined;
  chuyenKhoa?: DicChuyenkhoa | undefined;
  phanLoai?: DicPhanloaiphongban | undefined;
  dicCanbo?: DicCanbo[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicPhongban) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhom = _data["nhom"];
      this.chuyenKhoaTen = _data["chuyenKhoaTen"];
      this.phanLoaiId = _data["phanLoaiId"];
      this.quanLy = _data["quanLy"];
      this.buongGiuong = _data["buongGiuong"];
      this.maQuyetDinh = _data["maQuyetDinh"];
      this.phongBanCuId = _data["phongBanCuId"];
      this.chuyenKhoaId = _data["chuyenKhoaId"];
      this.tuTruc = _data["tuTruc"];
      this.isTrongBenhVien = _data["isTrongBenhVien"];
      this.phuongPhapXuatDuoc = _data["phuongPhapXuatDuoc"];
      this.phuongPhapHuHaoDongY = _data["phuongPhapHuHaoDongY"];
      this.diaChi = _data["diaChi"];
      this.benhVienId = _data["benhVienId"];
      this.status = _data["status"];
      this.benhVien = _data["benhVien"]
        ? DicBenhvien.fromJS(_data["benhVien"])
        : <any>undefined;
      this.chuyenKhoa = _data["chuyenKhoa"]
        ? DicChuyenkhoa.fromJS(_data["chuyenKhoa"])
        : <any>undefined;
      this.phanLoai = _data["phanLoai"]
        ? DicPhanloaiphongban.fromJS(_data["phanLoai"])
        : <any>undefined;
      if (Array.isArray(_data["dicCanbo"])) {
        this.dicCanbo = [] as any;
        for (let item of _data["dicCanbo"])
          this.dicCanbo!.push(DicCanbo.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicPhongban {
    data = typeof data === "object" ? data : {};
    let result = new DicPhongban();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhom"] = this.nhom;
    data["chuyenKhoaTen"] = this.chuyenKhoaTen;
    data["phanLoaiId"] = this.phanLoaiId;
    data["quanLy"] = this.quanLy;
    data["buongGiuong"] = this.buongGiuong;
    data["maQuyetDinh"] = this.maQuyetDinh;
    data["phongBanCuId"] = this.phongBanCuId;
    data["chuyenKhoaId"] = this.chuyenKhoaId;
    data["tuTruc"] = this.tuTruc;
    data["isTrongBenhVien"] = this.isTrongBenhVien;
    data["phuongPhapXuatDuoc"] = this.phuongPhapXuatDuoc;
    data["phuongPhapHuHaoDongY"] = this.phuongPhapHuHaoDongY;
    data["diaChi"] = this.diaChi;
    data["benhVienId"] = this.benhVienId;
    data["status"] = this.status;
    data["benhVien"] = this.benhVien ? this.benhVien.toJSON() : <any>undefined;
    data["chuyenKhoa"] = this.chuyenKhoa
      ? this.chuyenKhoa.toJSON()
      : <any>undefined;
    data["phanLoai"] = this.phanLoai ? this.phanLoai.toJSON() : <any>undefined;
    if (Array.isArray(this.dicCanbo)) {
      data["dicCanbo"] = [];
      for (let item of this.dicCanbo) data["dicCanbo"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicPhongban {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: number | undefined;
  chuyenKhoaTen?: string | undefined;
  phanLoaiId?: number | undefined;
  quanLy?: number | undefined;
  buongGiuong?: string | undefined;
  maQuyetDinh?: string | undefined;
  phongBanCuId?: number | undefined;
  chuyenKhoaId?: number | undefined;
  tuTruc?: boolean | undefined;
  isTrongBenhVien?: number | undefined;
  phuongPhapXuatDuoc?: number | undefined;
  phuongPhapHuHaoDongY?: number | undefined;
  diaChi?: string | undefined;
  benhVienId?: number | undefined;
  status?: number | undefined;
  benhVien?: DicBenhvien | undefined;
  chuyenKhoa?: DicChuyenkhoa | undefined;
  phanLoai?: DicPhanloaiphongban | undefined;
  dicCanbo?: DicCanbo[] | undefined;
  id?: number | undefined;
}

export class DicBenhvien implements IDicBenhvien {
  ma?: string | undefined;
  ten?: string | undefined;
  tinhId?: number | undefined;
  huyenId?: number | undefined;
  chuQuanMa?: string | undefined;
  tuyen?: string | undefined;
  hang?: number | undefined;
  diaChi?: string | undefined;
  status?: number | undefined;
  connect?: boolean | undefined;
  huyen?: DicHuyen | undefined;
  tinh?: DicTinh | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicBenhvien) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.tinhId = _data["tinhId"];
      this.huyenId = _data["huyenId"];
      this.chuQuanMa = _data["chuQuanMa"];
      this.tuyen = _data["tuyen"];
      this.hang = _data["hang"];
      this.diaChi = _data["diaChi"];
      this.status = _data["status"];
      this.connect = _data["connect"];
      this.huyen = _data["huyen"]
        ? DicHuyen.fromJS(_data["huyen"])
        : <any>undefined;
      this.tinh = _data["tinh"]
        ? DicTinh.fromJS(_data["tinh"])
        : <any>undefined;
      if (Array.isArray(_data["dicPhongban"])) {
        this.dicPhongban = [] as any;
        for (let item of _data["dicPhongban"])
          this.dicPhongban!.push(DicPhongban.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicBenhvien {
    data = typeof data === "object" ? data : {};
    let result = new DicBenhvien();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["tinhId"] = this.tinhId;
    data["huyenId"] = this.huyenId;
    data["chuQuanMa"] = this.chuQuanMa;
    data["tuyen"] = this.tuyen;
    data["hang"] = this.hang;
    data["diaChi"] = this.diaChi;
    data["status"] = this.status;
    data["connect"] = this.connect;
    data["huyen"] = this.huyen ? this.huyen.toJSON() : <any>undefined;
    data["tinh"] = this.tinh ? this.tinh.toJSON() : <any>undefined;
    if (Array.isArray(this.dicPhongban)) {
      data["dicPhongban"] = [];
      for (let item of this.dicPhongban)
        data["dicPhongban"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicBenhvien {
  ma?: string | undefined;
  ten?: string | undefined;
  tinhId?: number | undefined;
  huyenId?: number | undefined;
  chuQuanMa?: string | undefined;
  tuyen?: string | undefined;
  hang?: number | undefined;
  diaChi?: string | undefined;
  status?: number | undefined;
  connect?: boolean | undefined;
  huyen?: DicHuyen | undefined;
  tinh?: DicTinh | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;
}

export class DicXaphuong implements IDicXaphuong {
  ma?: string | undefined;
  ten?: string | undefined;
  cap?: string | undefined;
  huyenId?: number | undefined;
  tinhId?: number | undefined;
  status?: number | undefined;
  tinh?: DicTinh | undefined;
  id?: number | undefined;

  constructor(data?: IDicXaphuong) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.cap = _data["cap"];
      this.huyenId = _data["huyenId"];
      this.tinhId = _data["tinhId"];
      this.status = _data["status"];
      this.tinh = _data["tinh"]
        ? DicTinh.fromJS(_data["tinh"])
        : <any>undefined;
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicXaphuong {
    data = typeof data === "object" ? data : {};
    let result = new DicXaphuong();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["cap"] = this.cap;
    data["huyenId"] = this.huyenId;
    data["tinhId"] = this.tinhId;
    data["status"] = this.status;
    data["tinh"] = this.tinh ? this.tinh.toJSON() : <any>undefined;
    data["id"] = this.id;
    return data;
  }
}

export interface IDicXaphuong {
  ma?: string | undefined;
  ten?: string | undefined;
  cap?: string | undefined;
  huyenId?: number | undefined;
  tinhId?: number | undefined;
  status?: number | undefined;
  tinh?: DicTinh | undefined;
  id?: number | undefined;
}

export class DicChuyenkhoa implements IDicChuyenkhoa {
  ma?: number | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  maQuyetDinh?: string | undefined;
  status?: number | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicChuyenkhoa) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.tenChiTiet = _data["tenChiTiet"];
      this.maQuyetDinh = _data["maQuyetDinh"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicPhongban"])) {
        this.dicPhongban = [] as any;
        for (let item of _data["dicPhongban"])
          this.dicPhongban!.push(DicPhongban.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicChuyenkhoa {
    data = typeof data === "object" ? data : {};
    let result = new DicChuyenkhoa();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["tenChiTiet"] = this.tenChiTiet;
    data["maQuyetDinh"] = this.maQuyetDinh;
    data["status"] = this.status;
    if (Array.isArray(this.dicPhongban)) {
      data["dicPhongban"] = [];
      for (let item of this.dicPhongban)
        data["dicPhongban"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicChuyenkhoa {
  ma?: number | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  maQuyetDinh?: string | undefined;
  status?: number | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;
}

export class DicPhanloaiphongban implements IDicPhanloaiphongban {
  ma?: string | undefined;
  phanLoai?: string | undefined;
  status?: boolean | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicPhanloaiphongban) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.phanLoai = _data["phanLoai"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicPhongban"])) {
        this.dicPhongban = [] as any;
        for (let item of _data["dicPhongban"])
          this.dicPhongban!.push(DicPhongban.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicPhanloaiphongban {
    data = typeof data === "object" ? data : {};
    let result = new DicPhanloaiphongban();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["phanLoai"] = this.phanLoai;
    data["status"] = this.status;
    if (Array.isArray(this.dicPhongban)) {
      data["dicPhongban"] = [];
      for (let item of this.dicPhongban)
        data["dicPhongban"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicPhanloaiphongban {
  ma?: string | undefined;
  phanLoai?: string | undefined;
  status?: boolean | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;
}

export class DicCanbo implements IDicCanbo {
  ma?: string | undefined;
  ten?: string | undefined;
  ngaySinh?: Date | undefined;
  gioiTinh?: number | undefined;
  chucVuId?: number | undefined;
  chucVu?: string | undefined;
  capBac?: string | undefined;
  bangCap?: string | undefined;
  phongBanId?: number | undefined;
  danTocId?: number | undefined;
  image?: string | undefined;
  diaChi?: string | undefined;
  soDienThoai?: string | undefined;
  isKhoaChungTu?: boolean | undefined;
  chucVuNavigation?: DicChucvu | undefined;
  danToc?: DicDantoc | undefined;
  phongBan?: DicPhongban | undefined;
  id?: number | undefined;

  constructor(data?: IDicCanbo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.ngaySinh = _data["ngaySinh"]
        ? new Date(_data["ngaySinh"].toString())
        : <any>undefined;
      this.gioiTinh = _data["gioiTinh"];
      this.chucVuId = _data["chucVuId"];
      this.chucVu = _data["chucVu"];
      this.capBac = _data["capBac"];
      this.bangCap = _data["bangCap"];
      this.phongBanId = _data["phongBanId"];
      this.danTocId = _data["danTocId"];
      this.image = _data["image"];
      this.diaChi = _data["diaChi"];
      this.soDienThoai = _data["soDienThoai"];
      this.isKhoaChungTu = _data["isKhoaChungTu"];
      this.chucVuNavigation = _data["chucVuNavigation"]
        ? DicChucvu.fromJS(_data["chucVuNavigation"])
        : <any>undefined;
      this.danToc = _data["danToc"]
        ? DicDantoc.fromJS(_data["danToc"])
        : <any>undefined;
      this.phongBan = _data["phongBan"]
        ? DicPhongban.fromJS(_data["phongBan"])
        : <any>undefined;
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicCanbo {
    data = typeof data === "object" ? data : {};
    let result = new DicCanbo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["ngaySinh"] = this.ngaySinh
      ? this.ngaySinh.toISOString()
      : <any>undefined;
    data["gioiTinh"] = this.gioiTinh;
    data["chucVuId"] = this.chucVuId;
    data["chucVu"] = this.chucVu;
    data["capBac"] = this.capBac;
    data["bangCap"] = this.bangCap;
    data["phongBanId"] = this.phongBanId;
    data["danTocId"] = this.danTocId;
    data["image"] = this.image;
    data["diaChi"] = this.diaChi;
    data["soDienThoai"] = this.soDienThoai;
    data["isKhoaChungTu"] = this.isKhoaChungTu;
    data["chucVuNavigation"] = this.chucVuNavigation
      ? this.chucVuNavigation.toJSON()
      : <any>undefined;
    data["danToc"] = this.danToc ? this.danToc.toJSON() : <any>undefined;
    data["phongBan"] = this.phongBan ? this.phongBan.toJSON() : <any>undefined;
    data["id"] = this.id;
    return data;
  }
}

export interface IDicCanbo {
  ma?: string | undefined;
  ten?: string | undefined;
  ngaySinh?: Date | undefined;
  gioiTinh?: number | undefined;
  chucVuId?: number | undefined;
  chucVu?: string | undefined;
  capBac?: string | undefined;
  bangCap?: string | undefined;
  phongBanId?: number | undefined;
  danTocId?: number | undefined;
  image?: string | undefined;
  diaChi?: string | undefined;
  soDienThoai?: string | undefined;
  isKhoaChungTu?: boolean | undefined;
  chucVuNavigation?: DicChucvu | undefined;
  danToc?: DicDantoc | undefined;
  phongBan?: DicPhongban | undefined;
  id?: number | undefined;
}

export class DicChucvu implements IDicChucvu {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: boolean | undefined;
  dicCanbo?: DicCanbo[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicChucvu) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicCanbo"])) {
        this.dicCanbo = [] as any;
        for (let item of _data["dicCanbo"])
          this.dicCanbo!.push(DicCanbo.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicChucvu {
    data = typeof data === "object" ? data : {};
    let result = new DicChucvu();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    if (Array.isArray(this.dicCanbo)) {
      data["dicCanbo"] = [];
      for (let item of this.dicCanbo) data["dicCanbo"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicChucvu {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: boolean | undefined;
  dicCanbo?: DicCanbo[] | undefined;
  id?: number | undefined;
}

export class DicDantoc implements IDicDantoc {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  dicCanbo?: DicCanbo[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicDantoc) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicCanbo"])) {
        this.dicCanbo = [] as any;
        for (let item of _data["dicCanbo"])
          this.dicCanbo!.push(DicCanbo.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicDantoc {
    data = typeof data === "object" ? data : {};
    let result = new DicDantoc();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    if (Array.isArray(this.dicCanbo)) {
      data["dicCanbo"] = [];
      for (let item of this.dicCanbo) data["dicCanbo"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicDantoc {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  dicCanbo?: DicCanbo[] | undefined;
  id?: number | undefined;
}

export class UpdateDicBenhvienDto implements IUpdateDicBenhvienDto {
  ma?: string | undefined;
  ten?: string | undefined;
  tinhId?: number | undefined;
  huyenId?: number | undefined;
  chuQuanMa?: string | undefined;
  tuyen?: string | undefined;
  hang?: number | undefined;
  diaChi?: string | undefined;
  status?: number | undefined;
  connect?: boolean | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateDicBenhvienDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.tinhId = _data["tinhId"];
      this.huyenId = _data["huyenId"];
      this.chuQuanMa = _data["chuQuanMa"];
      this.tuyen = _data["tuyen"];
      this.hang = _data["hang"];
      this.diaChi = _data["diaChi"];
      this.status = _data["status"];
      this.connect = _data["connect"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateDicBenhvienDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateDicBenhvienDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["tinhId"] = this.tinhId;
    data["huyenId"] = this.huyenId;
    data["chuQuanMa"] = this.chuQuanMa;
    data["tuyen"] = this.tuyen;
    data["hang"] = this.hang;
    data["diaChi"] = this.diaChi;
    data["status"] = this.status;
    data["connect"] = this.connect;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateDicBenhvienDto {
  ma?: string | undefined;
  ten?: string | undefined;
  tinhId?: number | undefined;
  huyenId?: number | undefined;
  chuQuanMa?: string | undefined;
  tuyen?: string | undefined;
  hang?: number | undefined;
  diaChi?: string | undefined;
  status?: number | undefined;
  connect?: boolean | undefined;
  id?: number | undefined;
}

export class DataSourceRequest implements IDataSourceRequest {
  page?: number | undefined;
  pageSize?: number | undefined;
  sorts?: SortDescriptor[] | undefined;
  filters?: IFilterDescriptor[] | undefined;
  groups?: GroupDescriptor[] | undefined;
  aggregates?: AggregateDescriptor[] | undefined;
  groupPaging?: boolean | undefined;
  includeSubGroupCount?: boolean | undefined;
  skip?: number | undefined;
  take?: number | undefined;

  constructor(data?: IDataSourceRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.page = _data["page"];
      this.pageSize = _data["pageSize"];
      if (Array.isArray(_data["sorts"])) {
        this.sorts = [] as any;
        for (let item of _data["sorts"])
          this.sorts!.push(SortDescriptor.fromJS(item));
      }
      if (Array.isArray(_data["filters"])) {
        this.filters = [] as any;
        for (let item of _data["filters"])
          this.filters!.push(IFilterDescriptor.fromJS(item));
      }
      if (Array.isArray(_data["groups"])) {
        this.groups = [] as any;
        for (let item of _data["groups"])
          this.groups!.push(GroupDescriptor.fromJS(item));
      }
      if (Array.isArray(_data["aggregates"])) {
        this.aggregates = [] as any;
        for (let item of _data["aggregates"])
          this.aggregates!.push(AggregateDescriptor.fromJS(item));
      }
      this.groupPaging = _data["groupPaging"];
      this.includeSubGroupCount = _data["includeSubGroupCount"];
      this.skip = _data["skip"];
      this.take = _data["take"];
    }
  }

  static fromJS(data: any): DataSourceRequest {
    data = typeof data === "object" ? data : {};
    let result = new DataSourceRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["page"] = this.page;
    data["pageSize"] = this.pageSize;
    if (Array.isArray(this.sorts)) {
      data["sorts"] = [];
      for (let item of this.sorts) data["sorts"].push(item.toJSON());
    }
    if (Array.isArray(this.filters)) {
      data["filters"] = [];
      for (let item of this.filters) data["filters"].push(item.toJSON());
    }
    if (Array.isArray(this.groups)) {
      data["groups"] = [];
      for (let item of this.groups) data["groups"].push(item.toJSON());
    }
    if (Array.isArray(this.aggregates)) {
      data["aggregates"] = [];
      for (let item of this.aggregates) data["aggregates"].push(item.toJSON());
    }
    data["groupPaging"] = this.groupPaging;
    data["includeSubGroupCount"] = this.includeSubGroupCount;
    data["skip"] = this.skip;
    data["take"] = this.take;
    return data;
  }
}

export interface IDataSourceRequest {
  page?: number | undefined;
  pageSize?: number | undefined;
  sorts?: SortDescriptor[] | undefined;
  filters?: IFilterDescriptor[] | undefined;
  groups?: GroupDescriptor[] | undefined;
  aggregates?: AggregateDescriptor[] | undefined;
  groupPaging?: boolean | undefined;
  includeSubGroupCount?: boolean | undefined;
  skip?: number | undefined;
  take?: number | undefined;
}

export class SortDescriptor implements ISortDescriptor {
  member?: string | undefined;
  sortDirection?: SortDescriptorSortDirection | undefined;
  sortCompare?: ClientHandlerDescriptor | undefined;

  constructor(data?: ISortDescriptor) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.member = _data["member"];
      this.sortDirection = _data["sortDirection"];
      this.sortCompare = _data["sortCompare"]
        ? ClientHandlerDescriptor.fromJS(_data["sortCompare"])
        : <any>undefined;
    }
  }

  static fromJS(data: any): SortDescriptor {
    data = typeof data === "object" ? data : {};
    let result = new SortDescriptor();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["member"] = this.member;
    data["sortDirection"] = this.sortDirection;
    data["sortCompare"] = this.sortCompare
      ? this.sortCompare.toJSON()
      : <any>undefined;
    return data;
  }
}

export interface ISortDescriptor {
  member?: string | undefined;
  sortDirection?: SortDescriptorSortDirection | undefined;
  sortCompare?: ClientHandlerDescriptor | undefined;
}

export class IFilterDescriptor implements IIFilterDescriptor {
  constructor(data?: IIFilterDescriptor) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {}

  static fromJS(data: any): IFilterDescriptor {
    data = typeof data === "object" ? data : {};
    let result = new IFilterDescriptor();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    return data;
  }
}

export interface IIFilterDescriptor {}

export class GroupDescriptor implements IGroupDescriptor {
  memberType?: string | undefined;
  displayContent?: any | undefined;
  readonly aggregateFunctions?: AggregateFunction[] | undefined;
  member?: string | undefined;
  sortDirection?: GroupDescriptorSortDirection | undefined;
  sortCompare?: ClientHandlerDescriptor | undefined;

  constructor(data?: IGroupDescriptor) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.memberType = _data["memberType"];
      this.displayContent = _data["displayContent"];
      if (Array.isArray(_data["aggregateFunctions"])) {
        (<any>this).aggregateFunctions = [] as any;
        for (let item of _data["aggregateFunctions"])
          (<any>this).aggregateFunctions!.push(AggregateFunction.fromJS(item));
      }
      this.member = _data["member"];
      this.sortDirection = _data["sortDirection"];
      this.sortCompare = _data["sortCompare"]
        ? ClientHandlerDescriptor.fromJS(_data["sortCompare"])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GroupDescriptor {
    data = typeof data === "object" ? data : {};
    let result = new GroupDescriptor();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["memberType"] = this.memberType;
    data["displayContent"] = this.displayContent;
    if (Array.isArray(this.aggregateFunctions)) {
      data["aggregateFunctions"] = [];
      for (let item of this.aggregateFunctions)
        data["aggregateFunctions"].push(item.toJSON());
    }
    data["member"] = this.member;
    data["sortDirection"] = this.sortDirection;
    data["sortCompare"] = this.sortCompare
      ? this.sortCompare.toJSON()
      : <any>undefined;
    return data;
  }
}

export interface IGroupDescriptor {
  memberType?: string | undefined;
  displayContent?: any | undefined;
  aggregateFunctions?: AggregateFunction[] | undefined;
  member?: string | undefined;
  sortDirection?: GroupDescriptorSortDirection | undefined;
  sortCompare?: ClientHandlerDescriptor | undefined;
}

export class AggregateDescriptor implements IAggregateDescriptor {
  readonly aggregates?: AggregateFunction[] | undefined;
  member?: string | undefined;

  constructor(data?: IAggregateDescriptor) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["aggregates"])) {
        (<any>this).aggregates = [] as any;
        for (let item of _data["aggregates"])
          (<any>this).aggregates!.push(AggregateFunction.fromJS(item));
      }
      this.member = _data["member"];
    }
  }

  static fromJS(data: any): AggregateDescriptor {
    data = typeof data === "object" ? data : {};
    let result = new AggregateDescriptor();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.aggregates)) {
      data["aggregates"] = [];
      for (let item of this.aggregates) data["aggregates"].push(item.toJSON());
    }
    data["member"] = this.member;
    return data;
  }
}

export interface IAggregateDescriptor {
  aggregates?: AggregateFunction[] | undefined;
  member?: string | undefined;
}

export class ClientHandlerDescriptor implements IClientHandlerDescriptor {
  templateDelegate?: FuncOfObjectAndObject | undefined;
  handlerName?: string | undefined;

  constructor(data?: IClientHandlerDescriptor) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.templateDelegate = _data["templateDelegate"]
        ? FuncOfObjectAndObject.fromJS(_data["templateDelegate"])
        : <any>undefined;
      this.handlerName = _data["handlerName"];
    }
  }

  static fromJS(data: any): ClientHandlerDescriptor {
    data = typeof data === "object" ? data : {};
    let result = new ClientHandlerDescriptor();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["templateDelegate"] = this.templateDelegate
      ? this.templateDelegate.toJSON()
      : <any>undefined;
    data["handlerName"] = this.handlerName;
    return data;
  }
}

export interface IClientHandlerDescriptor {
  templateDelegate?: FuncOfObjectAndObject | undefined;
  handlerName?: string | undefined;
}

export class AggregateFunction implements IAggregateFunction {
  readonly aggregateMethodName?: string | undefined;
  caption?: string | undefined;
  sourceField?: string | undefined;
  functionName?: string | undefined;
  memberType?: string | undefined;
  resultFormatString?: string | undefined;

  constructor(data?: IAggregateFunction) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).aggregateMethodName = _data["aggregateMethodName"];
      this.caption = _data["caption"];
      this.sourceField = _data["sourceField"];
      this.functionName = _data["functionName"];
      this.memberType = _data["memberType"];
      this.resultFormatString = _data["resultFormatString"];
    }
  }

  static fromJS(data: any): AggregateFunction {
    data = typeof data === "object" ? data : {};
    let result = new AggregateFunction();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["aggregateMethodName"] = this.aggregateMethodName;
    data["caption"] = this.caption;
    data["sourceField"] = this.sourceField;
    data["functionName"] = this.functionName;
    data["memberType"] = this.memberType;
    data["resultFormatString"] = this.resultFormatString;
    return data;
  }
}

export interface IAggregateFunction {
  aggregateMethodName?: string | undefined;
  caption?: string | undefined;
  sourceField?: string | undefined;
  functionName?: string | undefined;
  memberType?: string | undefined;
  resultFormatString?: string | undefined;
}

export class FuncOfObjectAndObject implements IFuncOfObjectAndObject {
  readonly method?: MethodInfo | undefined;
  readonly target?: any | undefined;

  constructor(data?: IFuncOfObjectAndObject) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).method = _data["method"]
        ? MethodInfo.fromJS(_data["method"])
        : <any>undefined;
      (<any>this).target = _data["target"];
    }
  }

  static fromJS(data: any): FuncOfObjectAndObject {
    data = typeof data === "object" ? data : {};
    let result = new FuncOfObjectAndObject();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["method"] = this.method ? this.method.toJSON() : <any>undefined;
    data["target"] = this.target;
    return data;
  }
}

export interface IFuncOfObjectAndObject {
  method?: MethodInfo | undefined;
  target?: any | undefined;
}

export class MethodInfo implements IMethodInfo {
  readonly memberType?: MethodInfoMemberType | undefined;
  readonly returnParameter?: ParameterInfo | undefined;
  readonly returnType?: string | undefined;
  readonly returnTypeCustomAttributes?: ICustomAttributeProvider | undefined;
  readonly attributes?: MethodInfoAttributes | undefined;
  readonly methodImplementationFlags?:
    | MethodInfoMethodImplementationFlags
    | undefined;
  readonly callingConvention?: MethodInfoCallingConvention | undefined;
  readonly isAbstract?: boolean | undefined;
  readonly isConstructor?: boolean | undefined;
  readonly isFinal?: boolean | undefined;
  readonly isHideBySig?: boolean | undefined;
  readonly isSpecialName?: boolean | undefined;
  readonly isStatic?: boolean | undefined;
  readonly isVirtual?: boolean | undefined;
  readonly isAssembly?: boolean | undefined;
  readonly isFamily?: boolean | undefined;
  readonly isFamilyAndAssembly?: boolean | undefined;
  readonly isFamilyOrAssembly?: boolean | undefined;
  readonly isPrivate?: boolean | undefined;
  readonly isPublic?: boolean | undefined;
  readonly isConstructedGenericMethod?: boolean | undefined;
  readonly isGenericMethod?: boolean | undefined;
  readonly isGenericMethodDefinition?: boolean | undefined;
  readonly containsGenericParameters?: boolean | undefined;
  readonly methodHandle?: RuntimeMethodHandle | undefined;
  readonly isSecurityCritical?: boolean | undefined;
  readonly isSecuritySafeCritical?: boolean | undefined;
  readonly isSecurityTransparent?: boolean | undefined;
  readonly name?: string | undefined;
  readonly declaringType?: string | undefined;
  readonly reflectedType?: string | undefined;
  readonly module?: Module | undefined;
  readonly customAttributes?: CustomAttributeData[] | undefined;
  readonly metadataToken?: number | undefined;

  constructor(data?: IMethodInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).memberType = _data["memberType"];
      (<any>this).returnParameter = _data["returnParameter"]
        ? ParameterInfo.fromJS(_data["returnParameter"])
        : <any>undefined;
      (<any>this).returnType = _data["returnType"];
      (<any>this).returnTypeCustomAttributes = _data[
        "returnTypeCustomAttributes"
      ]
        ? ICustomAttributeProvider.fromJS(_data["returnTypeCustomAttributes"])
        : <any>undefined;
      (<any>this).attributes = _data["attributes"];
      (<any>this).methodImplementationFlags =
        _data["methodImplementationFlags"];
      (<any>this).callingConvention = _data["callingConvention"];
      (<any>this).isAbstract = _data["isAbstract"];
      (<any>this).isConstructor = _data["isConstructor"];
      (<any>this).isFinal = _data["isFinal"];
      (<any>this).isHideBySig = _data["isHideBySig"];
      (<any>this).isSpecialName = _data["isSpecialName"];
      (<any>this).isStatic = _data["isStatic"];
      (<any>this).isVirtual = _data["isVirtual"];
      (<any>this).isAssembly = _data["isAssembly"];
      (<any>this).isFamily = _data["isFamily"];
      (<any>this).isFamilyAndAssembly = _data["isFamilyAndAssembly"];
      (<any>this).isFamilyOrAssembly = _data["isFamilyOrAssembly"];
      (<any>this).isPrivate = _data["isPrivate"];
      (<any>this).isPublic = _data["isPublic"];
      (<any>this).isConstructedGenericMethod =
        _data["isConstructedGenericMethod"];
      (<any>this).isGenericMethod = _data["isGenericMethod"];
      (<any>this).isGenericMethodDefinition =
        _data["isGenericMethodDefinition"];
      (<any>this).containsGenericParameters =
        _data["containsGenericParameters"];
      (<any>this).methodHandle = _data["methodHandle"]
        ? RuntimeMethodHandle.fromJS(_data["methodHandle"])
        : <any>undefined;
      (<any>this).isSecurityCritical = _data["isSecurityCritical"];
      (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"];
      (<any>this).isSecurityTransparent = _data["isSecurityTransparent"];
      (<any>this).name = _data["name"];
      (<any>this).declaringType = _data["declaringType"];
      (<any>this).reflectedType = _data["reflectedType"];
      (<any>this).module = _data["module"]
        ? Module.fromJS(_data["module"])
        : <any>undefined;
      if (Array.isArray(_data["customAttributes"])) {
        (<any>this).customAttributes = [] as any;
        for (let item of _data["customAttributes"])
          (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
      }
      (<any>this).metadataToken = _data["metadataToken"];
    }
  }

  static fromJS(data: any): MethodInfo {
    data = typeof data === "object" ? data : {};
    let result = new MethodInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["memberType"] = this.memberType;
    data["returnParameter"] = this.returnParameter
      ? this.returnParameter.toJSON()
      : <any>undefined;
    data["returnType"] = this.returnType;
    data["returnTypeCustomAttributes"] = this.returnTypeCustomAttributes
      ? this.returnTypeCustomAttributes.toJSON()
      : <any>undefined;
    data["attributes"] = this.attributes;
    data["methodImplementationFlags"] = this.methodImplementationFlags;
    data["callingConvention"] = this.callingConvention;
    data["isAbstract"] = this.isAbstract;
    data["isConstructor"] = this.isConstructor;
    data["isFinal"] = this.isFinal;
    data["isHideBySig"] = this.isHideBySig;
    data["isSpecialName"] = this.isSpecialName;
    data["isStatic"] = this.isStatic;
    data["isVirtual"] = this.isVirtual;
    data["isAssembly"] = this.isAssembly;
    data["isFamily"] = this.isFamily;
    data["isFamilyAndAssembly"] = this.isFamilyAndAssembly;
    data["isFamilyOrAssembly"] = this.isFamilyOrAssembly;
    data["isPrivate"] = this.isPrivate;
    data["isPublic"] = this.isPublic;
    data["isConstructedGenericMethod"] = this.isConstructedGenericMethod;
    data["isGenericMethod"] = this.isGenericMethod;
    data["isGenericMethodDefinition"] = this.isGenericMethodDefinition;
    data["containsGenericParameters"] = this.containsGenericParameters;
    data["methodHandle"] = this.methodHandle
      ? this.methodHandle.toJSON()
      : <any>undefined;
    data["isSecurityCritical"] = this.isSecurityCritical;
    data["isSecuritySafeCritical"] = this.isSecuritySafeCritical;
    data["isSecurityTransparent"] = this.isSecurityTransparent;
    data["name"] = this.name;
    data["declaringType"] = this.declaringType;
    data["reflectedType"] = this.reflectedType;
    data["module"] = this.module ? this.module.toJSON() : <any>undefined;
    if (Array.isArray(this.customAttributes)) {
      data["customAttributes"] = [];
      for (let item of this.customAttributes)
        data["customAttributes"].push(item.toJSON());
    }
    data["metadataToken"] = this.metadataToken;
    return data;
  }
}

export interface IMethodInfo {
  memberType?: MethodInfoMemberType | undefined;
  returnParameter?: ParameterInfo | undefined;
  returnType?: string | undefined;
  returnTypeCustomAttributes?: ICustomAttributeProvider | undefined;
  attributes?: MethodInfoAttributes | undefined;
  methodImplementationFlags?: MethodInfoMethodImplementationFlags | undefined;
  callingConvention?: MethodInfoCallingConvention | undefined;
  isAbstract?: boolean | undefined;
  isConstructor?: boolean | undefined;
  isFinal?: boolean | undefined;
  isHideBySig?: boolean | undefined;
  isSpecialName?: boolean | undefined;
  isStatic?: boolean | undefined;
  isVirtual?: boolean | undefined;
  isAssembly?: boolean | undefined;
  isFamily?: boolean | undefined;
  isFamilyAndAssembly?: boolean | undefined;
  isFamilyOrAssembly?: boolean | undefined;
  isPrivate?: boolean | undefined;
  isPublic?: boolean | undefined;
  isConstructedGenericMethod?: boolean | undefined;
  isGenericMethod?: boolean | undefined;
  isGenericMethodDefinition?: boolean | undefined;
  containsGenericParameters?: boolean | undefined;
  methodHandle?: RuntimeMethodHandle | undefined;
  isSecurityCritical?: boolean | undefined;
  isSecuritySafeCritical?: boolean | undefined;
  isSecurityTransparent?: boolean | undefined;
  name?: string | undefined;
  declaringType?: string | undefined;
  reflectedType?: string | undefined;
  module?: Module | undefined;
  customAttributes?: CustomAttributeData[] | undefined;
  metadataToken?: number | undefined;
}

export class ParameterInfo implements IParameterInfo {
  readonly attributes?: ParameterInfoAttributes | undefined;
  readonly member?: MemberInfo | undefined;
  readonly name?: string | undefined;
  readonly parameterType?: string | undefined;
  readonly position?: number | undefined;
  readonly isIn?: boolean | undefined;
  readonly isLcid?: boolean | undefined;
  readonly isOptional?: boolean | undefined;
  readonly isOut?: boolean | undefined;
  readonly isRetval?: boolean | undefined;
  readonly defaultValue?: any | undefined;
  readonly rawDefaultValue?: any | undefined;
  readonly hasDefaultValue?: boolean | undefined;
  readonly customAttributes?: CustomAttributeData[] | undefined;
  readonly metadataToken?: number | undefined;

  constructor(data?: IParameterInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).attributes = _data["attributes"];
      (<any>this).member = _data["member"]
        ? MemberInfo.fromJS(_data["member"])
        : <any>undefined;
      (<any>this).name = _data["name"];
      (<any>this).parameterType = _data["parameterType"];
      (<any>this).position = _data["position"];
      (<any>this).isIn = _data["isIn"];
      (<any>this).isLcid = _data["isLcid"];
      (<any>this).isOptional = _data["isOptional"];
      (<any>this).isOut = _data["isOut"];
      (<any>this).isRetval = _data["isRetval"];
      (<any>this).defaultValue = _data["defaultValue"];
      (<any>this).rawDefaultValue = _data["rawDefaultValue"];
      (<any>this).hasDefaultValue = _data["hasDefaultValue"];
      if (Array.isArray(_data["customAttributes"])) {
        (<any>this).customAttributes = [] as any;
        for (let item of _data["customAttributes"])
          (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
      }
      (<any>this).metadataToken = _data["metadataToken"];
    }
  }

  static fromJS(data: any): ParameterInfo {
    data = typeof data === "object" ? data : {};
    let result = new ParameterInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["attributes"] = this.attributes;
    data["member"] = this.member ? this.member.toJSON() : <any>undefined;
    data["name"] = this.name;
    data["parameterType"] = this.parameterType;
    data["position"] = this.position;
    data["isIn"] = this.isIn;
    data["isLcid"] = this.isLcid;
    data["isOptional"] = this.isOptional;
    data["isOut"] = this.isOut;
    data["isRetval"] = this.isRetval;
    data["defaultValue"] = this.defaultValue;
    data["rawDefaultValue"] = this.rawDefaultValue;
    data["hasDefaultValue"] = this.hasDefaultValue;
    if (Array.isArray(this.customAttributes)) {
      data["customAttributes"] = [];
      for (let item of this.customAttributes)
        data["customAttributes"].push(item.toJSON());
    }
    data["metadataToken"] = this.metadataToken;
    return data;
  }
}

export interface IParameterInfo {
  attributes?: ParameterInfoAttributes | undefined;
  member?: MemberInfo | undefined;
  name?: string | undefined;
  parameterType?: string | undefined;
  position?: number | undefined;
  isIn?: boolean | undefined;
  isLcid?: boolean | undefined;
  isOptional?: boolean | undefined;
  isOut?: boolean | undefined;
  isRetval?: boolean | undefined;
  defaultValue?: any | undefined;
  rawDefaultValue?: any | undefined;
  hasDefaultValue?: boolean | undefined;
  customAttributes?: CustomAttributeData[] | undefined;
  metadataToken?: number | undefined;
}

export class ICustomAttributeProvider implements IICustomAttributeProvider {
  constructor(data?: IICustomAttributeProvider) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {}

  static fromJS(data: any): ICustomAttributeProvider {
    data = typeof data === "object" ? data : {};
    let result = new ICustomAttributeProvider();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    return data;
  }
}

export interface IICustomAttributeProvider {}

export class RuntimeMethodHandle implements IRuntimeMethodHandle {
  readonly value?: any | undefined;

  constructor(data?: IRuntimeMethodHandle) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).value = _data["value"];
    }
  }

  static fromJS(data: any): RuntimeMethodHandle {
    data = typeof data === "object" ? data : {};
    let result = new RuntimeMethodHandle();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["value"] = this.value;
    return data;
  }
}

export interface IRuntimeMethodHandle {
  value?: any | undefined;
}

export class Module implements IModule {
  readonly assembly?: Assembly | undefined;
  readonly fullyQualifiedName?: string | undefined;
  readonly name?: string | undefined;
  readonly mdStreamVersion?: number | undefined;
  readonly moduleVersionId?: string | undefined;
  readonly scopeName?: string | undefined;
  readonly moduleHandle?: ModuleHandle | undefined;
  readonly customAttributes?: CustomAttributeData[] | undefined;
  readonly metadataToken?: number | undefined;

  constructor(data?: IModule) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).assembly = _data["assembly"]
        ? Assembly.fromJS(_data["assembly"])
        : <any>undefined;
      (<any>this).fullyQualifiedName = _data["fullyQualifiedName"];
      (<any>this).name = _data["name"];
      (<any>this).mdStreamVersion = _data["mdStreamVersion"];
      (<any>this).moduleVersionId = _data["moduleVersionId"];
      (<any>this).scopeName = _data["scopeName"];
      (<any>this).moduleHandle = _data["moduleHandle"]
        ? ModuleHandle.fromJS(_data["moduleHandle"])
        : <any>undefined;
      if (Array.isArray(_data["customAttributes"])) {
        (<any>this).customAttributes = [] as any;
        for (let item of _data["customAttributes"])
          (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
      }
      (<any>this).metadataToken = _data["metadataToken"];
    }
  }

  static fromJS(data: any): Module {
    data = typeof data === "object" ? data : {};
    let result = new Module();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["assembly"] = this.assembly ? this.assembly.toJSON() : <any>undefined;
    data["fullyQualifiedName"] = this.fullyQualifiedName;
    data["name"] = this.name;
    data["mdStreamVersion"] = this.mdStreamVersion;
    data["moduleVersionId"] = this.moduleVersionId;
    data["scopeName"] = this.scopeName;
    data["moduleHandle"] = this.moduleHandle
      ? this.moduleHandle.toJSON()
      : <any>undefined;
    if (Array.isArray(this.customAttributes)) {
      data["customAttributes"] = [];
      for (let item of this.customAttributes)
        data["customAttributes"].push(item.toJSON());
    }
    data["metadataToken"] = this.metadataToken;
    return data;
  }
}

export interface IModule {
  assembly?: Assembly | undefined;
  fullyQualifiedName?: string | undefined;
  name?: string | undefined;
  mdStreamVersion?: number | undefined;
  moduleVersionId?: string | undefined;
  scopeName?: string | undefined;
  moduleHandle?: ModuleHandle | undefined;
  customAttributes?: CustomAttributeData[] | undefined;
  metadataToken?: number | undefined;
}

export class CustomAttributeData implements ICustomAttributeData {
  readonly attributeType?: string | undefined;
  readonly constructor_?: ConstructorInfo | undefined;
  readonly constructorArguments?: CustomAttributeTypedArgument[] | undefined;
  readonly namedArguments?: CustomAttributeNamedArgument[] | undefined;

  constructor(data?: ICustomAttributeData) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).attributeType = _data["attributeType"];
      (<any>this).constructor_ = _data["constructor"]
        ? ConstructorInfo.fromJS(_data["constructor"])
        : <any>undefined;
      if (Array.isArray(_data["constructorArguments"])) {
        (<any>this).constructorArguments = [] as any;
        for (let item of _data["constructorArguments"])
          (<any>this).constructorArguments!.push(
            CustomAttributeTypedArgument.fromJS(item)
          );
      }
      if (Array.isArray(_data["namedArguments"])) {
        (<any>this).namedArguments = [] as any;
        for (let item of _data["namedArguments"])
          (<any>this).namedArguments!.push(
            CustomAttributeNamedArgument.fromJS(item)
          );
      }
    }
  }

  static fromJS(data: any): CustomAttributeData {
    data = typeof data === "object" ? data : {};
    let result = new CustomAttributeData();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["attributeType"] = this.attributeType;
    data["constructor"] = this.constructor_
      ? this.constructor_.toJSON()
      : <any>undefined;
    if (Array.isArray(this.constructorArguments)) {
      data["constructorArguments"] = [];
      for (let item of this.constructorArguments)
        data["constructorArguments"].push(item.toJSON());
    }
    if (Array.isArray(this.namedArguments)) {
      data["namedArguments"] = [];
      for (let item of this.namedArguments)
        data["namedArguments"].push(item.toJSON());
    }
    return data;
  }
}

export interface ICustomAttributeData {
  attributeType?: string | undefined;
  constructor_?: ConstructorInfo | undefined;
  constructorArguments?: CustomAttributeTypedArgument[] | undefined;
  namedArguments?: CustomAttributeNamedArgument[] | undefined;
}

export class MemberInfo implements IMemberInfo {
  readonly memberType?: MemberInfoMemberType | undefined;
  readonly name?: string | undefined;
  readonly declaringType?: string | undefined;
  readonly reflectedType?: string | undefined;
  readonly module?: Module | undefined;
  readonly customAttributes?: CustomAttributeData[] | undefined;
  readonly metadataToken?: number | undefined;

  constructor(data?: IMemberInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).memberType = _data["memberType"];
      (<any>this).name = _data["name"];
      (<any>this).declaringType = _data["declaringType"];
      (<any>this).reflectedType = _data["reflectedType"];
      (<any>this).module = _data["module"]
        ? Module.fromJS(_data["module"])
        : <any>undefined;
      if (Array.isArray(_data["customAttributes"])) {
        (<any>this).customAttributes = [] as any;
        for (let item of _data["customAttributes"])
          (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
      }
      (<any>this).metadataToken = _data["metadataToken"];
    }
  }

  static fromJS(data: any): MemberInfo {
    data = typeof data === "object" ? data : {};
    let result = new MemberInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["memberType"] = this.memberType;
    data["name"] = this.name;
    data["declaringType"] = this.declaringType;
    data["reflectedType"] = this.reflectedType;
    data["module"] = this.module ? this.module.toJSON() : <any>undefined;
    if (Array.isArray(this.customAttributes)) {
      data["customAttributes"] = [];
      for (let item of this.customAttributes)
        data["customAttributes"].push(item.toJSON());
    }
    data["metadataToken"] = this.metadataToken;
    return data;
  }
}

export interface IMemberInfo {
  memberType?: MemberInfoMemberType | undefined;
  name?: string | undefined;
  declaringType?: string | undefined;
  reflectedType?: string | undefined;
  module?: Module | undefined;
  customAttributes?: CustomAttributeData[] | undefined;
  metadataToken?: number | undefined;
}

export class Assembly implements IAssembly {
  readonly definedTypes?: string[] | undefined;
  readonly exportedTypes?: string[] | undefined;
  readonly codeBase?: string | undefined;
  readonly entryPoint?: MethodInfo | undefined;
  readonly fullName?: string | undefined;
  readonly imageRuntimeVersion?: string | undefined;
  readonly isDynamic?: boolean | undefined;
  readonly location?: string | undefined;
  readonly reflectionOnly?: boolean | undefined;
  readonly isFullyTrusted?: boolean | undefined;
  readonly customAttributes?: CustomAttributeData[] | undefined;
  readonly escapedCodeBase?: string | undefined;
  readonly manifestModule?: Module | undefined;
  readonly modules?: Module[] | undefined;
  readonly globalAssemblyCache?: boolean | undefined;
  readonly hostContext?: number | undefined;
  readonly securityRuleSet?: AssemblySecurityRuleSet | undefined;

  constructor(data?: IAssembly) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["definedTypes"])) {
        (<any>this).definedTypes = [] as any;
        for (let item of _data["definedTypes"])
          (<any>this).definedTypes!.push(item);
      }
      if (Array.isArray(_data["exportedTypes"])) {
        (<any>this).exportedTypes = [] as any;
        for (let item of _data["exportedTypes"])
          (<any>this).exportedTypes!.push(item);
      }
      (<any>this).codeBase = _data["codeBase"];
      (<any>this).entryPoint = _data["entryPoint"]
        ? MethodInfo.fromJS(_data["entryPoint"])
        : <any>undefined;
      (<any>this).fullName = _data["fullName"];
      (<any>this).imageRuntimeVersion = _data["imageRuntimeVersion"];
      (<any>this).isDynamic = _data["isDynamic"];
      (<any>this).location = _data["location"];
      (<any>this).reflectionOnly = _data["reflectionOnly"];
      (<any>this).isFullyTrusted = _data["isFullyTrusted"];
      if (Array.isArray(_data["customAttributes"])) {
        (<any>this).customAttributes = [] as any;
        for (let item of _data["customAttributes"])
          (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
      }
      (<any>this).escapedCodeBase = _data["escapedCodeBase"];
      (<any>this).manifestModule = _data["manifestModule"]
        ? Module.fromJS(_data["manifestModule"])
        : <any>undefined;
      if (Array.isArray(_data["modules"])) {
        (<any>this).modules = [] as any;
        for (let item of _data["modules"])
          (<any>this).modules!.push(Module.fromJS(item));
      }
      (<any>this).globalAssemblyCache = _data["globalAssemblyCache"];
      (<any>this).hostContext = _data["hostContext"];
      (<any>this).securityRuleSet = _data["securityRuleSet"];
    }
  }

  static fromJS(data: any): Assembly {
    data = typeof data === "object" ? data : {};
    let result = new Assembly();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.definedTypes)) {
      data["definedTypes"] = [];
      for (let item of this.definedTypes) data["definedTypes"].push(item);
    }
    if (Array.isArray(this.exportedTypes)) {
      data["exportedTypes"] = [];
      for (let item of this.exportedTypes) data["exportedTypes"].push(item);
    }
    data["codeBase"] = this.codeBase;
    data["entryPoint"] = this.entryPoint
      ? this.entryPoint.toJSON()
      : <any>undefined;
    data["fullName"] = this.fullName;
    data["imageRuntimeVersion"] = this.imageRuntimeVersion;
    data["isDynamic"] = this.isDynamic;
    data["location"] = this.location;
    data["reflectionOnly"] = this.reflectionOnly;
    data["isFullyTrusted"] = this.isFullyTrusted;
    if (Array.isArray(this.customAttributes)) {
      data["customAttributes"] = [];
      for (let item of this.customAttributes)
        data["customAttributes"].push(item.toJSON());
    }
    data["escapedCodeBase"] = this.escapedCodeBase;
    data["manifestModule"] = this.manifestModule
      ? this.manifestModule.toJSON()
      : <any>undefined;
    if (Array.isArray(this.modules)) {
      data["modules"] = [];
      for (let item of this.modules) data["modules"].push(item.toJSON());
    }
    data["globalAssemblyCache"] = this.globalAssemblyCache;
    data["hostContext"] = this.hostContext;
    data["securityRuleSet"] = this.securityRuleSet;
    return data;
  }
}

export interface IAssembly {
  definedTypes?: string[] | undefined;
  exportedTypes?: string[] | undefined;
  codeBase?: string | undefined;
  entryPoint?: MethodInfo | undefined;
  fullName?: string | undefined;
  imageRuntimeVersion?: string | undefined;
  isDynamic?: boolean | undefined;
  location?: string | undefined;
  reflectionOnly?: boolean | undefined;
  isFullyTrusted?: boolean | undefined;
  customAttributes?: CustomAttributeData[] | undefined;
  escapedCodeBase?: string | undefined;
  manifestModule?: Module | undefined;
  modules?: Module[] | undefined;
  globalAssemblyCache?: boolean | undefined;
  hostContext?: number | undefined;
  securityRuleSet?: AssemblySecurityRuleSet | undefined;
}

export class ModuleHandle implements IModuleHandle {
  readonly mdStreamVersion?: number | undefined;

  constructor(data?: IModuleHandle) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).mdStreamVersion = _data["mdStreamVersion"];
    }
  }

  static fromJS(data: any): ModuleHandle {
    data = typeof data === "object" ? data : {};
    let result = new ModuleHandle();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["mdStreamVersion"] = this.mdStreamVersion;
    return data;
  }
}

export interface IModuleHandle {
  mdStreamVersion?: number | undefined;
}

export class ConstructorInfo implements IConstructorInfo {
  readonly memberType?: ConstructorInfoMemberType | undefined;
  readonly attributes?: ConstructorInfoAttributes | undefined;
  readonly methodImplementationFlags?:
    | ConstructorInfoMethodImplementationFlags
    | undefined;
  readonly callingConvention?: ConstructorInfoCallingConvention | undefined;
  readonly isAbstract?: boolean | undefined;
  readonly isConstructor?: boolean | undefined;
  readonly isFinal?: boolean | undefined;
  readonly isHideBySig?: boolean | undefined;
  readonly isSpecialName?: boolean | undefined;
  readonly isStatic?: boolean | undefined;
  readonly isVirtual?: boolean | undefined;
  readonly isAssembly?: boolean | undefined;
  readonly isFamily?: boolean | undefined;
  readonly isFamilyAndAssembly?: boolean | undefined;
  readonly isFamilyOrAssembly?: boolean | undefined;
  readonly isPrivate?: boolean | undefined;
  readonly isPublic?: boolean | undefined;
  readonly isConstructedGenericMethod?: boolean | undefined;
  readonly isGenericMethod?: boolean | undefined;
  readonly isGenericMethodDefinition?: boolean | undefined;
  readonly containsGenericParameters?: boolean | undefined;
  readonly methodHandle?: RuntimeMethodHandle | undefined;
  readonly isSecurityCritical?: boolean | undefined;
  readonly isSecuritySafeCritical?: boolean | undefined;
  readonly isSecurityTransparent?: boolean | undefined;
  readonly name?: string | undefined;
  readonly declaringType?: string | undefined;
  readonly reflectedType?: string | undefined;
  readonly module?: Module | undefined;
  readonly customAttributes?: CustomAttributeData[] | undefined;
  readonly metadataToken?: number | undefined;

  constructor(data?: IConstructorInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).memberType = _data["memberType"];
      (<any>this).attributes = _data["attributes"];
      (<any>this).methodImplementationFlags =
        _data["methodImplementationFlags"];
      (<any>this).callingConvention = _data["callingConvention"];
      (<any>this).isAbstract = _data["isAbstract"];
      (<any>this).isConstructor = _data["isConstructor"];
      (<any>this).isFinal = _data["isFinal"];
      (<any>this).isHideBySig = _data["isHideBySig"];
      (<any>this).isSpecialName = _data["isSpecialName"];
      (<any>this).isStatic = _data["isStatic"];
      (<any>this).isVirtual = _data["isVirtual"];
      (<any>this).isAssembly = _data["isAssembly"];
      (<any>this).isFamily = _data["isFamily"];
      (<any>this).isFamilyAndAssembly = _data["isFamilyAndAssembly"];
      (<any>this).isFamilyOrAssembly = _data["isFamilyOrAssembly"];
      (<any>this).isPrivate = _data["isPrivate"];
      (<any>this).isPublic = _data["isPublic"];
      (<any>this).isConstructedGenericMethod =
        _data["isConstructedGenericMethod"];
      (<any>this).isGenericMethod = _data["isGenericMethod"];
      (<any>this).isGenericMethodDefinition =
        _data["isGenericMethodDefinition"];
      (<any>this).containsGenericParameters =
        _data["containsGenericParameters"];
      (<any>this).methodHandle = _data["methodHandle"]
        ? RuntimeMethodHandle.fromJS(_data["methodHandle"])
        : <any>undefined;
      (<any>this).isSecurityCritical = _data["isSecurityCritical"];
      (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"];
      (<any>this).isSecurityTransparent = _data["isSecurityTransparent"];
      (<any>this).name = _data["name"];
      (<any>this).declaringType = _data["declaringType"];
      (<any>this).reflectedType = _data["reflectedType"];
      (<any>this).module = _data["module"]
        ? Module.fromJS(_data["module"])
        : <any>undefined;
      if (Array.isArray(_data["customAttributes"])) {
        (<any>this).customAttributes = [] as any;
        for (let item of _data["customAttributes"])
          (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
      }
      (<any>this).metadataToken = _data["metadataToken"];
    }
  }

  static fromJS(data: any): ConstructorInfo {
    data = typeof data === "object" ? data : {};
    let result = new ConstructorInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["memberType"] = this.memberType;
    data["attributes"] = this.attributes;
    data["methodImplementationFlags"] = this.methodImplementationFlags;
    data["callingConvention"] = this.callingConvention;
    data["isAbstract"] = this.isAbstract;
    data["isConstructor"] = this.isConstructor;
    data["isFinal"] = this.isFinal;
    data["isHideBySig"] = this.isHideBySig;
    data["isSpecialName"] = this.isSpecialName;
    data["isStatic"] = this.isStatic;
    data["isVirtual"] = this.isVirtual;
    data["isAssembly"] = this.isAssembly;
    data["isFamily"] = this.isFamily;
    data["isFamilyAndAssembly"] = this.isFamilyAndAssembly;
    data["isFamilyOrAssembly"] = this.isFamilyOrAssembly;
    data["isPrivate"] = this.isPrivate;
    data["isPublic"] = this.isPublic;
    data["isConstructedGenericMethod"] = this.isConstructedGenericMethod;
    data["isGenericMethod"] = this.isGenericMethod;
    data["isGenericMethodDefinition"] = this.isGenericMethodDefinition;
    data["containsGenericParameters"] = this.containsGenericParameters;
    data["methodHandle"] = this.methodHandle
      ? this.methodHandle.toJSON()
      : <any>undefined;
    data["isSecurityCritical"] = this.isSecurityCritical;
    data["isSecuritySafeCritical"] = this.isSecuritySafeCritical;
    data["isSecurityTransparent"] = this.isSecurityTransparent;
    data["name"] = this.name;
    data["declaringType"] = this.declaringType;
    data["reflectedType"] = this.reflectedType;
    data["module"] = this.module ? this.module.toJSON() : <any>undefined;
    if (Array.isArray(this.customAttributes)) {
      data["customAttributes"] = [];
      for (let item of this.customAttributes)
        data["customAttributes"].push(item.toJSON());
    }
    data["metadataToken"] = this.metadataToken;
    return data;
  }
}

export interface IConstructorInfo {
  memberType?: ConstructorInfoMemberType | undefined;
  attributes?: ConstructorInfoAttributes | undefined;
  methodImplementationFlags?:
    | ConstructorInfoMethodImplementationFlags
    | undefined;
  callingConvention?: ConstructorInfoCallingConvention | undefined;
  isAbstract?: boolean | undefined;
  isConstructor?: boolean | undefined;
  isFinal?: boolean | undefined;
  isHideBySig?: boolean | undefined;
  isSpecialName?: boolean | undefined;
  isStatic?: boolean | undefined;
  isVirtual?: boolean | undefined;
  isAssembly?: boolean | undefined;
  isFamily?: boolean | undefined;
  isFamilyAndAssembly?: boolean | undefined;
  isFamilyOrAssembly?: boolean | undefined;
  isPrivate?: boolean | undefined;
  isPublic?: boolean | undefined;
  isConstructedGenericMethod?: boolean | undefined;
  isGenericMethod?: boolean | undefined;
  isGenericMethodDefinition?: boolean | undefined;
  containsGenericParameters?: boolean | undefined;
  methodHandle?: RuntimeMethodHandle | undefined;
  isSecurityCritical?: boolean | undefined;
  isSecuritySafeCritical?: boolean | undefined;
  isSecurityTransparent?: boolean | undefined;
  name?: string | undefined;
  declaringType?: string | undefined;
  reflectedType?: string | undefined;
  module?: Module | undefined;
  customAttributes?: CustomAttributeData[] | undefined;
  metadataToken?: number | undefined;
}

export class CustomAttributeTypedArgument
  implements ICustomAttributeTypedArgument {
  readonly argumentType?: string | undefined;
  readonly value?: any | undefined;

  constructor(data?: ICustomAttributeTypedArgument) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).argumentType = _data["argumentType"];
      (<any>this).value = _data["value"];
    }
  }

  static fromJS(data: any): CustomAttributeTypedArgument {
    data = typeof data === "object" ? data : {};
    let result = new CustomAttributeTypedArgument();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["argumentType"] = this.argumentType;
    data["value"] = this.value;
    return data;
  }
}

export interface ICustomAttributeTypedArgument {
  argumentType?: string | undefined;
  value?: any | undefined;
}

export class CustomAttributeNamedArgument
  implements ICustomAttributeNamedArgument {
  readonly memberInfo?: MemberInfo | undefined;
  readonly typedValue?: CustomAttributeTypedArgument | undefined;
  readonly memberName?: string | undefined;
  readonly isField?: boolean | undefined;

  constructor(data?: ICustomAttributeNamedArgument) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).memberInfo = _data["memberInfo"]
        ? MemberInfo.fromJS(_data["memberInfo"])
        : <any>undefined;
      (<any>this).typedValue = _data["typedValue"]
        ? CustomAttributeTypedArgument.fromJS(_data["typedValue"])
        : <any>undefined;
      (<any>this).memberName = _data["memberName"];
      (<any>this).isField = _data["isField"];
    }
  }

  static fromJS(data: any): CustomAttributeNamedArgument {
    data = typeof data === "object" ? data : {};
    let result = new CustomAttributeNamedArgument();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["memberInfo"] = this.memberInfo
      ? this.memberInfo.toJSON()
      : <any>undefined;
    data["typedValue"] = this.typedValue
      ? this.typedValue.toJSON()
      : <any>undefined;
    data["memberName"] = this.memberName;
    data["isField"] = this.isField;
    return data;
  }
}

export interface ICustomAttributeNamedArgument {
  memberInfo?: MemberInfo | undefined;
  typedValue?: CustomAttributeTypedArgument | undefined;
  memberName?: string | undefined;
  isField?: boolean | undefined;
}

export class DataSourceResult implements IDataSourceResult {
  data?: any[] | undefined;
  total?: number | undefined;
  aggregateResults?: AggregateResult[] | undefined;
  errors?: any | undefined;

  constructor(data?: IDataSourceResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["data"])) {
        this.data = [] as any;
        for (let item of _data["data"]) this.data!.push(item);
      }
      this.total = _data["total"];
      if (Array.isArray(_data["aggregateResults"])) {
        this.aggregateResults = [] as any;
        for (let item of _data["aggregateResults"])
          this.aggregateResults!.push(AggregateResult.fromJS(item));
      }
      this.errors = _data["errors"];
    }
  }

  static fromJS(data: any): DataSourceResult {
    data = typeof data === "object" ? data : {};
    let result = new DataSourceResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.data)) {
      data["data"] = [];
      for (let item of this.data) data["data"].push(item);
    }
    data["total"] = this.total;
    if (Array.isArray(this.aggregateResults)) {
      data["aggregateResults"] = [];
      for (let item of this.aggregateResults)
        data["aggregateResults"].push(item.toJSON());
    }
    data["errors"] = this.errors;
    return data;
  }
}

export interface IDataSourceResult {
  data?: any[] | undefined;
  total?: number | undefined;
  aggregateResults?: AggregateResult[] | undefined;
  errors?: any | undefined;
}

export class AggregateResult implements IAggregateResult {
  readonly value?: any | undefined;
  readonly member?: string | undefined;
  readonly formattedValue?: any | undefined;
  itemCount?: number | undefined;
  readonly caption?: string | undefined;
  readonly functionName?: string | undefined;
  readonly aggregateMethodName?: string | undefined;

  constructor(data?: IAggregateResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).value = _data["value"];
      (<any>this).member = _data["member"];
      (<any>this).formattedValue = _data["formattedValue"];
      this.itemCount = _data["itemCount"];
      (<any>this).caption = _data["caption"];
      (<any>this).functionName = _data["functionName"];
      (<any>this).aggregateMethodName = _data["aggregateMethodName"];
    }
  }

  static fromJS(data: any): AggregateResult {
    data = typeof data === "object" ? data : {};
    let result = new AggregateResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["value"] = this.value;
    data["member"] = this.member;
    data["formattedValue"] = this.formattedValue;
    data["itemCount"] = this.itemCount;
    data["caption"] = this.caption;
    data["functionName"] = this.functionName;
    data["aggregateMethodName"] = this.aggregateMethodName;
    return data;
  }
}

export interface IAggregateResult {
  value?: any | undefined;
  member?: string | undefined;
  formattedValue?: any | undefined;
  itemCount?: number | undefined;
  caption?: string | undefined;
  functionName?: string | undefined;
  aggregateMethodName?: string | undefined;
}

export class DataSourceLoadOptions implements IDataSourceLoadOptions {
  requireTotalCount?: boolean | undefined;
  requireGroupCount?: boolean | undefined;
  isCountQuery?: boolean | undefined;
  skip?: number | undefined;
  take?: number | undefined;
  sort?: SortingInfo[] | undefined;
  group?: GroupingInfo[] | undefined;
  filter?: any[] | undefined;
  totalSummary?: SummaryInfo[] | undefined;
  groupSummary?: SummaryInfo[] | undefined;
  select?: string[] | undefined;
  preSelect?: string[] | undefined;
  remoteSelect?: boolean | undefined;
  remoteGrouping?: boolean | undefined;
  primaryKey?: string[] | undefined;
  defaultSort?: string | undefined;
  stringToLower?: boolean | undefined;

  constructor(data?: IDataSourceLoadOptions) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.requireTotalCount = _data["requireTotalCount"];
      this.requireGroupCount = _data["requireGroupCount"];
      this.isCountQuery = _data["isCountQuery"];
      this.skip = _data["skip"];
      this.take = _data["take"];
      if (Array.isArray(_data["sort"])) {
        this.sort = [] as any;
        for (let item of _data["sort"])
          this.sort!.push(SortingInfo.fromJS(item));
      }
      if (Array.isArray(_data["group"])) {
        this.group = [] as any;
        for (let item of _data["group"])
          this.group!.push(GroupingInfo.fromJS(item));
      }
      if (Array.isArray(_data["filter"])) {
        this.filter = [] as any;
        for (let item of _data["filter"]) this.filter!.push(item);
      }
      if (Array.isArray(_data["totalSummary"])) {
        this.totalSummary = [] as any;
        for (let item of _data["totalSummary"])
          this.totalSummary!.push(SummaryInfo.fromJS(item));
      }
      if (Array.isArray(_data["groupSummary"])) {
        this.groupSummary = [] as any;
        for (let item of _data["groupSummary"])
          this.groupSummary!.push(SummaryInfo.fromJS(item));
      }
      if (Array.isArray(_data["select"])) {
        this.select = [] as any;
        for (let item of _data["select"]) this.select!.push(item);
      }
      if (Array.isArray(_data["preSelect"])) {
        this.preSelect = [] as any;
        for (let item of _data["preSelect"]) this.preSelect!.push(item);
      }
      this.remoteSelect = _data["remoteSelect"];
      this.remoteGrouping = _data["remoteGrouping"];
      if (Array.isArray(_data["primaryKey"])) {
        this.primaryKey = [] as any;
        for (let item of _data["primaryKey"]) this.primaryKey!.push(item);
      }
      this.defaultSort = _data["defaultSort"];
      this.stringToLower = _data["stringToLower"];
    }
  }

  static fromJS(data: any): DataSourceLoadOptions {
    data = typeof data === "object" ? data : {};
    let result = new DataSourceLoadOptions();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["requireTotalCount"] = this.requireTotalCount;
    data["requireGroupCount"] = this.requireGroupCount;
    data["isCountQuery"] = this.isCountQuery;
    data["skip"] = this.skip;
    data["take"] = this.take;
    if (Array.isArray(this.sort)) {
      data["sort"] = [];
      for (let item of this.sort) data["sort"].push(item.toJSON());
    }
    if (Array.isArray(this.group)) {
      data["group"] = [];
      for (let item of this.group) data["group"].push(item.toJSON());
    }
    if (Array.isArray(this.filter)) {
      data["filter"] = [];
      for (let item of this.filter) data["filter"].push(item);
    }
    if (Array.isArray(this.totalSummary)) {
      data["totalSummary"] = [];
      for (let item of this.totalSummary)
        data["totalSummary"].push(item.toJSON());
    }
    if (Array.isArray(this.groupSummary)) {
      data["groupSummary"] = [];
      for (let item of this.groupSummary)
        data["groupSummary"].push(item.toJSON());
    }
    if (Array.isArray(this.select)) {
      data["select"] = [];
      for (let item of this.select) data["select"].push(item);
    }
    if (Array.isArray(this.preSelect)) {
      data["preSelect"] = [];
      for (let item of this.preSelect) data["preSelect"].push(item);
    }
    data["remoteSelect"] = this.remoteSelect;
    data["remoteGrouping"] = this.remoteGrouping;
    if (Array.isArray(this.primaryKey)) {
      data["primaryKey"] = [];
      for (let item of this.primaryKey) data["primaryKey"].push(item);
    }
    data["defaultSort"] = this.defaultSort;
    data["stringToLower"] = this.stringToLower;
    return data;
  }
}

export interface IDataSourceLoadOptions {
  requireTotalCount?: boolean | undefined;
  requireGroupCount?: boolean | undefined;
  isCountQuery?: boolean | undefined;
  skip?: number | undefined;
  take?: number | undefined;
  sort?: SortingInfo[] | undefined;
  group?: GroupingInfo[] | undefined;
  filter?: any[] | undefined;
  totalSummary?: SummaryInfo[] | undefined;
  groupSummary?: SummaryInfo[] | undefined;
  select?: string[] | undefined;
  preSelect?: string[] | undefined;
  remoteSelect?: boolean | undefined;
  remoteGrouping?: boolean | undefined;
  primaryKey?: string[] | undefined;
  defaultSort?: string | undefined;
  stringToLower?: boolean | undefined;
}

export class SortingInfo implements ISortingInfo {
  selector?: string | undefined;
  desc?: boolean | undefined;

  constructor(data?: ISortingInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.selector = _data["selector"];
      this.desc = _data["desc"];
    }
  }

  static fromJS(data: any): SortingInfo {
    data = typeof data === "object" ? data : {};
    let result = new SortingInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["selector"] = this.selector;
    data["desc"] = this.desc;
    return data;
  }
}

export interface ISortingInfo {
  selector?: string | undefined;
  desc?: boolean | undefined;
}

export class GroupingInfo implements IGroupingInfo {
  groupInterval?: string | undefined;
  isExpanded?: boolean | undefined;
  selector?: string | undefined;
  desc?: boolean | undefined;

  constructor(data?: IGroupingInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.groupInterval = _data["groupInterval"];
      this.isExpanded = _data["isExpanded"];
      this.selector = _data["selector"];
      this.desc = _data["desc"];
    }
  }

  static fromJS(data: any): GroupingInfo {
    data = typeof data === "object" ? data : {};
    let result = new GroupingInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["groupInterval"] = this.groupInterval;
    data["isExpanded"] = this.isExpanded;
    data["selector"] = this.selector;
    data["desc"] = this.desc;
    return data;
  }
}

export interface IGroupingInfo {
  groupInterval?: string | undefined;
  isExpanded?: boolean | undefined;
  selector?: string | undefined;
  desc?: boolean | undefined;
}

export class SummaryInfo implements ISummaryInfo {
  selector?: string | undefined;
  summaryType?: string | undefined;

  constructor(data?: ISummaryInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.selector = _data["selector"];
      this.summaryType = _data["summaryType"];
    }
  }

  static fromJS(data: any): SummaryInfo {
    data = typeof data === "object" ? data : {};
    let result = new SummaryInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["selector"] = this.selector;
    data["summaryType"] = this.summaryType;
    return data;
  }
}

export interface ISummaryInfo {
  selector?: string | undefined;
  summaryType?: string | undefined;
}

export class LoadResult implements ILoadResult {
  data?: any[] | undefined;
  totalCount?: number | undefined;
  groupCount?: number | undefined;
  summary?: any[] | undefined;

  constructor(data?: ILoadResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.totalCount = -1;
      this.groupCount = -1;
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["data"])) {
        this.data = [] as any;
        for (let item of _data["data"]) this.data!.push(item);
      }
      this.totalCount =
        _data["totalCount"] !== undefined ? _data["totalCount"] : -1;
      this.groupCount =
        _data["groupCount"] !== undefined ? _data["groupCount"] : -1;
      if (Array.isArray(_data["summary"])) {
        this.summary = [] as any;
        for (let item of _data["summary"]) this.summary!.push(item);
      }
    }
  }

  static fromJS(data: any): LoadResult {
    data = typeof data === "object" ? data : {};
    let result = new LoadResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.data)) {
      data["data"] = [];
      for (let item of this.data) data["data"].push(item);
    }
    data["totalCount"] = this.totalCount;
    data["groupCount"] = this.groupCount;
    if (Array.isArray(this.summary)) {
      data["summary"] = [];
      for (let item of this.summary) data["summary"].push(item);
    }
    return data;
  }
}

export interface ILoadResult {
  data?: any[] | undefined;
  totalCount?: number | undefined;
  groupCount?: number | undefined;
  summary?: any[] | undefined;
}

export class PagedResultDtoOfDicBenhvienDto
  implements IPagedResultDtoOfDicBenhvienDto {
  totalCount?: number | undefined;
  items?: DicBenhvienDto[] | undefined;

  constructor(data?: IPagedResultDtoOfDicBenhvienDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(DicBenhvienDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfDicBenhvienDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfDicBenhvienDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfDicBenhvienDto {
  totalCount?: number | undefined;
  items?: DicBenhvienDto[] | undefined;
}

export class UpdateDicChucvuDto implements IUpdateDicChucvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: boolean | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateDicChucvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateDicChucvuDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateDicChucvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateDicChucvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: boolean | undefined;
  id?: number | undefined;
}

export class DicChucvuDto implements IDicChucvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: boolean | undefined;
  dicCanbo?: DicCanbo[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicChucvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicCanbo"])) {
        this.dicCanbo = [] as any;
        for (let item of _data["dicCanbo"])
          this.dicCanbo!.push(DicCanbo.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicChucvuDto {
    data = typeof data === "object" ? data : {};
    let result = new DicChucvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    if (Array.isArray(this.dicCanbo)) {
      data["dicCanbo"] = [];
      for (let item of this.dicCanbo) data["dicCanbo"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicChucvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: boolean | undefined;
  dicCanbo?: DicCanbo[] | undefined;
  id?: number | undefined;
}

export class CreateDicChucvuDto implements ICreateDicChucvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: boolean | undefined;

  constructor(data?: ICreateDicChucvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): CreateDicChucvuDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateDicChucvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    return data;
  }
}

export interface ICreateDicChucvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: boolean | undefined;
}

export class PagedResultDtoOfDicChucvuDto
  implements IPagedResultDtoOfDicChucvuDto {
  totalCount?: number | undefined;
  items?: DicChucvuDto[] | undefined;

  constructor(data?: IPagedResultDtoOfDicChucvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(DicChucvuDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfDicChucvuDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfDicChucvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfDicChucvuDto {
  totalCount?: number | undefined;
  items?: DicChucvuDto[] | undefined;
}

export class UpdateChuyenkhoaDto implements IUpdateChuyenkhoaDto {
  ma?: number | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  maQuyetDinh?: string | undefined;
  status?: number | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateChuyenkhoaDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.tenChiTiet = _data["tenChiTiet"];
      this.maQuyetDinh = _data["maQuyetDinh"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateChuyenkhoaDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateChuyenkhoaDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["tenChiTiet"] = this.tenChiTiet;
    data["maQuyetDinh"] = this.maQuyetDinh;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateChuyenkhoaDto {
  ma?: number | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  maQuyetDinh?: string | undefined;
  status?: number | undefined;
  id?: number | undefined;
}

export class ChuyenkhoaDto implements IChuyenkhoaDto {
  ma?: number | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  maQuyetDinh?: string | undefined;
  status?: number | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;

  constructor(data?: IChuyenkhoaDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.tenChiTiet = _data["tenChiTiet"];
      this.maQuyetDinh = _data["maQuyetDinh"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicPhongban"])) {
        this.dicPhongban = [] as any;
        for (let item of _data["dicPhongban"])
          this.dicPhongban!.push(DicPhongban.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): ChuyenkhoaDto {
    data = typeof data === "object" ? data : {};
    let result = new ChuyenkhoaDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["tenChiTiet"] = this.tenChiTiet;
    data["maQuyetDinh"] = this.maQuyetDinh;
    data["status"] = this.status;
    if (Array.isArray(this.dicPhongban)) {
      data["dicPhongban"] = [];
      for (let item of this.dicPhongban)
        data["dicPhongban"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IChuyenkhoaDto {
  ma?: number | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  maQuyetDinh?: string | undefined;
  status?: number | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;
}

export class CreateChuyenkhoaDto implements ICreateChuyenkhoaDto {
  ma?: number | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  maQuyetDinh?: string | undefined;
  status?: number | undefined;

  constructor(data?: ICreateChuyenkhoaDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.tenChiTiet = _data["tenChiTiet"];
      this.maQuyetDinh = _data["maQuyetDinh"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): CreateChuyenkhoaDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateChuyenkhoaDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["tenChiTiet"] = this.tenChiTiet;
    data["maQuyetDinh"] = this.maQuyetDinh;
    data["status"] = this.status;
    return data;
  }
}

export interface ICreateChuyenkhoaDto {
  ma?: number | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  maQuyetDinh?: string | undefined;
  status?: number | undefined;
}

export class PagedResultDtoOfChuyenkhoaDto
  implements IPagedResultDtoOfChuyenkhoaDto {
  totalCount?: number | undefined;
  items?: ChuyenkhoaDto[] | undefined;

  constructor(data?: IPagedResultDtoOfChuyenkhoaDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(ChuyenkhoaDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfChuyenkhoaDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfChuyenkhoaDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfChuyenkhoaDto {
  totalCount?: number | undefined;
  items?: ChuyenkhoaDto[] | undefined;
}

export class ChangeUiThemeInput implements IChangeUiThemeInput {
  theme!: string;

  constructor(data?: IChangeUiThemeInput) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.theme = _data["theme"];
    }
  }

  static fromJS(data: any): ChangeUiThemeInput {
    data = typeof data === "object" ? data : {};
    let result = new ChangeUiThemeInput();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["theme"] = this.theme;
    return data;
  }
}

export interface IChangeUiThemeInput {
  theme: string;
}

export class UpdateDantocDto implements IUpdateDantocDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateDantocDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateDantocDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateDantocDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateDantocDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  id?: number | undefined;
}

export class DantocDto implements IDantocDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  id?: number | undefined;

  constructor(data?: IDantocDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DantocDto {
    data = typeof data === "object" ? data : {};
    let result = new DantocDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface IDantocDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  id?: number | undefined;
}

export class CreateDantocDto implements ICreateDantocDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;

  constructor(data?: ICreateDantocDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): CreateDantocDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateDantocDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    return data;
  }
}

export interface ICreateDantocDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
}

export class PagedResultDtoOfDantocDto implements IPagedResultDtoOfDantocDto {
  totalCount?: number | undefined;
  items?: DantocDto[] | undefined;

  constructor(data?: IPagedResultDtoOfDantocDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(DantocDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfDantocDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfDantocDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfDantocDto {
  totalCount?: number | undefined;
  items?: DantocDto[] | undefined;
}

export class UpdateDoituongDto implements IUpdateDoituongDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: string | undefined;
  vanChuyen?: number | undefined;
  maMuc?: number | undefined;
  mucCu?: number | undefined;
  status?: number | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateDoituongDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhom = _data["nhom"];
      this.vanChuyen = _data["vanChuyen"];
      this.maMuc = _data["maMuc"];
      this.mucCu = _data["mucCu"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateDoituongDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateDoituongDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhom"] = this.nhom;
    data["vanChuyen"] = this.vanChuyen;
    data["maMuc"] = this.maMuc;
    data["mucCu"] = this.mucCu;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateDoituongDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: string | undefined;
  vanChuyen?: number | undefined;
  maMuc?: number | undefined;
  mucCu?: number | undefined;
  status?: number | undefined;
  id?: number | undefined;
}

export class DoituongDto implements IDoituongDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: string | undefined;
  vanChuyen?: number | undefined;
  maMuc?: number | undefined;
  mucCu?: number | undefined;
  status?: number | undefined;
  id?: number | undefined;

  constructor(data?: IDoituongDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhom = _data["nhom"];
      this.vanChuyen = _data["vanChuyen"];
      this.maMuc = _data["maMuc"];
      this.mucCu = _data["mucCu"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DoituongDto {
    data = typeof data === "object" ? data : {};
    let result = new DoituongDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhom"] = this.nhom;
    data["vanChuyen"] = this.vanChuyen;
    data["maMuc"] = this.maMuc;
    data["mucCu"] = this.mucCu;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface IDoituongDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: string | undefined;
  vanChuyen?: number | undefined;
  maMuc?: number | undefined;
  mucCu?: number | undefined;
  status?: number | undefined;
  id?: number | undefined;
}

export class CreateDoituongDto implements ICreateDoituongDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: string | undefined;
  vanChuyen?: number | undefined;
  maMuc?: number | undefined;
  mucCu?: number | undefined;
  status?: number | undefined;

  constructor(data?: ICreateDoituongDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhom = _data["nhom"];
      this.vanChuyen = _data["vanChuyen"];
      this.maMuc = _data["maMuc"];
      this.mucCu = _data["mucCu"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): CreateDoituongDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateDoituongDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhom"] = this.nhom;
    data["vanChuyen"] = this.vanChuyen;
    data["maMuc"] = this.maMuc;
    data["mucCu"] = this.mucCu;
    data["status"] = this.status;
    return data;
  }
}

export interface ICreateDoituongDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: string | undefined;
  vanChuyen?: number | undefined;
  maMuc?: number | undefined;
  mucCu?: number | undefined;
  status?: number | undefined;
}

export class PagedResultDtoOfDoituongDto
  implements IPagedResultDtoOfDoituongDto {
  totalCount?: number | undefined;
  items?: DoituongDto[] | undefined;

  constructor(data?: IPagedResultDtoOfDoituongDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(DoituongDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfDoituongDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfDoituongDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfDoituongDto {
  totalCount?: number | undefined;
  items?: DoituongDto[] | undefined;
}

export class UpdateDoiTuongBenhNhanDto implements IUpdateDoiTuongBenhNhanDto {
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  hinhThucThanhToan?: number | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateDoiTuongBenhNhanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
      this.hinhThucThanhToan = _data["hinhThucThanhToan"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateDoiTuongBenhNhanDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateDoiTuongBenhNhanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    data["hinhThucThanhToan"] = this.hinhThucThanhToan;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateDoiTuongBenhNhanDto {
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  hinhThucThanhToan?: number | undefined;
  id?: number | undefined;
}

export class DoiTuongBenhNhanDto implements IDoiTuongBenhNhanDto {
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  hinhThucThanhToan?: number | undefined;
  id?: number | undefined;

  constructor(data?: IDoiTuongBenhNhanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
      this.hinhThucThanhToan = _data["hinhThucThanhToan"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DoiTuongBenhNhanDto {
    data = typeof data === "object" ? data : {};
    let result = new DoiTuongBenhNhanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    data["hinhThucThanhToan"] = this.hinhThucThanhToan;
    data["id"] = this.id;
    return data;
  }
}

export interface IDoiTuongBenhNhanDto {
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  hinhThucThanhToan?: number | undefined;
  id?: number | undefined;
}

export class CreateDoiTuongBenhNhanDto implements ICreateDoiTuongBenhNhanDto {
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  hinhThucThanhToan?: number | undefined;

  constructor(data?: ICreateDoiTuongBenhNhanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.status = _data["status"];
      this.hinhThucThanhToan = _data["hinhThucThanhToan"];
    }
  }

  static fromJS(data: any): CreateDoiTuongBenhNhanDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateDoiTuongBenhNhanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["status"] = this.status;
    data["hinhThucThanhToan"] = this.hinhThucThanhToan;
    return data;
  }
}

export interface ICreateDoiTuongBenhNhanDto {
  ten?: string | undefined;
  moTa?: string | undefined;
  status?: number | undefined;
  hinhThucThanhToan?: number | undefined;
}

export class PagedResultDtoOfDoiTuongBenhNhanDto
  implements IPagedResultDtoOfDoiTuongBenhNhanDto {
  totalCount?: number | undefined;
  items?: DoiTuongBenhNhanDto[] | undefined;

  constructor(data?: IPagedResultDtoOfDoiTuongBenhNhanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(DoiTuongBenhNhanDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfDoiTuongBenhNhanDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfDoiTuongBenhNhanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfDoiTuongBenhNhanDto {
  totalCount?: number | undefined;
  items?: DoiTuongBenhNhanDto[] | undefined;
}

export class GridviewConfigItemDto implements IGridviewConfigItemDto {
  gridname?: string | undefined;
  data?: any | undefined;

  constructor(data?: IGridviewConfigItemDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.gridname = _data["gridname"];
      this.data = _data["data"];
    }
  }

  static fromJS(data: any): GridviewConfigItemDto {
    data = typeof data === "object" ? data : {};
    let result = new GridviewConfigItemDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["gridname"] = this.gridname;
    data["data"] = this.data;
    return data;
  }
}

export interface IGridviewConfigItemDto {
  gridname?: string | undefined;
  data?: any | undefined;
}

export class UpdateHuyenDto implements IUpdateHuyenDto {
  ma?: string | undefined;
  ten?: string | undefined;
  cap?: string | undefined;
  tinhId?: number | undefined;
  status?: number | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateHuyenDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.cap = _data["cap"];
      this.tinhId = _data["tinhId"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateHuyenDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateHuyenDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["cap"] = this.cap;
    data["tinhId"] = this.tinhId;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateHuyenDto {
  ma?: string | undefined;
  ten?: string | undefined;
  cap?: string | undefined;
  tinhId?: number | undefined;
  status?: number | undefined;
  id?: number | undefined;
}

export class HuyenDto implements IHuyenDto {
  ma?: string | undefined;
  ten?: string | undefined;
  cap?: string | undefined;
  tinhId?: number | undefined;
  status?: number | undefined;
  tinh?: DicTinh | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  id?: number | undefined;

  constructor(data?: IHuyenDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.cap = _data["cap"];
      this.tinhId = _data["tinhId"];
      this.status = _data["status"];
      this.tinh = _data["tinh"]
        ? DicTinh.fromJS(_data["tinh"])
        : <any>undefined;
      if (Array.isArray(_data["dicBenhvien"])) {
        this.dicBenhvien = [] as any;
        for (let item of _data["dicBenhvien"])
          this.dicBenhvien!.push(DicBenhvien.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): HuyenDto {
    data = typeof data === "object" ? data : {};
    let result = new HuyenDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["cap"] = this.cap;
    data["tinhId"] = this.tinhId;
    data["status"] = this.status;
    data["tinh"] = this.tinh ? this.tinh.toJSON() : <any>undefined;
    if (Array.isArray(this.dicBenhvien)) {
      data["dicBenhvien"] = [];
      for (let item of this.dicBenhvien)
        data["dicBenhvien"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IHuyenDto {
  ma?: string | undefined;
  ten?: string | undefined;
  cap?: string | undefined;
  tinhId?: number | undefined;
  status?: number | undefined;
  tinh?: DicTinh | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  id?: number | undefined;
}

export class CreateHuyenDto implements ICreateHuyenDto {
  ma?: string | undefined;
  ten?: string | undefined;
  cap?: string | undefined;
  tinhId?: number | undefined;
  status?: number | undefined;

  constructor(data?: ICreateHuyenDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.cap = _data["cap"];
      this.tinhId = _data["tinhId"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): CreateHuyenDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateHuyenDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["cap"] = this.cap;
    data["tinhId"] = this.tinhId;
    data["status"] = this.status;
    return data;
  }
}

export interface ICreateHuyenDto {
  ma?: string | undefined;
  ten?: string | undefined;
  cap?: string | undefined;
  tinhId?: number | undefined;
  status?: number | undefined;
}

export class PagedResultDtoOfHuyenDto implements IPagedResultDtoOfHuyenDto {
  totalCount?: number | undefined;
  items?: HuyenDto[] | undefined;

  constructor(data?: IPagedResultDtoOfHuyenDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(HuyenDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfHuyenDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfHuyenDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfHuyenDto {
  totalCount?: number | undefined;
  items?: HuyenDto[] | undefined;
}

export class UpdateIcd10Dto implements IUpdateIcd10Dto {
  ma?: string | undefined;
  ten?: string | undefined;
  status?: number | undefined;
  maChuongBenh?: string | undefined;
  tenChuongBenh?: string | undefined;
  tenWhoe?: string | undefined;
  tenWho?: string | undefined;
  idcb?: number | undefined;
  idMbicd?: number | undefined;
  tenIcdYhct?: string | undefined;
  maIcd10?: string | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateIcd10Dto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.status = _data["status"];
      this.maChuongBenh = _data["maChuongBenh"];
      this.tenChuongBenh = _data["tenChuongBenh"];
      this.tenWhoe = _data["tenWhoe"];
      this.tenWho = _data["tenWho"];
      this.idcb = _data["idcb"];
      this.idMbicd = _data["idMbicd"];
      this.tenIcdYhct = _data["tenIcdYhct"];
      this.maIcd10 = _data["maIcd10"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateIcd10Dto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateIcd10Dto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["status"] = this.status;
    data["maChuongBenh"] = this.maChuongBenh;
    data["tenChuongBenh"] = this.tenChuongBenh;
    data["tenWhoe"] = this.tenWhoe;
    data["tenWho"] = this.tenWho;
    data["idcb"] = this.idcb;
    data["idMbicd"] = this.idMbicd;
    data["tenIcdYhct"] = this.tenIcdYhct;
    data["maIcd10"] = this.maIcd10;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateIcd10Dto {
  ma?: string | undefined;
  ten?: string | undefined;
  status?: number | undefined;
  maChuongBenh?: string | undefined;
  tenChuongBenh?: string | undefined;
  tenWhoe?: string | undefined;
  tenWho?: string | undefined;
  idcb?: number | undefined;
  idMbicd?: number | undefined;
  tenIcdYhct?: string | undefined;
  maIcd10?: string | undefined;
  id?: number | undefined;
}

export class Icd10Dto implements IIcd10Dto {
  ma?: string | undefined;
  ten?: string | undefined;
  status?: number | undefined;
  maChuongBenh?: string | undefined;
  tenChuongBenh?: string | undefined;
  tenWhoe?: string | undefined;
  tenWho?: string | undefined;
  idcb?: number | undefined;
  idMbicd?: number | undefined;
  tenIcdYhct?: string | undefined;
  maIcd10?: string | undefined;
  id?: number | undefined;

  constructor(data?: IIcd10Dto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.status = _data["status"];
      this.maChuongBenh = _data["maChuongBenh"];
      this.tenChuongBenh = _data["tenChuongBenh"];
      this.tenWhoe = _data["tenWhoe"];
      this.tenWho = _data["tenWho"];
      this.idcb = _data["idcb"];
      this.idMbicd = _data["idMbicd"];
      this.tenIcdYhct = _data["tenIcdYhct"];
      this.maIcd10 = _data["maIcd10"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): Icd10Dto {
    data = typeof data === "object" ? data : {};
    let result = new Icd10Dto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["status"] = this.status;
    data["maChuongBenh"] = this.maChuongBenh;
    data["tenChuongBenh"] = this.tenChuongBenh;
    data["tenWhoe"] = this.tenWhoe;
    data["tenWho"] = this.tenWho;
    data["idcb"] = this.idcb;
    data["idMbicd"] = this.idMbicd;
    data["tenIcdYhct"] = this.tenIcdYhct;
    data["maIcd10"] = this.maIcd10;
    data["id"] = this.id;
    return data;
  }
}

export interface IIcd10Dto {
  ma?: string | undefined;
  ten?: string | undefined;
  status?: number | undefined;
  maChuongBenh?: string | undefined;
  tenChuongBenh?: string | undefined;
  tenWhoe?: string | undefined;
  tenWho?: string | undefined;
  idcb?: number | undefined;
  idMbicd?: number | undefined;
  tenIcdYhct?: string | undefined;
  maIcd10?: string | undefined;
  id?: number | undefined;
}

export class CreateIcd10Dto implements ICreateIcd10Dto {
  ma?: string | undefined;
  ten?: string | undefined;
  status?: number | undefined;
  maChuongBenh?: string | undefined;
  tenChuongBenh?: string | undefined;
  tenWhoe?: string | undefined;
  tenWho?: string | undefined;
  idcb?: number | undefined;
  idMbicd?: number | undefined;
  tenIcdYhct?: string | undefined;
  maIcd10?: string | undefined;

  constructor(data?: ICreateIcd10Dto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.status = _data["status"];
      this.maChuongBenh = _data["maChuongBenh"];
      this.tenChuongBenh = _data["tenChuongBenh"];
      this.tenWhoe = _data["tenWhoe"];
      this.tenWho = _data["tenWho"];
      this.idcb = _data["idcb"];
      this.idMbicd = _data["idMbicd"];
      this.tenIcdYhct = _data["tenIcdYhct"];
      this.maIcd10 = _data["maIcd10"];
    }
  }

  static fromJS(data: any): CreateIcd10Dto {
    data = typeof data === "object" ? data : {};
    let result = new CreateIcd10Dto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["status"] = this.status;
    data["maChuongBenh"] = this.maChuongBenh;
    data["tenChuongBenh"] = this.tenChuongBenh;
    data["tenWhoe"] = this.tenWhoe;
    data["tenWho"] = this.tenWho;
    data["idcb"] = this.idcb;
    data["idMbicd"] = this.idMbicd;
    data["tenIcdYhct"] = this.tenIcdYhct;
    data["maIcd10"] = this.maIcd10;
    return data;
  }
}

export interface ICreateIcd10Dto {
  ma?: string | undefined;
  ten?: string | undefined;
  status?: number | undefined;
  maChuongBenh?: string | undefined;
  tenChuongBenh?: string | undefined;
  tenWhoe?: string | undefined;
  tenWho?: string | undefined;
  idcb?: number | undefined;
  idMbicd?: number | undefined;
  tenIcdYhct?: string | undefined;
  maIcd10?: string | undefined;
}

export class PagedResultDtoOfIcd10Dto implements IPagedResultDtoOfIcd10Dto {
  totalCount?: number | undefined;
  items?: Icd10Dto[] | undefined;

  constructor(data?: IPagedResultDtoOfIcd10Dto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(Icd10Dto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfIcd10Dto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfIcd10Dto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfIcd10Dto {
  totalCount?: number | undefined;
  items?: Icd10Dto[] | undefined;
}

export class UpdateNghenghiepDto implements IUpdateNghenghiepDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateNghenghiepDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateNghenghiepDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateNghenghiepDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateNghenghiepDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  id?: number | undefined;
}

export class NghenghiepDto implements INghenghiepDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  id?: number | undefined;

  constructor(data?: INghenghiepDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): NghenghiepDto {
    data = typeof data === "object" ? data : {};
    let result = new NghenghiepDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["id"] = this.id;
    return data;
  }
}

export interface INghenghiepDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  id?: number | undefined;
}

export class CreateNghenghiepDto implements ICreateNghenghiepDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  id?: number | undefined;

  constructor(data?: ICreateNghenghiepDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.moTa = _data["moTa"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): CreateNghenghiepDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateNghenghiepDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["moTa"] = this.moTa;
    data["id"] = this.id;
    return data;
  }
}

export interface ICreateNghenghiepDto {
  ma?: string | undefined;
  ten?: string | undefined;
  moTa?: string | undefined;
  id?: number | undefined;
}

export class PagedResultDtoOfNghenghiepDto
  implements IPagedResultDtoOfNghenghiepDto {
  totalCount?: number | undefined;
  items?: NghenghiepDto[] | undefined;

  constructor(data?: IPagedResultDtoOfNghenghiepDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(NghenghiepDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfNghenghiepDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfNghenghiepDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfNghenghiepDto {
  totalCount?: number | undefined;
  items?: NghenghiepDto[] | undefined;
}

export class UpdateNhacungcapDto implements IUpdateNhacungcapDto {
  ma?: string | undefined;
  ten?: string | undefined;
  diaChi?: string | undefined;
  dienThoai?: string | undefined;
  nguoiDaiDien?: string | undefined;
  status?: number | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateNhacungcapDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.diaChi = _data["diaChi"];
      this.dienThoai = _data["dienThoai"];
      this.nguoiDaiDien = _data["nguoiDaiDien"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateNhacungcapDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateNhacungcapDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["diaChi"] = this.diaChi;
    data["dienThoai"] = this.dienThoai;
    data["nguoiDaiDien"] = this.nguoiDaiDien;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateNhacungcapDto {
  ma?: string | undefined;
  ten?: string | undefined;
  diaChi?: string | undefined;
  dienThoai?: string | undefined;
  nguoiDaiDien?: string | undefined;
  status?: number | undefined;
  id?: number | undefined;
}

export class NhacungcapDto implements INhacungcapDto {
  ma?: string | undefined;
  ten?: string | undefined;
  diaChi?: string | undefined;
  dienThoai?: string | undefined;
  nguoiDaiDien?: string | undefined;
  status?: number | undefined;
  id?: number | undefined;

  constructor(data?: INhacungcapDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.diaChi = _data["diaChi"];
      this.dienThoai = _data["dienThoai"];
      this.nguoiDaiDien = _data["nguoiDaiDien"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): NhacungcapDto {
    data = typeof data === "object" ? data : {};
    let result = new NhacungcapDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["diaChi"] = this.diaChi;
    data["dienThoai"] = this.dienThoai;
    data["nguoiDaiDien"] = this.nguoiDaiDien;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface INhacungcapDto {
  ma?: string | undefined;
  ten?: string | undefined;
  diaChi?: string | undefined;
  dienThoai?: string | undefined;
  nguoiDaiDien?: string | undefined;
  status?: number | undefined;
  id?: number | undefined;
}

export class CreateNhacungcapDto implements ICreateNhacungcapDto {
  ma?: string | undefined;
  ten?: string | undefined;
  diaChi?: string | undefined;
  dienThoai?: string | undefined;
  nguoiDaiDien?: string | undefined;
  status?: number | undefined;

  constructor(data?: ICreateNhacungcapDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.diaChi = _data["diaChi"];
      this.dienThoai = _data["dienThoai"];
      this.nguoiDaiDien = _data["nguoiDaiDien"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): CreateNhacungcapDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateNhacungcapDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["diaChi"] = this.diaChi;
    data["dienThoai"] = this.dienThoai;
    data["nguoiDaiDien"] = this.nguoiDaiDien;
    data["status"] = this.status;
    return data;
  }
}

export interface ICreateNhacungcapDto {
  ma?: string | undefined;
  ten?: string | undefined;
  diaChi?: string | undefined;
  dienThoai?: string | undefined;
  nguoiDaiDien?: string | undefined;
  status?: number | undefined;
}

export class PagedResultDtoOfNhacungcapDto
  implements IPagedResultDtoOfNhacungcapDto {
  totalCount?: number | undefined;
  items?: NhacungcapDto[] | undefined;

  constructor(data?: IPagedResultDtoOfNhacungcapDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(NhacungcapDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfNhacungcapDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfNhacungcapDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfNhacungcapDto {
  totalCount?: number | undefined;
  items?: NhacungcapDto[] | undefined;
}

export class CreateNhapduocDto implements ICreateNhapduocDto {
  ma?: string | undefined;
  ngayNhap?: Date | undefined;
  soChungTu?: string | undefined;
  phongBanId?: number | undefined;
  tenNguoiCungCap?: string | undefined;
  nhaCungCapId?: string | undefined;
  ghiChu?: string | undefined;
  status?: number | undefined;
  phanLoai?: number | undefined;
  phongBanNhapXuatId?: number | undefined;
  kieuDon?: number | undefined;
  benhNhanId?: number | undefined;
  maXp?: string | undefined;
  xuatTd?: number | undefined;
  canBoId?: string | undefined;
  soPhieuLinh?: number | undefined;
  diaChi?: string | undefined;
  doiTuongBenhNhanId?: number | undefined;
  mien?: number | undefined;
  traDuocKieuDon?: number | undefined;
  ngayThanhToan?: Date | undefined;
  ngayNhapNvl?: Date | undefined;
  idsxthuoc?: number | undefined;
  tangGiaSx?: number | undefined;
  soPhieu?: string | undefined;
  loaiTang?: number | undefined;
  appNhapduocchitiet?: CreateNhapduocchitietDto[] | undefined;

  constructor(data?: ICreateNhapduocDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ngayNhap = _data["ngayNhap"]
        ? new Date(_data["ngayNhap"].toString())
        : <any>undefined;
      this.soChungTu = _data["soChungTu"];
      this.phongBanId = _data["phongBanId"];
      this.tenNguoiCungCap = _data["tenNguoiCungCap"];
      this.nhaCungCapId = _data["nhaCungCapId"];
      this.ghiChu = _data["ghiChu"];
      this.status = _data["status"];
      this.phanLoai = _data["phanLoai"];
      this.phongBanNhapXuatId = _data["phongBanNhapXuatId"];
      this.kieuDon = _data["kieuDon"];
      this.benhNhanId = _data["benhNhanId"];
      this.maXp = _data["maXp"];
      this.xuatTd = _data["xuatTd"];
      this.canBoId = _data["canBoId"];
      this.soPhieuLinh = _data["soPhieuLinh"];
      this.diaChi = _data["diaChi"];
      this.doiTuongBenhNhanId = _data["doiTuongBenhNhanId"];
      this.mien = _data["mien"];
      this.traDuocKieuDon = _data["traDuocKieuDon"];
      this.ngayThanhToan = _data["ngayThanhToan"]
        ? new Date(_data["ngayThanhToan"].toString())
        : <any>undefined;
      this.ngayNhapNvl = _data["ngayNhapNvl"]
        ? new Date(_data["ngayNhapNvl"].toString())
        : <any>undefined;
      this.idsxthuoc = _data["idsxthuoc"];
      this.tangGiaSx = _data["tangGiaSx"];
      this.soPhieu = _data["soPhieu"];
      this.loaiTang = _data["loaiTang"];
      if (Array.isArray(_data["appNhapduocchitiet"])) {
        this.appNhapduocchitiet = [] as any;
        for (let item of _data["appNhapduocchitiet"])
          this.appNhapduocchitiet!.push(CreateNhapduocchitietDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): CreateNhapduocDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateNhapduocDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ngayNhap"] = this.ngayNhap
      ? this.ngayNhap.toISOString()
      : <any>undefined;
    data["soChungTu"] = this.soChungTu;
    data["phongBanId"] = this.phongBanId;
    data["tenNguoiCungCap"] = this.tenNguoiCungCap;
    data["nhaCungCapId"] = this.nhaCungCapId;
    data["ghiChu"] = this.ghiChu;
    data["status"] = this.status;
    data["phanLoai"] = this.phanLoai;
    data["phongBanNhapXuatId"] = this.phongBanNhapXuatId;
    data["kieuDon"] = this.kieuDon;
    data["benhNhanId"] = this.benhNhanId;
    data["maXp"] = this.maXp;
    data["xuatTd"] = this.xuatTd;
    data["canBoId"] = this.canBoId;
    data["soPhieuLinh"] = this.soPhieuLinh;
    data["diaChi"] = this.diaChi;
    data["doiTuongBenhNhanId"] = this.doiTuongBenhNhanId;
    data["mien"] = this.mien;
    data["traDuocKieuDon"] = this.traDuocKieuDon;
    data["ngayThanhToan"] = this.ngayThanhToan
      ? this.ngayThanhToan.toISOString()
      : <any>undefined;
    data["ngayNhapNvl"] = this.ngayNhapNvl
      ? this.ngayNhapNvl.toISOString()
      : <any>undefined;
    data["idsxthuoc"] = this.idsxthuoc;
    data["tangGiaSx"] = this.tangGiaSx;
    data["soPhieu"] = this.soPhieu;
    data["loaiTang"] = this.loaiTang;
    if (Array.isArray(this.appNhapduocchitiet)) {
      data["appNhapduocchitiet"] = [];
      for (let item of this.appNhapduocchitiet)
        data["appNhapduocchitiet"].push(item.toJSON());
    }
    return data;
  }
}

export interface ICreateNhapduocDto {
  ma?: string | undefined;
  ngayNhap?: Date | undefined;
  soChungTu?: string | undefined;
  phongBanId?: number | undefined;
  tenNguoiCungCap?: string | undefined;
  nhaCungCapId?: string | undefined;
  ghiChu?: string | undefined;
  status?: number | undefined;
  phanLoai?: number | undefined;
  phongBanNhapXuatId?: number | undefined;
  kieuDon?: number | undefined;
  benhNhanId?: number | undefined;
  maXp?: string | undefined;
  xuatTd?: number | undefined;
  canBoId?: string | undefined;
  soPhieuLinh?: number | undefined;
  diaChi?: string | undefined;
  doiTuongBenhNhanId?: number | undefined;
  mien?: number | undefined;
  traDuocKieuDon?: number | undefined;
  ngayThanhToan?: Date | undefined;
  ngayNhapNvl?: Date | undefined;
  idsxthuoc?: number | undefined;
  tangGiaSx?: number | undefined;
  soPhieu?: string | undefined;
  loaiTang?: number | undefined;
  appNhapduocchitiet?: CreateNhapduocchitietDto[] | undefined;
}

export class CreateNhapduocchitietDto implements ICreateNhapduocchitietDto {
  nhapDuocId?: number | undefined;
  dichVuId?: number | undefined;
  soLo?: string | undefined;
  hanDung?: Date | undefined;
  donVi?: string | undefined;
  donGiaChiTiet?: number | undefined;
  donGia?: number | undefined;
  vat?: number | undefined;
  soLuongNhap?: number | undefined;
  thanhTienNhap?: number | undefined;
  soLuongXuat?: number | undefined;
  thanhTienXuat?: number | undefined;
  soLuongKiemKe?: number | undefined;
  thanhTienKiemKe?: number | undefined;
  soLuongSuDung?: number | undefined;
  thanhTienSuDung?: number | undefined;
  nhaCungCapId?: string | undefined;
  soDangKy?: string | undefined;
  donGiaDongY?: number | undefined;
  soLuongDongY?: number | undefined;
  thanhTienDongY?: number | undefined;
  benhNhanId?: number | undefined;
  doiTuongBenhNhanId?: number | undefined;
  donGiaXuat?: number | undefined;
  ghiChu?: string | undefined;
  trongBaoHiem?: number | undefined;

  constructor(data?: ICreateNhapduocchitietDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.nhapDuocId = _data["nhapDuocId"];
      this.dichVuId = _data["dichVuId"];
      this.soLo = _data["soLo"];
      this.hanDung = _data["hanDung"]
        ? new Date(_data["hanDung"].toString())
        : <any>undefined;
      this.donVi = _data["donVi"];
      this.donGiaChiTiet = _data["donGiaChiTiet"];
      this.donGia = _data["donGia"];
      this.vat = _data["vat"];
      this.soLuongNhap = _data["soLuongNhap"];
      this.thanhTienNhap = _data["thanhTienNhap"];
      this.soLuongXuat = _data["soLuongXuat"];
      this.thanhTienXuat = _data["thanhTienXuat"];
      this.soLuongKiemKe = _data["soLuongKiemKe"];
      this.thanhTienKiemKe = _data["thanhTienKiemKe"];
      this.soLuongSuDung = _data["soLuongSuDung"];
      this.thanhTienSuDung = _data["thanhTienSuDung"];
      this.nhaCungCapId = _data["nhaCungCapId"];
      this.soDangKy = _data["soDangKy"];
      this.donGiaDongY = _data["donGiaDongY"];
      this.soLuongDongY = _data["soLuongDongY"];
      this.thanhTienDongY = _data["thanhTienDongY"];
      this.benhNhanId = _data["benhNhanId"];
      this.doiTuongBenhNhanId = _data["doiTuongBenhNhanId"];
      this.donGiaXuat = _data["donGiaXuat"];
      this.ghiChu = _data["ghiChu"];
      this.trongBaoHiem = _data["trongBaoHiem"];
    }
  }

  static fromJS(data: any): CreateNhapduocchitietDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateNhapduocchitietDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["nhapDuocId"] = this.nhapDuocId;
    data["dichVuId"] = this.dichVuId;
    data["soLo"] = this.soLo;
    data["hanDung"] = this.hanDung
      ? this.hanDung.toISOString()
      : <any>undefined;
    data["donVi"] = this.donVi;
    data["donGiaChiTiet"] = this.donGiaChiTiet;
    data["donGia"] = this.donGia;
    data["vat"] = this.vat;
    data["soLuongNhap"] = this.soLuongNhap;
    data["thanhTienNhap"] = this.thanhTienNhap;
    data["soLuongXuat"] = this.soLuongXuat;
    data["thanhTienXuat"] = this.thanhTienXuat;
    data["soLuongKiemKe"] = this.soLuongKiemKe;
    data["thanhTienKiemKe"] = this.thanhTienKiemKe;
    data["soLuongSuDung"] = this.soLuongSuDung;
    data["thanhTienSuDung"] = this.thanhTienSuDung;
    data["nhaCungCapId"] = this.nhaCungCapId;
    data["soDangKy"] = this.soDangKy;
    data["donGiaDongY"] = this.donGiaDongY;
    data["soLuongDongY"] = this.soLuongDongY;
    data["thanhTienDongY"] = this.thanhTienDongY;
    data["benhNhanId"] = this.benhNhanId;
    data["doiTuongBenhNhanId"] = this.doiTuongBenhNhanId;
    data["donGiaXuat"] = this.donGiaXuat;
    data["ghiChu"] = this.ghiChu;
    data["trongBaoHiem"] = this.trongBaoHiem;
    return data;
  }
}

export interface ICreateNhapduocchitietDto {
  nhapDuocId?: number | undefined;
  dichVuId?: number | undefined;
  soLo?: string | undefined;
  hanDung?: Date | undefined;
  donVi?: string | undefined;
  donGiaChiTiet?: number | undefined;
  donGia?: number | undefined;
  vat?: number | undefined;
  soLuongNhap?: number | undefined;
  thanhTienNhap?: number | undefined;
  soLuongXuat?: number | undefined;
  thanhTienXuat?: number | undefined;
  soLuongKiemKe?: number | undefined;
  thanhTienKiemKe?: number | undefined;
  soLuongSuDung?: number | undefined;
  thanhTienSuDung?: number | undefined;
  nhaCungCapId?: string | undefined;
  soDangKy?: string | undefined;
  donGiaDongY?: number | undefined;
  soLuongDongY?: number | undefined;
  thanhTienDongY?: number | undefined;
  benhNhanId?: number | undefined;
  doiTuongBenhNhanId?: number | undefined;
  donGiaXuat?: number | undefined;
  ghiChu?: string | undefined;
  trongBaoHiem?: number | undefined;
}

export class NhapduocDto implements INhapduocDto {
  ma?: string | undefined;
  ngayNhap?: Date | undefined;
  soChungTu?: string | undefined;
  phongBanId?: number | undefined;
  tenNguoiCungCap?: string | undefined;
  nhaCungCapId?: string | undefined;
  ghiChu?: string | undefined;
  status?: number | undefined;
  phanLoai?: number | undefined;
  phongBanNhapXuatId?: number | undefined;
  kieuDon?: number | undefined;
  benhNhanId?: number | undefined;
  maXp?: string | undefined;
  xuatTd?: number | undefined;
  canBoId?: string | undefined;
  soPhieuLinh?: number | undefined;
  diaChi?: string | undefined;
  doiTuongBenhNhanId?: number | undefined;
  mien?: number | undefined;
  traDuocKieuDon?: number | undefined;
  ngayThanhToan?: Date | undefined;
  ngayNhapNvl?: Date | undefined;
  idsxthuoc?: number | undefined;
  tangGiaSx?: number | undefined;
  soPhieu?: string | undefined;
  loaiTang?: number | undefined;
  appNhapduocchitiet?: NhapduocchitietDto[] | undefined;
  id?: number | undefined;

  constructor(data?: INhapduocDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ngayNhap = _data["ngayNhap"]
        ? new Date(_data["ngayNhap"].toString())
        : <any>undefined;
      this.soChungTu = _data["soChungTu"];
      this.phongBanId = _data["phongBanId"];
      this.tenNguoiCungCap = _data["tenNguoiCungCap"];
      this.nhaCungCapId = _data["nhaCungCapId"];
      this.ghiChu = _data["ghiChu"];
      this.status = _data["status"];
      this.phanLoai = _data["phanLoai"];
      this.phongBanNhapXuatId = _data["phongBanNhapXuatId"];
      this.kieuDon = _data["kieuDon"];
      this.benhNhanId = _data["benhNhanId"];
      this.maXp = _data["maXp"];
      this.xuatTd = _data["xuatTd"];
      this.canBoId = _data["canBoId"];
      this.soPhieuLinh = _data["soPhieuLinh"];
      this.diaChi = _data["diaChi"];
      this.doiTuongBenhNhanId = _data["doiTuongBenhNhanId"];
      this.mien = _data["mien"];
      this.traDuocKieuDon = _data["traDuocKieuDon"];
      this.ngayThanhToan = _data["ngayThanhToan"]
        ? new Date(_data["ngayThanhToan"].toString())
        : <any>undefined;
      this.ngayNhapNvl = _data["ngayNhapNvl"]
        ? new Date(_data["ngayNhapNvl"].toString())
        : <any>undefined;
      this.idsxthuoc = _data["idsxthuoc"];
      this.tangGiaSx = _data["tangGiaSx"];
      this.soPhieu = _data["soPhieu"];
      this.loaiTang = _data["loaiTang"];
      if (Array.isArray(_data["appNhapduocchitiet"])) {
        this.appNhapduocchitiet = [] as any;
        for (let item of _data["appNhapduocchitiet"])
          this.appNhapduocchitiet!.push(NhapduocchitietDto.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): NhapduocDto {
    data = typeof data === "object" ? data : {};
    let result = new NhapduocDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ngayNhap"] = this.ngayNhap
      ? this.ngayNhap.toISOString()
      : <any>undefined;
    data["soChungTu"] = this.soChungTu;
    data["phongBanId"] = this.phongBanId;
    data["tenNguoiCungCap"] = this.tenNguoiCungCap;
    data["nhaCungCapId"] = this.nhaCungCapId;
    data["ghiChu"] = this.ghiChu;
    data["status"] = this.status;
    data["phanLoai"] = this.phanLoai;
    data["phongBanNhapXuatId"] = this.phongBanNhapXuatId;
    data["kieuDon"] = this.kieuDon;
    data["benhNhanId"] = this.benhNhanId;
    data["maXp"] = this.maXp;
    data["xuatTd"] = this.xuatTd;
    data["canBoId"] = this.canBoId;
    data["soPhieuLinh"] = this.soPhieuLinh;
    data["diaChi"] = this.diaChi;
    data["doiTuongBenhNhanId"] = this.doiTuongBenhNhanId;
    data["mien"] = this.mien;
    data["traDuocKieuDon"] = this.traDuocKieuDon;
    data["ngayThanhToan"] = this.ngayThanhToan
      ? this.ngayThanhToan.toISOString()
      : <any>undefined;
    data["ngayNhapNvl"] = this.ngayNhapNvl
      ? this.ngayNhapNvl.toISOString()
      : <any>undefined;
    data["idsxthuoc"] = this.idsxthuoc;
    data["tangGiaSx"] = this.tangGiaSx;
    data["soPhieu"] = this.soPhieu;
    data["loaiTang"] = this.loaiTang;
    if (Array.isArray(this.appNhapduocchitiet)) {
      data["appNhapduocchitiet"] = [];
      for (let item of this.appNhapduocchitiet)
        data["appNhapduocchitiet"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface INhapduocDto {
  ma?: string | undefined;
  ngayNhap?: Date | undefined;
  soChungTu?: string | undefined;
  phongBanId?: number | undefined;
  tenNguoiCungCap?: string | undefined;
  nhaCungCapId?: string | undefined;
  ghiChu?: string | undefined;
  status?: number | undefined;
  phanLoai?: number | undefined;
  phongBanNhapXuatId?: number | undefined;
  kieuDon?: number | undefined;
  benhNhanId?: number | undefined;
  maXp?: string | undefined;
  xuatTd?: number | undefined;
  canBoId?: string | undefined;
  soPhieuLinh?: number | undefined;
  diaChi?: string | undefined;
  doiTuongBenhNhanId?: number | undefined;
  mien?: number | undefined;
  traDuocKieuDon?: number | undefined;
  ngayThanhToan?: Date | undefined;
  ngayNhapNvl?: Date | undefined;
  idsxthuoc?: number | undefined;
  tangGiaSx?: number | undefined;
  soPhieu?: string | undefined;
  loaiTang?: number | undefined;
  appNhapduocchitiet?: NhapduocchitietDto[] | undefined;
  id?: number | undefined;
}

export class NhapduocchitietDto implements INhapduocchitietDto {
  nhapDuocId?: number | undefined;
  dichVuId?: number | undefined;
  soLo?: string | undefined;
  hanDung?: Date | undefined;
  donVi?: string | undefined;
  donGiaChiTiet?: number | undefined;
  donGia?: number | undefined;
  vat?: number | undefined;
  soLuongNhap?: number | undefined;
  thanhTienNhap?: number | undefined;
  soLuongXuat?: number | undefined;
  thanhTienXuat?: number | undefined;
  soLuongKiemKe?: number | undefined;
  thanhTienKiemKe?: number | undefined;
  soLuongSuDung?: number | undefined;
  thanhTienSuDung?: number | undefined;
  nhaCungCapId?: string | undefined;
  soDangKy?: string | undefined;
  donGiaDongY?: number | undefined;
  soLuongDongY?: number | undefined;
  thanhTienDongY?: number | undefined;
  benhNhanId?: number | undefined;
  doiTuongBenhNhanId?: number | undefined;
  donGiaXuat?: number | undefined;
  ghiChu?: string | undefined;
  trongBaoHiem?: number | undefined;
  id?: number | undefined;

  constructor(data?: INhapduocchitietDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.nhapDuocId = _data["nhapDuocId"];
      this.dichVuId = _data["dichVuId"];
      this.soLo = _data["soLo"];
      this.hanDung = _data["hanDung"]
        ? new Date(_data["hanDung"].toString())
        : <any>undefined;
      this.donVi = _data["donVi"];
      this.donGiaChiTiet = _data["donGiaChiTiet"];
      this.donGia = _data["donGia"];
      this.vat = _data["vat"];
      this.soLuongNhap = _data["soLuongNhap"];
      this.thanhTienNhap = _data["thanhTienNhap"];
      this.soLuongXuat = _data["soLuongXuat"];
      this.thanhTienXuat = _data["thanhTienXuat"];
      this.soLuongKiemKe = _data["soLuongKiemKe"];
      this.thanhTienKiemKe = _data["thanhTienKiemKe"];
      this.soLuongSuDung = _data["soLuongSuDung"];
      this.thanhTienSuDung = _data["thanhTienSuDung"];
      this.nhaCungCapId = _data["nhaCungCapId"];
      this.soDangKy = _data["soDangKy"];
      this.donGiaDongY = _data["donGiaDongY"];
      this.soLuongDongY = _data["soLuongDongY"];
      this.thanhTienDongY = _data["thanhTienDongY"];
      this.benhNhanId = _data["benhNhanId"];
      this.doiTuongBenhNhanId = _data["doiTuongBenhNhanId"];
      this.donGiaXuat = _data["donGiaXuat"];
      this.ghiChu = _data["ghiChu"];
      this.trongBaoHiem = _data["trongBaoHiem"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): NhapduocchitietDto {
    data = typeof data === "object" ? data : {};
    let result = new NhapduocchitietDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["nhapDuocId"] = this.nhapDuocId;
    data["dichVuId"] = this.dichVuId;
    data["soLo"] = this.soLo;
    data["hanDung"] = this.hanDung
      ? this.hanDung.toISOString()
      : <any>undefined;
    data["donVi"] = this.donVi;
    data["donGiaChiTiet"] = this.donGiaChiTiet;
    data["donGia"] = this.donGia;
    data["vat"] = this.vat;
    data["soLuongNhap"] = this.soLuongNhap;
    data["thanhTienNhap"] = this.thanhTienNhap;
    data["soLuongXuat"] = this.soLuongXuat;
    data["thanhTienXuat"] = this.thanhTienXuat;
    data["soLuongKiemKe"] = this.soLuongKiemKe;
    data["thanhTienKiemKe"] = this.thanhTienKiemKe;
    data["soLuongSuDung"] = this.soLuongSuDung;
    data["thanhTienSuDung"] = this.thanhTienSuDung;
    data["nhaCungCapId"] = this.nhaCungCapId;
    data["soDangKy"] = this.soDangKy;
    data["donGiaDongY"] = this.donGiaDongY;
    data["soLuongDongY"] = this.soLuongDongY;
    data["thanhTienDongY"] = this.thanhTienDongY;
    data["benhNhanId"] = this.benhNhanId;
    data["doiTuongBenhNhanId"] = this.doiTuongBenhNhanId;
    data["donGiaXuat"] = this.donGiaXuat;
    data["ghiChu"] = this.ghiChu;
    data["trongBaoHiem"] = this.trongBaoHiem;
    data["id"] = this.id;
    return data;
  }
}

export interface INhapduocchitietDto {
  nhapDuocId?: number | undefined;
  dichVuId?: number | undefined;
  soLo?: string | undefined;
  hanDung?: Date | undefined;
  donVi?: string | undefined;
  donGiaChiTiet?: number | undefined;
  donGia?: number | undefined;
  vat?: number | undefined;
  soLuongNhap?: number | undefined;
  thanhTienNhap?: number | undefined;
  soLuongXuat?: number | undefined;
  thanhTienXuat?: number | undefined;
  soLuongKiemKe?: number | undefined;
  thanhTienKiemKe?: number | undefined;
  soLuongSuDung?: number | undefined;
  thanhTienSuDung?: number | undefined;
  nhaCungCapId?: string | undefined;
  soDangKy?: string | undefined;
  donGiaDongY?: number | undefined;
  soLuongDongY?: number | undefined;
  thanhTienDongY?: number | undefined;
  benhNhanId?: number | undefined;
  doiTuongBenhNhanId?: number | undefined;
  donGiaXuat?: number | undefined;
  ghiChu?: string | undefined;
  trongBaoHiem?: number | undefined;
  id?: number | undefined;
}

export class UpdateNhapduocDto implements IUpdateNhapduocDto {
  ma?: string | undefined;
  ngayNhap?: Date | undefined;
  soChungTu?: string | undefined;
  phongBanId?: number | undefined;
  tenNguoiCungCap?: string | undefined;
  nhaCungCapId?: string | undefined;
  ghiChu?: string | undefined;
  status?: number | undefined;
  phanLoai?: number | undefined;
  phongBanNhapXuatId?: number | undefined;
  kieuDon?: number | undefined;
  benhNhanId?: number | undefined;
  maXp?: string | undefined;
  xuatTd?: number | undefined;
  canBoId?: string | undefined;
  soPhieuLinh?: number | undefined;
  diaChi?: string | undefined;
  doiTuongBenhNhanId?: number | undefined;
  mien?: number | undefined;
  traDuocKieuDon?: number | undefined;
  ngayThanhToan?: Date | undefined;
  ngayNhapNvl?: Date | undefined;
  idsxthuoc?: number | undefined;
  tangGiaSx?: number | undefined;
  soPhieu?: string | undefined;
  loaiTang?: number | undefined;
  appNhapduocchitiet?: UpdateNhapduocchitietDto[] | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateNhapduocDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ngayNhap = _data["ngayNhap"]
        ? new Date(_data["ngayNhap"].toString())
        : <any>undefined;
      this.soChungTu = _data["soChungTu"];
      this.phongBanId = _data["phongBanId"];
      this.tenNguoiCungCap = _data["tenNguoiCungCap"];
      this.nhaCungCapId = _data["nhaCungCapId"];
      this.ghiChu = _data["ghiChu"];
      this.status = _data["status"];
      this.phanLoai = _data["phanLoai"];
      this.phongBanNhapXuatId = _data["phongBanNhapXuatId"];
      this.kieuDon = _data["kieuDon"];
      this.benhNhanId = _data["benhNhanId"];
      this.maXp = _data["maXp"];
      this.xuatTd = _data["xuatTd"];
      this.canBoId = _data["canBoId"];
      this.soPhieuLinh = _data["soPhieuLinh"];
      this.diaChi = _data["diaChi"];
      this.doiTuongBenhNhanId = _data["doiTuongBenhNhanId"];
      this.mien = _data["mien"];
      this.traDuocKieuDon = _data["traDuocKieuDon"];
      this.ngayThanhToan = _data["ngayThanhToan"]
        ? new Date(_data["ngayThanhToan"].toString())
        : <any>undefined;
      this.ngayNhapNvl = _data["ngayNhapNvl"]
        ? new Date(_data["ngayNhapNvl"].toString())
        : <any>undefined;
      this.idsxthuoc = _data["idsxthuoc"];
      this.tangGiaSx = _data["tangGiaSx"];
      this.soPhieu = _data["soPhieu"];
      this.loaiTang = _data["loaiTang"];
      if (Array.isArray(_data["appNhapduocchitiet"])) {
        this.appNhapduocchitiet = [] as any;
        for (let item of _data["appNhapduocchitiet"])
          this.appNhapduocchitiet!.push(UpdateNhapduocchitietDto.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateNhapduocDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateNhapduocDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ngayNhap"] = this.ngayNhap
      ? this.ngayNhap.toISOString()
      : <any>undefined;
    data["soChungTu"] = this.soChungTu;
    data["phongBanId"] = this.phongBanId;
    data["tenNguoiCungCap"] = this.tenNguoiCungCap;
    data["nhaCungCapId"] = this.nhaCungCapId;
    data["ghiChu"] = this.ghiChu;
    data["status"] = this.status;
    data["phanLoai"] = this.phanLoai;
    data["phongBanNhapXuatId"] = this.phongBanNhapXuatId;
    data["kieuDon"] = this.kieuDon;
    data["benhNhanId"] = this.benhNhanId;
    data["maXp"] = this.maXp;
    data["xuatTd"] = this.xuatTd;
    data["canBoId"] = this.canBoId;
    data["soPhieuLinh"] = this.soPhieuLinh;
    data["diaChi"] = this.diaChi;
    data["doiTuongBenhNhanId"] = this.doiTuongBenhNhanId;
    data["mien"] = this.mien;
    data["traDuocKieuDon"] = this.traDuocKieuDon;
    data["ngayThanhToan"] = this.ngayThanhToan
      ? this.ngayThanhToan.toISOString()
      : <any>undefined;
    data["ngayNhapNvl"] = this.ngayNhapNvl
      ? this.ngayNhapNvl.toISOString()
      : <any>undefined;
    data["idsxthuoc"] = this.idsxthuoc;
    data["tangGiaSx"] = this.tangGiaSx;
    data["soPhieu"] = this.soPhieu;
    data["loaiTang"] = this.loaiTang;
    if (Array.isArray(this.appNhapduocchitiet)) {
      data["appNhapduocchitiet"] = [];
      for (let item of this.appNhapduocchitiet)
        data["appNhapduocchitiet"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateNhapduocDto {
  ma?: string | undefined;
  ngayNhap?: Date | undefined;
  soChungTu?: string | undefined;
  phongBanId?: number | undefined;
  tenNguoiCungCap?: string | undefined;
  nhaCungCapId?: string | undefined;
  ghiChu?: string | undefined;
  status?: number | undefined;
  phanLoai?: number | undefined;
  phongBanNhapXuatId?: number | undefined;
  kieuDon?: number | undefined;
  benhNhanId?: number | undefined;
  maXp?: string | undefined;
  xuatTd?: number | undefined;
  canBoId?: string | undefined;
  soPhieuLinh?: number | undefined;
  diaChi?: string | undefined;
  doiTuongBenhNhanId?: number | undefined;
  mien?: number | undefined;
  traDuocKieuDon?: number | undefined;
  ngayThanhToan?: Date | undefined;
  ngayNhapNvl?: Date | undefined;
  idsxthuoc?: number | undefined;
  tangGiaSx?: number | undefined;
  soPhieu?: string | undefined;
  loaiTang?: number | undefined;
  appNhapduocchitiet?: UpdateNhapduocchitietDto[] | undefined;
  id?: number | undefined;
}

export class UpdateNhapduocchitietDto implements IUpdateNhapduocchitietDto {
  nhapDuocId?: number | undefined;
  dichVuId?: number | undefined;
  soLo?: string | undefined;
  hanDung?: Date | undefined;
  donVi?: string | undefined;
  donGiaChiTiet?: number | undefined;
  donGia?: number | undefined;
  vat?: number | undefined;
  soLuongNhap?: number | undefined;
  thanhTienNhap?: number | undefined;
  soLuongXuat?: number | undefined;
  thanhTienXuat?: number | undefined;
  soLuongKiemKe?: number | undefined;
  thanhTienKiemKe?: number | undefined;
  soLuongSuDung?: number | undefined;
  thanhTienSuDung?: number | undefined;
  nhaCungCapId?: string | undefined;
  soDangKy?: string | undefined;
  donGiaDongY?: number | undefined;
  soLuongDongY?: number | undefined;
  thanhTienDongY?: number | undefined;
  benhNhanId?: number | undefined;
  doiTuongBenhNhanId?: number | undefined;
  donGiaXuat?: number | undefined;
  ghiChu?: string | undefined;
  trongBaoHiem?: number | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateNhapduocchitietDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.nhapDuocId = _data["nhapDuocId"];
      this.dichVuId = _data["dichVuId"];
      this.soLo = _data["soLo"];
      this.hanDung = _data["hanDung"]
        ? new Date(_data["hanDung"].toString())
        : <any>undefined;
      this.donVi = _data["donVi"];
      this.donGiaChiTiet = _data["donGiaChiTiet"];
      this.donGia = _data["donGia"];
      this.vat = _data["vat"];
      this.soLuongNhap = _data["soLuongNhap"];
      this.thanhTienNhap = _data["thanhTienNhap"];
      this.soLuongXuat = _data["soLuongXuat"];
      this.thanhTienXuat = _data["thanhTienXuat"];
      this.soLuongKiemKe = _data["soLuongKiemKe"];
      this.thanhTienKiemKe = _data["thanhTienKiemKe"];
      this.soLuongSuDung = _data["soLuongSuDung"];
      this.thanhTienSuDung = _data["thanhTienSuDung"];
      this.nhaCungCapId = _data["nhaCungCapId"];
      this.soDangKy = _data["soDangKy"];
      this.donGiaDongY = _data["donGiaDongY"];
      this.soLuongDongY = _data["soLuongDongY"];
      this.thanhTienDongY = _data["thanhTienDongY"];
      this.benhNhanId = _data["benhNhanId"];
      this.doiTuongBenhNhanId = _data["doiTuongBenhNhanId"];
      this.donGiaXuat = _data["donGiaXuat"];
      this.ghiChu = _data["ghiChu"];
      this.trongBaoHiem = _data["trongBaoHiem"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateNhapduocchitietDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateNhapduocchitietDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["nhapDuocId"] = this.nhapDuocId;
    data["dichVuId"] = this.dichVuId;
    data["soLo"] = this.soLo;
    data["hanDung"] = this.hanDung
      ? this.hanDung.toISOString()
      : <any>undefined;
    data["donVi"] = this.donVi;
    data["donGiaChiTiet"] = this.donGiaChiTiet;
    data["donGia"] = this.donGia;
    data["vat"] = this.vat;
    data["soLuongNhap"] = this.soLuongNhap;
    data["thanhTienNhap"] = this.thanhTienNhap;
    data["soLuongXuat"] = this.soLuongXuat;
    data["thanhTienXuat"] = this.thanhTienXuat;
    data["soLuongKiemKe"] = this.soLuongKiemKe;
    data["thanhTienKiemKe"] = this.thanhTienKiemKe;
    data["soLuongSuDung"] = this.soLuongSuDung;
    data["thanhTienSuDung"] = this.thanhTienSuDung;
    data["nhaCungCapId"] = this.nhaCungCapId;
    data["soDangKy"] = this.soDangKy;
    data["donGiaDongY"] = this.donGiaDongY;
    data["soLuongDongY"] = this.soLuongDongY;
    data["thanhTienDongY"] = this.thanhTienDongY;
    data["benhNhanId"] = this.benhNhanId;
    data["doiTuongBenhNhanId"] = this.doiTuongBenhNhanId;
    data["donGiaXuat"] = this.donGiaXuat;
    data["ghiChu"] = this.ghiChu;
    data["trongBaoHiem"] = this.trongBaoHiem;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateNhapduocchitietDto {
  nhapDuocId?: number | undefined;
  dichVuId?: number | undefined;
  soLo?: string | undefined;
  hanDung?: Date | undefined;
  donVi?: string | undefined;
  donGiaChiTiet?: number | undefined;
  donGia?: number | undefined;
  vat?: number | undefined;
  soLuongNhap?: number | undefined;
  thanhTienNhap?: number | undefined;
  soLuongXuat?: number | undefined;
  thanhTienXuat?: number | undefined;
  soLuongKiemKe?: number | undefined;
  thanhTienKiemKe?: number | undefined;
  soLuongSuDung?: number | undefined;
  thanhTienSuDung?: number | undefined;
  nhaCungCapId?: string | undefined;
  soDangKy?: string | undefined;
  donGiaDongY?: number | undefined;
  soLuongDongY?: number | undefined;
  thanhTienDongY?: number | undefined;
  benhNhanId?: number | undefined;
  doiTuongBenhNhanId?: number | undefined;
  donGiaXuat?: number | undefined;
  ghiChu?: string | undefined;
  trongBaoHiem?: number | undefined;
  id?: number | undefined;
}

export class PagedResultDtoOfNhapduocDto
  implements IPagedResultDtoOfNhapduocDto {
  totalCount?: number | undefined;
  items?: NhapduocDto[] | undefined;

  constructor(data?: IPagedResultDtoOfNhapduocDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(NhapduocDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfNhapduocDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfNhapduocDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfNhapduocDto {
  totalCount?: number | undefined;
  items?: NhapduocDto[] | undefined;
}

export class PagedResultDtoOfNhapduocchitietDto
  implements IPagedResultDtoOfNhapduocchitietDto {
  totalCount?: number | undefined;
  items?: NhapduocchitietDto[] | undefined;

  constructor(data?: IPagedResultDtoOfNhapduocchitietDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(NhapduocchitietDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfNhapduocchitietDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfNhapduocchitietDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfNhapduocchitietDto {
  totalCount?: number | undefined;
  items?: NhapduocchitietDto[] | undefined;
}

export class UpdateNhomdichvuDto implements IUpdateNhomdichvuDto {
  ma?: string | undefined;
  maNhomBYT?: string | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  bhyt?: number | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateNhomdichvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.maNhomBYT = _data["maNhomBYT"];
      this.ten = _data["ten"];
      this.tenChiTiet = _data["tenChiTiet"];
      this.bhyt = _data["bhyt"];
      this.stt = _data["stt"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateNhomdichvuDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateNhomdichvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["maNhomBYT"] = this.maNhomBYT;
    data["ten"] = this.ten;
    data["tenChiTiet"] = this.tenChiTiet;
    data["bhyt"] = this.bhyt;
    data["stt"] = this.stt;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateNhomdichvuDto {
  ma?: string | undefined;
  maNhomBYT?: string | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  bhyt?: number | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  id?: number | undefined;
}

export class NhomdichvuDto implements INhomdichvuDto {
  ma?: string | undefined;
  maNhomBYT?: string | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  bhyt?: number | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  dicTieunhomdichvu?: DicTieunhomdichvu[] | undefined;
  id?: number | undefined;

  constructor(data?: INhomdichvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.maNhomBYT = _data["maNhomBYT"];
      this.ten = _data["ten"];
      this.tenChiTiet = _data["tenChiTiet"];
      this.bhyt = _data["bhyt"];
      this.stt = _data["stt"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicTieunhomdichvu"])) {
        this.dicTieunhomdichvu = [] as any;
        for (let item of _data["dicTieunhomdichvu"])
          this.dicTieunhomdichvu!.push(DicTieunhomdichvu.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): NhomdichvuDto {
    data = typeof data === "object" ? data : {};
    let result = new NhomdichvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["maNhomBYT"] = this.maNhomBYT;
    data["ten"] = this.ten;
    data["tenChiTiet"] = this.tenChiTiet;
    data["bhyt"] = this.bhyt;
    data["stt"] = this.stt;
    data["status"] = this.status;
    if (Array.isArray(this.dicTieunhomdichvu)) {
      data["dicTieunhomdichvu"] = [];
      for (let item of this.dicTieunhomdichvu)
        data["dicTieunhomdichvu"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface INhomdichvuDto {
  ma?: string | undefined;
  maNhomBYT?: string | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  bhyt?: number | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  dicTieunhomdichvu?: DicTieunhomdichvu[] | undefined;
  id?: number | undefined;
}

export class DicTieunhomdichvu implements IDicTieunhomdichvu {
  ma?: string | undefined;
  ten?: string | undefined;
  nhomId?: number | undefined;
  tenRutGon?: string | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  nhom?: DicNhomdichvu | undefined;
  dicDichvu?: DicDichvu[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicTieunhomdichvu) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhomId = _data["nhomId"];
      this.tenRutGon = _data["tenRutGon"];
      this.stt = _data["stt"];
      this.status = _data["status"];
      this.nhom = _data["nhom"]
        ? DicNhomdichvu.fromJS(_data["nhom"])
        : <any>undefined;
      if (Array.isArray(_data["dicDichvu"])) {
        this.dicDichvu = [] as any;
        for (let item of _data["dicDichvu"])
          this.dicDichvu!.push(DicDichvu.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicTieunhomdichvu {
    data = typeof data === "object" ? data : {};
    let result = new DicTieunhomdichvu();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhomId"] = this.nhomId;
    data["tenRutGon"] = this.tenRutGon;
    data["stt"] = this.stt;
    data["status"] = this.status;
    data["nhom"] = this.nhom ? this.nhom.toJSON() : <any>undefined;
    if (Array.isArray(this.dicDichvu)) {
      data["dicDichvu"] = [];
      for (let item of this.dicDichvu) data["dicDichvu"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicTieunhomdichvu {
  ma?: string | undefined;
  ten?: string | undefined;
  nhomId?: number | undefined;
  tenRutGon?: string | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  nhom?: DicNhomdichvu | undefined;
  dicDichvu?: DicDichvu[] | undefined;
  id?: number | undefined;
}

export class DicNhomdichvu implements IDicNhomdichvu {
  ma?: string | undefined;
  maNhomByt?: string | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  bhyt?: number | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  dicTieunhomdichvu?: DicTieunhomdichvu[] | undefined;
  id?: number | undefined;

  constructor(data?: IDicNhomdichvu) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.maNhomByt = _data["maNhomByt"];
      this.ten = _data["ten"];
      this.tenChiTiet = _data["tenChiTiet"];
      this.bhyt = _data["bhyt"];
      this.stt = _data["stt"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicTieunhomdichvu"])) {
        this.dicTieunhomdichvu = [] as any;
        for (let item of _data["dicTieunhomdichvu"])
          this.dicTieunhomdichvu!.push(DicTieunhomdichvu.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicNhomdichvu {
    data = typeof data === "object" ? data : {};
    let result = new DicNhomdichvu();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["maNhomByt"] = this.maNhomByt;
    data["ten"] = this.ten;
    data["tenChiTiet"] = this.tenChiTiet;
    data["bhyt"] = this.bhyt;
    data["stt"] = this.stt;
    data["status"] = this.status;
    if (Array.isArray(this.dicTieunhomdichvu)) {
      data["dicTieunhomdichvu"] = [];
      for (let item of this.dicTieunhomdichvu)
        data["dicTieunhomdichvu"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IDicNhomdichvu {
  ma?: string | undefined;
  maNhomByt?: string | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  bhyt?: number | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  dicTieunhomdichvu?: DicTieunhomdichvu[] | undefined;
  id?: number | undefined;
}

export class DicDichvu implements IDicDichvu {
  ten?: string | undefined;
  hamLuong?: string | undefined;
  donViTinh?: string | undefined;
  donGia?: number | undefined;
  trongDanhMuc?: number | undefined;
  loai?: number | undefined;
  baoHiemThanhToan?: number | undefined;
  dichVuKyThuatCao?: number | undefined;
  phanLoaiDichVu?: number | undefined;
  tenHoatChat?: string | undefined;
  nuocSanXuat?: string | undefined;
  duongDung?: string | undefined;
  tieuNhomId?: number | undefined;
  soDangKy?: string | undefined;
  dangBaoChe?: string | undefined;
  nhaSanXuat?: string | undefined;
  quyCachPhamChat?: string | undefined;
  baoHiemYte?: number | undefined;
  maQuyetDinh?: string | undefined;
  tenRutGon?: string | undefined;
  tinhTrangNhap?: string | undefined;
  nguonGoc?: string | undefined;
  ycsd?: string | undefined;
  tyLeSoChePhucChe?: number | undefined;
  tyLeBaoQuan?: number | undefined;
  boPhanDung?: string | undefined;
  dongY?: boolean | undefined;
  phuongPhap?: string | undefined;
  maNhaCungCap?: string | undefined;
  soThuTu?: number | undefined;
  donGia2?: number | undefined;
  soThuTuQuyetDinh?: string | undefined;
  soLuongMin?: number | undefined;
  donViNhap?: string | undefined;
  tyLeSuDung?: number | undefined;
  maTam?: string | undefined;
  tieuChuan?: string | undefined;
  tuoiTho?: string | undefined;
  maNhom?: number | undefined;
  maDuongDung?: string | undefined;
  soLuong?: number | undefined;
  soQuyetDinh?: string | undefined;
  ngayQuyetDinh?: Date | undefined;
  maCongTySanXuat?: number | undefined;
  maCongTyDangKy?: number | undefined;
  maDichVuBackUp?: string | undefined;
  maPhongBanSd?: string | undefined;
  dinhMuc?: number | undefined;
  maAtc?: string | undefined;
  maHoatChat?: string | undefined;
  donGiaBhyt?: number | undefined;
  status?: number | undefined;
  goiThau?: string | undefined;
  loaiThau?: string | undefined;
  nhaThau?: string | undefined;
  loaiThuoc?: string | undefined;
  nhomThau?: string | undefined;
  tieuNhom?: DicTieunhomdichvu | undefined;
  id?: number | undefined;

  constructor(data?: IDicDichvu) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ten = _data["ten"];
      this.hamLuong = _data["hamLuong"];
      this.donViTinh = _data["donViTinh"];
      this.donGia = _data["donGia"];
      this.trongDanhMuc = _data["trongDanhMuc"];
      this.loai = _data["loai"];
      this.baoHiemThanhToan = _data["baoHiemThanhToan"];
      this.dichVuKyThuatCao = _data["dichVuKyThuatCao"];
      this.phanLoaiDichVu = _data["phanLoaiDichVu"];
      this.tenHoatChat = _data["tenHoatChat"];
      this.nuocSanXuat = _data["nuocSanXuat"];
      this.duongDung = _data["duongDung"];
      this.tieuNhomId = _data["tieuNhomId"];
      this.soDangKy = _data["soDangKy"];
      this.dangBaoChe = _data["dangBaoChe"];
      this.nhaSanXuat = _data["nhaSanXuat"];
      this.quyCachPhamChat = _data["quyCachPhamChat"];
      this.baoHiemYte = _data["baoHiemYte"];
      this.maQuyetDinh = _data["maQuyetDinh"];
      this.tenRutGon = _data["tenRutGon"];
      this.tinhTrangNhap = _data["tinhTrangNhap"];
      this.nguonGoc = _data["nguonGoc"];
      this.ycsd = _data["ycsd"];
      this.tyLeSoChePhucChe = _data["tyLeSoChePhucChe"];
      this.tyLeBaoQuan = _data["tyLeBaoQuan"];
      this.boPhanDung = _data["boPhanDung"];
      this.dongY = _data["dongY"];
      this.phuongPhap = _data["phuongPhap"];
      this.maNhaCungCap = _data["maNhaCungCap"];
      this.soThuTu = _data["soThuTu"];
      this.donGia2 = _data["donGia2"];
      this.soThuTuQuyetDinh = _data["soThuTuQuyetDinh"];
      this.soLuongMin = _data["soLuongMin"];
      this.donViNhap = _data["donViNhap"];
      this.tyLeSuDung = _data["tyLeSuDung"];
      this.maTam = _data["maTam"];
      this.tieuChuan = _data["tieuChuan"];
      this.tuoiTho = _data["tuoiTho"];
      this.maNhom = _data["maNhom"];
      this.maDuongDung = _data["maDuongDung"];
      this.soLuong = _data["soLuong"];
      this.soQuyetDinh = _data["soQuyetDinh"];
      this.ngayQuyetDinh = _data["ngayQuyetDinh"]
        ? new Date(_data["ngayQuyetDinh"].toString())
        : <any>undefined;
      this.maCongTySanXuat = _data["maCongTySanXuat"];
      this.maCongTyDangKy = _data["maCongTyDangKy"];
      this.maDichVuBackUp = _data["maDichVuBackUp"];
      this.maPhongBanSd = _data["maPhongBanSd"];
      this.dinhMuc = _data["dinhMuc"];
      this.maAtc = _data["maAtc"];
      this.maHoatChat = _data["maHoatChat"];
      this.donGiaBhyt = _data["donGiaBhyt"];
      this.status = _data["status"];
      this.goiThau = _data["goiThau"];
      this.loaiThau = _data["loaiThau"];
      this.nhaThau = _data["nhaThau"];
      this.loaiThuoc = _data["loaiThuoc"];
      this.nhomThau = _data["nhomThau"];
      this.tieuNhom = _data["tieuNhom"]
        ? DicTieunhomdichvu.fromJS(_data["tieuNhom"])
        : <any>undefined;
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): DicDichvu {
    data = typeof data === "object" ? data : {};
    let result = new DicDichvu();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ten"] = this.ten;
    data["hamLuong"] = this.hamLuong;
    data["donViTinh"] = this.donViTinh;
    data["donGia"] = this.donGia;
    data["trongDanhMuc"] = this.trongDanhMuc;
    data["loai"] = this.loai;
    data["baoHiemThanhToan"] = this.baoHiemThanhToan;
    data["dichVuKyThuatCao"] = this.dichVuKyThuatCao;
    data["phanLoaiDichVu"] = this.phanLoaiDichVu;
    data["tenHoatChat"] = this.tenHoatChat;
    data["nuocSanXuat"] = this.nuocSanXuat;
    data["duongDung"] = this.duongDung;
    data["tieuNhomId"] = this.tieuNhomId;
    data["soDangKy"] = this.soDangKy;
    data["dangBaoChe"] = this.dangBaoChe;
    data["nhaSanXuat"] = this.nhaSanXuat;
    data["quyCachPhamChat"] = this.quyCachPhamChat;
    data["baoHiemYte"] = this.baoHiemYte;
    data["maQuyetDinh"] = this.maQuyetDinh;
    data["tenRutGon"] = this.tenRutGon;
    data["tinhTrangNhap"] = this.tinhTrangNhap;
    data["nguonGoc"] = this.nguonGoc;
    data["ycsd"] = this.ycsd;
    data["tyLeSoChePhucChe"] = this.tyLeSoChePhucChe;
    data["tyLeBaoQuan"] = this.tyLeBaoQuan;
    data["boPhanDung"] = this.boPhanDung;
    data["dongY"] = this.dongY;
    data["phuongPhap"] = this.phuongPhap;
    data["maNhaCungCap"] = this.maNhaCungCap;
    data["soThuTu"] = this.soThuTu;
    data["donGia2"] = this.donGia2;
    data["soThuTuQuyetDinh"] = this.soThuTuQuyetDinh;
    data["soLuongMin"] = this.soLuongMin;
    data["donViNhap"] = this.donViNhap;
    data["tyLeSuDung"] = this.tyLeSuDung;
    data["maTam"] = this.maTam;
    data["tieuChuan"] = this.tieuChuan;
    data["tuoiTho"] = this.tuoiTho;
    data["maNhom"] = this.maNhom;
    data["maDuongDung"] = this.maDuongDung;
    data["soLuong"] = this.soLuong;
    data["soQuyetDinh"] = this.soQuyetDinh;
    data["ngayQuyetDinh"] = this.ngayQuyetDinh
      ? this.ngayQuyetDinh.toISOString()
      : <any>undefined;
    data["maCongTySanXuat"] = this.maCongTySanXuat;
    data["maCongTyDangKy"] = this.maCongTyDangKy;
    data["maDichVuBackUp"] = this.maDichVuBackUp;
    data["maPhongBanSd"] = this.maPhongBanSd;
    data["dinhMuc"] = this.dinhMuc;
    data["maAtc"] = this.maAtc;
    data["maHoatChat"] = this.maHoatChat;
    data["donGiaBhyt"] = this.donGiaBhyt;
    data["status"] = this.status;
    data["goiThau"] = this.goiThau;
    data["loaiThau"] = this.loaiThau;
    data["nhaThau"] = this.nhaThau;
    data["loaiThuoc"] = this.loaiThuoc;
    data["nhomThau"] = this.nhomThau;
    data["tieuNhom"] = this.tieuNhom ? this.tieuNhom.toJSON() : <any>undefined;
    data["id"] = this.id;
    return data;
  }
}

export interface IDicDichvu {
  ten?: string | undefined;
  hamLuong?: string | undefined;
  donViTinh?: string | undefined;
  donGia?: number | undefined;
  trongDanhMuc?: number | undefined;
  loai?: number | undefined;
  baoHiemThanhToan?: number | undefined;
  dichVuKyThuatCao?: number | undefined;
  phanLoaiDichVu?: number | undefined;
  tenHoatChat?: string | undefined;
  nuocSanXuat?: string | undefined;
  duongDung?: string | undefined;
  tieuNhomId?: number | undefined;
  soDangKy?: string | undefined;
  dangBaoChe?: string | undefined;
  nhaSanXuat?: string | undefined;
  quyCachPhamChat?: string | undefined;
  baoHiemYte?: number | undefined;
  maQuyetDinh?: string | undefined;
  tenRutGon?: string | undefined;
  tinhTrangNhap?: string | undefined;
  nguonGoc?: string | undefined;
  ycsd?: string | undefined;
  tyLeSoChePhucChe?: number | undefined;
  tyLeBaoQuan?: number | undefined;
  boPhanDung?: string | undefined;
  dongY?: boolean | undefined;
  phuongPhap?: string | undefined;
  maNhaCungCap?: string | undefined;
  soThuTu?: number | undefined;
  donGia2?: number | undefined;
  soThuTuQuyetDinh?: string | undefined;
  soLuongMin?: number | undefined;
  donViNhap?: string | undefined;
  tyLeSuDung?: number | undefined;
  maTam?: string | undefined;
  tieuChuan?: string | undefined;
  tuoiTho?: string | undefined;
  maNhom?: number | undefined;
  maDuongDung?: string | undefined;
  soLuong?: number | undefined;
  soQuyetDinh?: string | undefined;
  ngayQuyetDinh?: Date | undefined;
  maCongTySanXuat?: number | undefined;
  maCongTyDangKy?: number | undefined;
  maDichVuBackUp?: string | undefined;
  maPhongBanSd?: string | undefined;
  dinhMuc?: number | undefined;
  maAtc?: string | undefined;
  maHoatChat?: string | undefined;
  donGiaBhyt?: number | undefined;
  status?: number | undefined;
  goiThau?: string | undefined;
  loaiThau?: string | undefined;
  nhaThau?: string | undefined;
  loaiThuoc?: string | undefined;
  nhomThau?: string | undefined;
  tieuNhom?: DicTieunhomdichvu | undefined;
  id?: number | undefined;
}

export class CreateNhomdichvuDto implements ICreateNhomdichvuDto {
  ma?: string | undefined;
  maNhomBYT?: string | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  bhyt?: number | undefined;
  stt?: number | undefined;
  status?: number | undefined;

  constructor(data?: ICreateNhomdichvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.maNhomBYT = _data["maNhomBYT"];
      this.ten = _data["ten"];
      this.tenChiTiet = _data["tenChiTiet"];
      this.bhyt = _data["bhyt"];
      this.stt = _data["stt"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): CreateNhomdichvuDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateNhomdichvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["maNhomBYT"] = this.maNhomBYT;
    data["ten"] = this.ten;
    data["tenChiTiet"] = this.tenChiTiet;
    data["bhyt"] = this.bhyt;
    data["stt"] = this.stt;
    data["status"] = this.status;
    return data;
  }
}

export interface ICreateNhomdichvuDto {
  ma?: string | undefined;
  maNhomBYT?: string | undefined;
  ten?: string | undefined;
  tenChiTiet?: string | undefined;
  bhyt?: number | undefined;
  stt?: number | undefined;
  status?: number | undefined;
}

export class PagedResultDtoOfNhomdichvuDto
  implements IPagedResultDtoOfNhomdichvuDto {
  totalCount?: number | undefined;
  items?: NhomdichvuDto[] | undefined;

  constructor(data?: IPagedResultDtoOfNhomdichvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(NhomdichvuDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfNhomdichvuDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfNhomdichvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfNhomdichvuDto {
  totalCount?: number | undefined;
  items?: NhomdichvuDto[] | undefined;
}

export class UpdatePhanloaiphongbanDto implements IUpdatePhanloaiphongbanDto {
  phanLoai?: string | undefined;
  status?: boolean | undefined;
  ma?: string | undefined;
  id?: number | undefined;

  constructor(data?: IUpdatePhanloaiphongbanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.phanLoai = _data["phanLoai"];
      this.status = _data["status"];
      this.ma = _data["ma"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdatePhanloaiphongbanDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdatePhanloaiphongbanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["phanLoai"] = this.phanLoai;
    data["status"] = this.status;
    data["ma"] = this.ma;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdatePhanloaiphongbanDto {
  phanLoai?: string | undefined;
  status?: boolean | undefined;
  ma?: string | undefined;
  id?: number | undefined;
}

export class PhanloaiphongbanDto implements IPhanloaiphongbanDto {
  phanLoai?: string | undefined;
  status?: boolean | undefined;
  ma?: string | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;

  constructor(data?: IPhanloaiphongbanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.phanLoai = _data["phanLoai"];
      this.status = _data["status"];
      this.ma = _data["ma"];
      if (Array.isArray(_data["dicPhongban"])) {
        this.dicPhongban = [] as any;
        for (let item of _data["dicPhongban"])
          this.dicPhongban!.push(DicPhongban.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): PhanloaiphongbanDto {
    data = typeof data === "object" ? data : {};
    let result = new PhanloaiphongbanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["phanLoai"] = this.phanLoai;
    data["status"] = this.status;
    data["ma"] = this.ma;
    if (Array.isArray(this.dicPhongban)) {
      data["dicPhongban"] = [];
      for (let item of this.dicPhongban)
        data["dicPhongban"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IPhanloaiphongbanDto {
  phanLoai?: string | undefined;
  status?: boolean | undefined;
  ma?: string | undefined;
  dicPhongban?: DicPhongban[] | undefined;
  id?: number | undefined;
}

export class CreatePhanloaiphongbanDto implements ICreatePhanloaiphongbanDto {
  phanLoai?: string | undefined;
  status?: boolean | undefined;
  ma?: string | undefined;

  constructor(data?: ICreatePhanloaiphongbanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.phanLoai = _data["phanLoai"];
      this.status = _data["status"];
      this.ma = _data["ma"];
    }
  }

  static fromJS(data: any): CreatePhanloaiphongbanDto {
    data = typeof data === "object" ? data : {};
    let result = new CreatePhanloaiphongbanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["phanLoai"] = this.phanLoai;
    data["status"] = this.status;
    data["ma"] = this.ma;
    return data;
  }
}

export interface ICreatePhanloaiphongbanDto {
  phanLoai?: string | undefined;
  status?: boolean | undefined;
  ma?: string | undefined;
}

export class PagedResultDtoOfPhanloaiphongbanDto
  implements IPagedResultDtoOfPhanloaiphongbanDto {
  totalCount?: number | undefined;
  items?: PhanloaiphongbanDto[] | undefined;

  constructor(data?: IPagedResultDtoOfPhanloaiphongbanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(PhanloaiphongbanDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfPhanloaiphongbanDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfPhanloaiphongbanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfPhanloaiphongbanDto {
  totalCount?: number | undefined;
  items?: PhanloaiphongbanDto[] | undefined;
}

export class UpdatePhongbanDto implements IUpdatePhongbanDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: number | undefined;
  chuyenKhoaTen?: string | undefined;
  phanLoaiId?: number | undefined;
  quanLy?: number | undefined;
  buongGiuong?: string | undefined;
  maQuyetDinh?: string | undefined;
  phongBanCuId?: number | undefined;
  chuyenKhoaId?: number | undefined;
  tuTruc?: boolean | undefined;
  isTrongBenhVien?: number | undefined;
  phuongPhapXuatDuoc?: number | undefined;
  phuongPhapHuHaoDongY?: number | undefined;
  diaChi?: string | undefined;
  benhVienId?: number | undefined;
  status?: number | undefined;
  id?: number | undefined;

  constructor(data?: IUpdatePhongbanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhom = _data["nhom"];
      this.chuyenKhoaTen = _data["chuyenKhoaTen"];
      this.phanLoaiId = _data["phanLoaiId"];
      this.quanLy = _data["quanLy"];
      this.buongGiuong = _data["buongGiuong"];
      this.maQuyetDinh = _data["maQuyetDinh"];
      this.phongBanCuId = _data["phongBanCuId"];
      this.chuyenKhoaId = _data["chuyenKhoaId"];
      this.tuTruc = _data["tuTruc"];
      this.isTrongBenhVien = _data["isTrongBenhVien"];
      this.phuongPhapXuatDuoc = _data["phuongPhapXuatDuoc"];
      this.phuongPhapHuHaoDongY = _data["phuongPhapHuHaoDongY"];
      this.diaChi = _data["diaChi"];
      this.benhVienId = _data["benhVienId"];
      this.status = _data["status"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdatePhongbanDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdatePhongbanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhom"] = this.nhom;
    data["chuyenKhoaTen"] = this.chuyenKhoaTen;
    data["phanLoaiId"] = this.phanLoaiId;
    data["quanLy"] = this.quanLy;
    data["buongGiuong"] = this.buongGiuong;
    data["maQuyetDinh"] = this.maQuyetDinh;
    data["phongBanCuId"] = this.phongBanCuId;
    data["chuyenKhoaId"] = this.chuyenKhoaId;
    data["tuTruc"] = this.tuTruc;
    data["isTrongBenhVien"] = this.isTrongBenhVien;
    data["phuongPhapXuatDuoc"] = this.phuongPhapXuatDuoc;
    data["phuongPhapHuHaoDongY"] = this.phuongPhapHuHaoDongY;
    data["diaChi"] = this.diaChi;
    data["benhVienId"] = this.benhVienId;
    data["status"] = this.status;
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdatePhongbanDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: number | undefined;
  chuyenKhoaTen?: string | undefined;
  phanLoaiId?: number | undefined;
  quanLy?: number | undefined;
  buongGiuong?: string | undefined;
  maQuyetDinh?: string | undefined;
  phongBanCuId?: number | undefined;
  chuyenKhoaId?: number | undefined;
  tuTruc?: boolean | undefined;
  isTrongBenhVien?: number | undefined;
  phuongPhapXuatDuoc?: number | undefined;
  phuongPhapHuHaoDongY?: number | undefined;
  diaChi?: string | undefined;
  benhVienId?: number | undefined;
  status?: number | undefined;
  id?: number | undefined;
}

export class PhongbanDto implements IPhongbanDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: number | undefined;
  chuyenKhoaTen?: string | undefined;
  phanLoaiId?: number | undefined;
  quanLy?: number | undefined;
  buongGiuong?: string | undefined;
  maQuyetDinh?: string | undefined;
  phongBanCuId?: number | undefined;
  chuyenKhoaId?: number | undefined;
  tuTruc?: boolean | undefined;
  isTrongBenhVien?: number | undefined;
  phuongPhapXuatDuoc?: number | undefined;
  phuongPhapHuHaoDongY?: number | undefined;
  diaChi?: string | undefined;
  benhVienId?: number | undefined;
  status?: number | undefined;
  benhVien?: DicBenhvien | undefined;
  chuyenKhoa?: DicChuyenkhoa | undefined;
  phanLoai?: DicPhanloaiphongban | undefined;
  dicCanbo?: DicCanbo[] | undefined;
  id?: number | undefined;

  constructor(data?: IPhongbanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhom = _data["nhom"];
      this.chuyenKhoaTen = _data["chuyenKhoaTen"];
      this.phanLoaiId = _data["phanLoaiId"];
      this.quanLy = _data["quanLy"];
      this.buongGiuong = _data["buongGiuong"];
      this.maQuyetDinh = _data["maQuyetDinh"];
      this.phongBanCuId = _data["phongBanCuId"];
      this.chuyenKhoaId = _data["chuyenKhoaId"];
      this.tuTruc = _data["tuTruc"];
      this.isTrongBenhVien = _data["isTrongBenhVien"];
      this.phuongPhapXuatDuoc = _data["phuongPhapXuatDuoc"];
      this.phuongPhapHuHaoDongY = _data["phuongPhapHuHaoDongY"];
      this.diaChi = _data["diaChi"];
      this.benhVienId = _data["benhVienId"];
      this.status = _data["status"];
      this.benhVien = _data["benhVien"]
        ? DicBenhvien.fromJS(_data["benhVien"])
        : <any>undefined;
      this.chuyenKhoa = _data["chuyenKhoa"]
        ? DicChuyenkhoa.fromJS(_data["chuyenKhoa"])
        : <any>undefined;
      this.phanLoai = _data["phanLoai"]
        ? DicPhanloaiphongban.fromJS(_data["phanLoai"])
        : <any>undefined;
      if (Array.isArray(_data["dicCanbo"])) {
        this.dicCanbo = [] as any;
        for (let item of _data["dicCanbo"])
          this.dicCanbo!.push(DicCanbo.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): PhongbanDto {
    data = typeof data === "object" ? data : {};
    let result = new PhongbanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhom"] = this.nhom;
    data["chuyenKhoaTen"] = this.chuyenKhoaTen;
    data["phanLoaiId"] = this.phanLoaiId;
    data["quanLy"] = this.quanLy;
    data["buongGiuong"] = this.buongGiuong;
    data["maQuyetDinh"] = this.maQuyetDinh;
    data["phongBanCuId"] = this.phongBanCuId;
    data["chuyenKhoaId"] = this.chuyenKhoaId;
    data["tuTruc"] = this.tuTruc;
    data["isTrongBenhVien"] = this.isTrongBenhVien;
    data["phuongPhapXuatDuoc"] = this.phuongPhapXuatDuoc;
    data["phuongPhapHuHaoDongY"] = this.phuongPhapHuHaoDongY;
    data["diaChi"] = this.diaChi;
    data["benhVienId"] = this.benhVienId;
    data["status"] = this.status;
    data["benhVien"] = this.benhVien ? this.benhVien.toJSON() : <any>undefined;
    data["chuyenKhoa"] = this.chuyenKhoa
      ? this.chuyenKhoa.toJSON()
      : <any>undefined;
    data["phanLoai"] = this.phanLoai ? this.phanLoai.toJSON() : <any>undefined;
    if (Array.isArray(this.dicCanbo)) {
      data["dicCanbo"] = [];
      for (let item of this.dicCanbo) data["dicCanbo"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IPhongbanDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: number | undefined;
  chuyenKhoaTen?: string | undefined;
  phanLoaiId?: number | undefined;
  quanLy?: number | undefined;
  buongGiuong?: string | undefined;
  maQuyetDinh?: string | undefined;
  phongBanCuId?: number | undefined;
  chuyenKhoaId?: number | undefined;
  tuTruc?: boolean | undefined;
  isTrongBenhVien?: number | undefined;
  phuongPhapXuatDuoc?: number | undefined;
  phuongPhapHuHaoDongY?: number | undefined;
  diaChi?: string | undefined;
  benhVienId?: number | undefined;
  status?: number | undefined;
  benhVien?: DicBenhvien | undefined;
  chuyenKhoa?: DicChuyenkhoa | undefined;
  phanLoai?: DicPhanloaiphongban | undefined;
  dicCanbo?: DicCanbo[] | undefined;
  id?: number | undefined;
}

export class CreatePhongbanDto implements ICreatePhongbanDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: number | undefined;
  chuyenKhoaTen?: string | undefined;
  phanLoaiId?: number | undefined;
  quanLy?: number | undefined;
  buongGiuong?: string | undefined;
  maQuyetDinh?: string | undefined;
  phongBanCuId?: number | undefined;
  chuyenKhoaId?: number | undefined;
  tuTruc?: boolean | undefined;
  isTrongBenhVien?: number | undefined;
  phuongPhapXuatDuoc?: number | undefined;
  phuongPhapHuHaoDongY?: number | undefined;
  diaChi?: string | undefined;
  benhVienId?: number | undefined;
  status?: number | undefined;

  constructor(data?: ICreatePhongbanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhom = _data["nhom"];
      this.chuyenKhoaTen = _data["chuyenKhoaTen"];
      this.phanLoaiId = _data["phanLoaiId"];
      this.quanLy = _data["quanLy"];
      this.buongGiuong = _data["buongGiuong"];
      this.maQuyetDinh = _data["maQuyetDinh"];
      this.phongBanCuId = _data["phongBanCuId"];
      this.chuyenKhoaId = _data["chuyenKhoaId"];
      this.tuTruc = _data["tuTruc"];
      this.isTrongBenhVien = _data["isTrongBenhVien"];
      this.phuongPhapXuatDuoc = _data["phuongPhapXuatDuoc"];
      this.phuongPhapHuHaoDongY = _data["phuongPhapHuHaoDongY"];
      this.diaChi = _data["diaChi"];
      this.benhVienId = _data["benhVienId"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): CreatePhongbanDto {
    data = typeof data === "object" ? data : {};
    let result = new CreatePhongbanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhom"] = this.nhom;
    data["chuyenKhoaTen"] = this.chuyenKhoaTen;
    data["phanLoaiId"] = this.phanLoaiId;
    data["quanLy"] = this.quanLy;
    data["buongGiuong"] = this.buongGiuong;
    data["maQuyetDinh"] = this.maQuyetDinh;
    data["phongBanCuId"] = this.phongBanCuId;
    data["chuyenKhoaId"] = this.chuyenKhoaId;
    data["tuTruc"] = this.tuTruc;
    data["isTrongBenhVien"] = this.isTrongBenhVien;
    data["phuongPhapXuatDuoc"] = this.phuongPhapXuatDuoc;
    data["phuongPhapHuHaoDongY"] = this.phuongPhapHuHaoDongY;
    data["diaChi"] = this.diaChi;
    data["benhVienId"] = this.benhVienId;
    data["status"] = this.status;
    return data;
  }
}

export interface ICreatePhongbanDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhom?: number | undefined;
  chuyenKhoaTen?: string | undefined;
  phanLoaiId?: number | undefined;
  quanLy?: number | undefined;
  buongGiuong?: string | undefined;
  maQuyetDinh?: string | undefined;
  phongBanCuId?: number | undefined;
  chuyenKhoaId?: number | undefined;
  tuTruc?: boolean | undefined;
  isTrongBenhVien?: number | undefined;
  phuongPhapXuatDuoc?: number | undefined;
  phuongPhapHuHaoDongY?: number | undefined;
  diaChi?: string | undefined;
  benhVienId?: number | undefined;
  status?: number | undefined;
}

export class PagedResultDtoOfPhongbanDto
  implements IPagedResultDtoOfPhongbanDto {
  totalCount?: number | undefined;
  items?: PhongbanDto[] | undefined;

  constructor(data?: IPagedResultDtoOfPhongbanDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(PhongbanDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfPhongbanDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfPhongbanDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfPhongbanDto {
  totalCount?: number | undefined;
  items?: PhongbanDto[] | undefined;
}

export class CreateRoleDto implements ICreateRoleDto {
  name!: string;
  displayName!: string;
  normalizedName?: string | undefined;
  description?: string | undefined;
  permissions?: string[] | undefined;

  constructor(data?: ICreateRoleDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.displayName = _data["displayName"];
      this.normalizedName = _data["normalizedName"];
      this.description = _data["description"];
      if (Array.isArray(_data["permissions"])) {
        this.permissions = [] as any;
        for (let item of _data["permissions"]) this.permissions!.push(item);
      }
    }
  }

  static fromJS(data: any): CreateRoleDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateRoleDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["displayName"] = this.displayName;
    data["normalizedName"] = this.normalizedName;
    data["description"] = this.description;
    if (Array.isArray(this.permissions)) {
      data["permissions"] = [];
      for (let item of this.permissions) data["permissions"].push(item);
    }
    return data;
  }
}

export interface ICreateRoleDto {
  name: string;
  displayName: string;
  normalizedName?: string | undefined;
  description?: string | undefined;
  permissions?: string[] | undefined;
}

export class RoleDto implements IRoleDto {
  name!: string;
  displayName!: string;
  normalizedName?: string | undefined;
  description?: string | undefined;
  permissions?: string[] | undefined;
  id?: number | undefined;

  constructor(data?: IRoleDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.displayName = _data["displayName"];
      this.normalizedName = _data["normalizedName"];
      this.description = _data["description"];
      if (Array.isArray(_data["permissions"])) {
        this.permissions = [] as any;
        for (let item of _data["permissions"]) this.permissions!.push(item);
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): RoleDto {
    data = typeof data === "object" ? data : {};
    let result = new RoleDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["displayName"] = this.displayName;
    data["normalizedName"] = this.normalizedName;
    data["description"] = this.description;
    if (Array.isArray(this.permissions)) {
      data["permissions"] = [];
      for (let item of this.permissions) data["permissions"].push(item);
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IRoleDto {
  name: string;
  displayName: string;
  normalizedName?: string | undefined;
  description?: string | undefined;
  permissions?: string[] | undefined;
  id?: number | undefined;
}

export class ListResultDtoOfRoleListDto implements IListResultDtoOfRoleListDto {
  items?: RoleListDto[] | undefined;

  constructor(data?: IListResultDtoOfRoleListDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(RoleListDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ListResultDtoOfRoleListDto {
    data = typeof data === "object" ? data : {};
    let result = new ListResultDtoOfRoleListDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IListResultDtoOfRoleListDto {
  items?: RoleListDto[] | undefined;
}

export class RoleListDto implements IRoleListDto {
  name?: string | undefined;
  displayName?: string | undefined;
  isStatic?: boolean | undefined;
  isDefault?: boolean | undefined;
  creationTime?: Date | undefined;
  id?: number | undefined;

  constructor(data?: IRoleListDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.displayName = _data["displayName"];
      this.isStatic = _data["isStatic"];
      this.isDefault = _data["isDefault"];
      this.creationTime = _data["creationTime"]
        ? new Date(_data["creationTime"].toString())
        : <any>undefined;
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): RoleListDto {
    data = typeof data === "object" ? data : {};
    let result = new RoleListDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["displayName"] = this.displayName;
    data["isStatic"] = this.isStatic;
    data["isDefault"] = this.isDefault;
    data["creationTime"] = this.creationTime
      ? this.creationTime.toISOString()
      : <any>undefined;
    data["id"] = this.id;
    return data;
  }
}

export interface IRoleListDto {
  name?: string | undefined;
  displayName?: string | undefined;
  isStatic?: boolean | undefined;
  isDefault?: boolean | undefined;
  creationTime?: Date | undefined;
  id?: number | undefined;
}

export class ListResultDtoOfPermissionDto
  implements IListResultDtoOfPermissionDto {
  items?: PermissionDto[] | undefined;

  constructor(data?: IListResultDtoOfPermissionDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(PermissionDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ListResultDtoOfPermissionDto {
    data = typeof data === "object" ? data : {};
    let result = new ListResultDtoOfPermissionDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IListResultDtoOfPermissionDto {
  items?: PermissionDto[] | undefined;
}

export class PermissionDto implements IPermissionDto {
  name?: string | undefined;
  displayName?: string | undefined;
  description?: string | undefined;
  id?: number | undefined;

  constructor(data?: IPermissionDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.displayName = _data["displayName"];
      this.description = _data["description"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): PermissionDto {
    data = typeof data === "object" ? data : {};
    let result = new PermissionDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["displayName"] = this.displayName;
    data["description"] = this.description;
    data["id"] = this.id;
    return data;
  }
}

export interface IPermissionDto {
  name?: string | undefined;
  displayName?: string | undefined;
  description?: string | undefined;
  id?: number | undefined;
}

export class GetRoleForEditOutput implements IGetRoleForEditOutput {
  role?: RoleEditDto | undefined;
  permissions?: FlatPermissionDto[] | undefined;
  grantedPermissionNames?: string[] | undefined;

  constructor(data?: IGetRoleForEditOutput) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.role = _data["role"]
        ? RoleEditDto.fromJS(_data["role"])
        : <any>undefined;
      if (Array.isArray(_data["permissions"])) {
        this.permissions = [] as any;
        for (let item of _data["permissions"])
          this.permissions!.push(FlatPermissionDto.fromJS(item));
      }
      if (Array.isArray(_data["grantedPermissionNames"])) {
        this.grantedPermissionNames = [] as any;
        for (let item of _data["grantedPermissionNames"])
          this.grantedPermissionNames!.push(item);
      }
    }
  }

  static fromJS(data: any): GetRoleForEditOutput {
    data = typeof data === "object" ? data : {};
    let result = new GetRoleForEditOutput();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["role"] = this.role ? this.role.toJSON() : <any>undefined;
    if (Array.isArray(this.permissions)) {
      data["permissions"] = [];
      for (let item of this.permissions)
        data["permissions"].push(item.toJSON());
    }
    if (Array.isArray(this.grantedPermissionNames)) {
      data["grantedPermissionNames"] = [];
      for (let item of this.grantedPermissionNames)
        data["grantedPermissionNames"].push(item);
    }
    return data;
  }
}

export interface IGetRoleForEditOutput {
  role?: RoleEditDto | undefined;
  permissions?: FlatPermissionDto[] | undefined;
  grantedPermissionNames?: string[] | undefined;
}

export class RoleEditDto implements IRoleEditDto {
  name!: string;
  displayName!: string;
  description?: string | undefined;
  isStatic?: boolean | undefined;
  id?: number | undefined;

  constructor(data?: IRoleEditDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.displayName = _data["displayName"];
      this.description = _data["description"];
      this.isStatic = _data["isStatic"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): RoleEditDto {
    data = typeof data === "object" ? data : {};
    let result = new RoleEditDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["displayName"] = this.displayName;
    data["description"] = this.description;
    data["isStatic"] = this.isStatic;
    data["id"] = this.id;
    return data;
  }
}

export interface IRoleEditDto {
  name: string;
  displayName: string;
  description?: string | undefined;
  isStatic?: boolean | undefined;
  id?: number | undefined;
}

export class FlatPermissionDto implements IFlatPermissionDto {
  name?: string | undefined;
  displayName?: string | undefined;
  description?: string | undefined;

  constructor(data?: IFlatPermissionDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.displayName = _data["displayName"];
      this.description = _data["description"];
    }
  }

  static fromJS(data: any): FlatPermissionDto {
    data = typeof data === "object" ? data : {};
    let result = new FlatPermissionDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["displayName"] = this.displayName;
    data["description"] = this.description;
    return data;
  }
}

export interface IFlatPermissionDto {
  name?: string | undefined;
  displayName?: string | undefined;
  description?: string | undefined;
}

export class PagedResultDtoOfRoleDto implements IPagedResultDtoOfRoleDto {
  totalCount?: number | undefined;
  items?: RoleDto[] | undefined;

  constructor(data?: IPagedResultDtoOfRoleDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(RoleDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfRoleDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfRoleDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfRoleDto {
  totalCount?: number | undefined;
  items?: RoleDto[] | undefined;
}

export class GetCurrentLoginInformationsOutput
  implements IGetCurrentLoginInformationsOutput {
  application?: ApplicationInfoDto | undefined;
  user?: UserLoginInfoDto | undefined;
  tenant?: TenantLoginInfoDto | undefined;

  constructor(data?: IGetCurrentLoginInformationsOutput) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.application = _data["application"]
        ? ApplicationInfoDto.fromJS(_data["application"])
        : <any>undefined;
      this.user = _data["user"]
        ? UserLoginInfoDto.fromJS(_data["user"])
        : <any>undefined;
      this.tenant = _data["tenant"]
        ? TenantLoginInfoDto.fromJS(_data["tenant"])
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetCurrentLoginInformationsOutput {
    data = typeof data === "object" ? data : {};
    let result = new GetCurrentLoginInformationsOutput();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["application"] = this.application
      ? this.application.toJSON()
      : <any>undefined;
    data["user"] = this.user ? this.user.toJSON() : <any>undefined;
    data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
    return data;
  }
}

export interface IGetCurrentLoginInformationsOutput {
  application?: ApplicationInfoDto | undefined;
  user?: UserLoginInfoDto | undefined;
  tenant?: TenantLoginInfoDto | undefined;
}

export class ApplicationInfoDto implements IApplicationInfoDto {
  version?: string | undefined;
  releaseDate?: Date | undefined;
  features?: { [key: string]: boolean } | undefined;

  constructor(data?: IApplicationInfoDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.version = _data["version"];
      this.releaseDate = _data["releaseDate"]
        ? new Date(_data["releaseDate"].toString())
        : <any>undefined;
      if (_data["features"]) {
        this.features = {} as any;
        for (let key in _data["features"]) {
          if (_data["features"].hasOwnProperty(key))
            this.features![key] = _data["features"][key];
        }
      }
    }
  }

  static fromJS(data: any): ApplicationInfoDto {
    data = typeof data === "object" ? data : {};
    let result = new ApplicationInfoDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["version"] = this.version;
    data["releaseDate"] = this.releaseDate
      ? this.releaseDate.toISOString()
      : <any>undefined;
    if (this.features) {
      data["features"] = {};
      for (let key in this.features) {
        if (this.features.hasOwnProperty(key))
          data["features"][key] = this.features[key];
      }
    }
    return data;
  }
}

export interface IApplicationInfoDto {
  version?: string | undefined;
  releaseDate?: Date | undefined;
  features?: { [key: string]: boolean } | undefined;
}

export class UserLoginInfoDto implements IUserLoginInfoDto {
  name?: string | undefined;
  surname?: string | undefined;
  userName?: string | undefined;
  emailAddress?: string | undefined;
  id?: number | undefined;

  constructor(data?: IUserLoginInfoDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.surname = _data["surname"];
      this.userName = _data["userName"];
      this.emailAddress = _data["emailAddress"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UserLoginInfoDto {
    data = typeof data === "object" ? data : {};
    let result = new UserLoginInfoDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["surname"] = this.surname;
    data["userName"] = this.userName;
    data["emailAddress"] = this.emailAddress;
    data["id"] = this.id;
    return data;
  }
}

export interface IUserLoginInfoDto {
  name?: string | undefined;
  surname?: string | undefined;
  userName?: string | undefined;
  emailAddress?: string | undefined;
  id?: number | undefined;
}

export class TenantLoginInfoDto implements ITenantLoginInfoDto {
  tenancyName?: string | undefined;
  name?: string | undefined;
  id?: number | undefined;

  constructor(data?: ITenantLoginInfoDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.tenancyName = _data["tenancyName"];
      this.name = _data["name"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): TenantLoginInfoDto {
    data = typeof data === "object" ? data : {};
    let result = new TenantLoginInfoDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["tenancyName"] = this.tenancyName;
    data["name"] = this.name;
    data["id"] = this.id;
    return data;
  }
}

export interface ITenantLoginInfoDto {
  tenancyName?: string | undefined;
  name?: string | undefined;
  id?: number | undefined;
}

export class CreateTenantDto implements ICreateTenantDto {
  tenancyName!: string;
  name!: string;
  adminEmailAddress!: string;
  connectionString?: string | undefined;
  isActive?: boolean | undefined;

  constructor(data?: ICreateTenantDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.tenancyName = _data["tenancyName"];
      this.name = _data["name"];
      this.adminEmailAddress = _data["adminEmailAddress"];
      this.connectionString = _data["connectionString"];
      this.isActive = _data["isActive"];
    }
  }

  static fromJS(data: any): CreateTenantDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateTenantDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["tenancyName"] = this.tenancyName;
    data["name"] = this.name;
    data["adminEmailAddress"] = this.adminEmailAddress;
    data["connectionString"] = this.connectionString;
    data["isActive"] = this.isActive;
    return data;
  }
}

export interface ICreateTenantDto {
  tenancyName: string;
  name: string;
  adminEmailAddress: string;
  connectionString?: string | undefined;
  isActive?: boolean | undefined;
}

export class TenantDto implements ITenantDto {
  tenancyName!: string;
  name!: string;
  isActive?: boolean | undefined;
  id?: number | undefined;

  constructor(data?: ITenantDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.tenancyName = _data["tenancyName"];
      this.name = _data["name"];
      this.isActive = _data["isActive"];
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): TenantDto {
    data = typeof data === "object" ? data : {};
    let result = new TenantDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["tenancyName"] = this.tenancyName;
    data["name"] = this.name;
    data["isActive"] = this.isActive;
    data["id"] = this.id;
    return data;
  }
}

export interface ITenantDto {
  tenancyName: string;
  name: string;
  isActive?: boolean | undefined;
  id?: number | undefined;
}

export class PagedResultDtoOfTenantDto implements IPagedResultDtoOfTenantDto {
  totalCount?: number | undefined;
  items?: TenantDto[] | undefined;

  constructor(data?: IPagedResultDtoOfTenantDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(TenantDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfTenantDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfTenantDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfTenantDto {
  totalCount?: number | undefined;
  items?: TenantDto[] | undefined;
}

export class UpdateTieunhomdichvuDto implements IUpdateTieunhomdichvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhomId?: number | undefined;
  tenRutGon?: string | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  nhom?: DicNhomdichvu | undefined;
  dicDichvu?: DicDichvu[] | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateTieunhomdichvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhomId = _data["nhomId"];
      this.tenRutGon = _data["tenRutGon"];
      this.stt = _data["stt"];
      this.status = _data["status"];
      this.nhom = _data["nhom"]
        ? DicNhomdichvu.fromJS(_data["nhom"])
        : <any>undefined;
      if (Array.isArray(_data["dicDichvu"])) {
        this.dicDichvu = [] as any;
        for (let item of _data["dicDichvu"])
          this.dicDichvu!.push(DicDichvu.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateTieunhomdichvuDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateTieunhomdichvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhomId"] = this.nhomId;
    data["tenRutGon"] = this.tenRutGon;
    data["stt"] = this.stt;
    data["status"] = this.status;
    data["nhom"] = this.nhom ? this.nhom.toJSON() : <any>undefined;
    if (Array.isArray(this.dicDichvu)) {
      data["dicDichvu"] = [];
      for (let item of this.dicDichvu) data["dicDichvu"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateTieunhomdichvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhomId?: number | undefined;
  tenRutGon?: string | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  nhom?: DicNhomdichvu | undefined;
  dicDichvu?: DicDichvu[] | undefined;
  id?: number | undefined;
}

export class TieunhomdichvuDto implements ITieunhomdichvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhomId?: number | undefined;
  tenRutGon?: string | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  nhom?: DicNhomdichvu | undefined;
  dicDichvu?: DicDichvu[] | undefined;
  id?: number | undefined;

  constructor(data?: ITieunhomdichvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhomId = _data["nhomId"];
      this.tenRutGon = _data["tenRutGon"];
      this.stt = _data["stt"];
      this.status = _data["status"];
      this.nhom = _data["nhom"]
        ? DicNhomdichvu.fromJS(_data["nhom"])
        : <any>undefined;
      if (Array.isArray(_data["dicDichvu"])) {
        this.dicDichvu = [] as any;
        for (let item of _data["dicDichvu"])
          this.dicDichvu!.push(DicDichvu.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): TieunhomdichvuDto {
    data = typeof data === "object" ? data : {};
    let result = new TieunhomdichvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhomId"] = this.nhomId;
    data["tenRutGon"] = this.tenRutGon;
    data["stt"] = this.stt;
    data["status"] = this.status;
    data["nhom"] = this.nhom ? this.nhom.toJSON() : <any>undefined;
    if (Array.isArray(this.dicDichvu)) {
      data["dicDichvu"] = [];
      for (let item of this.dicDichvu) data["dicDichvu"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface ITieunhomdichvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhomId?: number | undefined;
  tenRutGon?: string | undefined;
  stt?: number | undefined;
  status?: number | undefined;
  nhom?: DicNhomdichvu | undefined;
  dicDichvu?: DicDichvu[] | undefined;
  id?: number | undefined;
}

export class CreateTieunhomdichvuDto implements ICreateTieunhomdichvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhomId?: number | undefined;
  tenRutGon?: string | undefined;
  stt?: number | undefined;
  status?: number | undefined;

  constructor(data?: ICreateTieunhomdichvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.ten = _data["ten"];
      this.nhomId = _data["nhomId"];
      this.tenRutGon = _data["tenRutGon"];
      this.stt = _data["stt"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): CreateTieunhomdichvuDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateTieunhomdichvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["ten"] = this.ten;
    data["nhomId"] = this.nhomId;
    data["tenRutGon"] = this.tenRutGon;
    data["stt"] = this.stt;
    data["status"] = this.status;
    return data;
  }
}

export interface ICreateTieunhomdichvuDto {
  ma?: string | undefined;
  ten?: string | undefined;
  nhomId?: number | undefined;
  tenRutGon?: string | undefined;
  stt?: number | undefined;
  status?: number | undefined;
}

export class PagedResultDtoOfTieunhomdichvuDto
  implements IPagedResultDtoOfTieunhomdichvuDto {
  totalCount?: number | undefined;
  items?: TieunhomdichvuDto[] | undefined;

  constructor(data?: IPagedResultDtoOfTieunhomdichvuDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(TieunhomdichvuDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfTieunhomdichvuDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfTieunhomdichvuDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfTieunhomdichvuDto {
  totalCount?: number | undefined;
  items?: TieunhomdichvuDto[] | undefined;
}

export class UpdateTinhDto implements IUpdateTinhDto {
  ma?: string | undefined;
  tenTinh?: string | undefined;
  cap?: string | undefined;
  status?: number | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  dicHuyen?: DicHuyen[] | undefined;
  dicXaphuong?: DicXaphuong[] | undefined;
  id?: number | undefined;

  constructor(data?: IUpdateTinhDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.tenTinh = _data["tenTinh"];
      this.cap = _data["cap"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicBenhvien"])) {
        this.dicBenhvien = [] as any;
        for (let item of _data["dicBenhvien"])
          this.dicBenhvien!.push(DicBenhvien.fromJS(item));
      }
      if (Array.isArray(_data["dicHuyen"])) {
        this.dicHuyen = [] as any;
        for (let item of _data["dicHuyen"])
          this.dicHuyen!.push(DicHuyen.fromJS(item));
      }
      if (Array.isArray(_data["dicXaphuong"])) {
        this.dicXaphuong = [] as any;
        for (let item of _data["dicXaphuong"])
          this.dicXaphuong!.push(DicXaphuong.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UpdateTinhDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateTinhDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["tenTinh"] = this.tenTinh;
    data["cap"] = this.cap;
    data["status"] = this.status;
    if (Array.isArray(this.dicBenhvien)) {
      data["dicBenhvien"] = [];
      for (let item of this.dicBenhvien)
        data["dicBenhvien"].push(item.toJSON());
    }
    if (Array.isArray(this.dicHuyen)) {
      data["dicHuyen"] = [];
      for (let item of this.dicHuyen) data["dicHuyen"].push(item.toJSON());
    }
    if (Array.isArray(this.dicXaphuong)) {
      data["dicXaphuong"] = [];
      for (let item of this.dicXaphuong)
        data["dicXaphuong"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IUpdateTinhDto {
  ma?: string | undefined;
  tenTinh?: string | undefined;
  cap?: string | undefined;
  status?: number | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  dicHuyen?: DicHuyen[] | undefined;
  dicXaphuong?: DicXaphuong[] | undefined;
  id?: number | undefined;
}

export class TinhDto implements ITinhDto {
  ma?: string | undefined;
  tenTinh?: string | undefined;
  cap?: string | undefined;
  status?: number | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  dicHuyen?: DicHuyen[] | undefined;
  dicXaphuong?: DicXaphuong[] | undefined;
  id?: number | undefined;

  constructor(data?: ITinhDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.tenTinh = _data["tenTinh"];
      this.cap = _data["cap"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicBenhvien"])) {
        this.dicBenhvien = [] as any;
        for (let item of _data["dicBenhvien"])
          this.dicBenhvien!.push(DicBenhvien.fromJS(item));
      }
      if (Array.isArray(_data["dicHuyen"])) {
        this.dicHuyen = [] as any;
        for (let item of _data["dicHuyen"])
          this.dicHuyen!.push(DicHuyen.fromJS(item));
      }
      if (Array.isArray(_data["dicXaphuong"])) {
        this.dicXaphuong = [] as any;
        for (let item of _data["dicXaphuong"])
          this.dicXaphuong!.push(DicXaphuong.fromJS(item));
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): TinhDto {
    data = typeof data === "object" ? data : {};
    let result = new TinhDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["tenTinh"] = this.tenTinh;
    data["cap"] = this.cap;
    data["status"] = this.status;
    if (Array.isArray(this.dicBenhvien)) {
      data["dicBenhvien"] = [];
      for (let item of this.dicBenhvien)
        data["dicBenhvien"].push(item.toJSON());
    }
    if (Array.isArray(this.dicHuyen)) {
      data["dicHuyen"] = [];
      for (let item of this.dicHuyen) data["dicHuyen"].push(item.toJSON());
    }
    if (Array.isArray(this.dicXaphuong)) {
      data["dicXaphuong"] = [];
      for (let item of this.dicXaphuong)
        data["dicXaphuong"].push(item.toJSON());
    }
    data["id"] = this.id;
    return data;
  }
}

export interface ITinhDto {
  ma?: string | undefined;
  tenTinh?: string | undefined;
  cap?: string | undefined;
  status?: number | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  dicHuyen?: DicHuyen[] | undefined;
  dicXaphuong?: DicXaphuong[] | undefined;
  id?: number | undefined;
}

export class CreateTinhDto implements ICreateTinhDto {
  ma?: string | undefined;
  tenTinh?: string | undefined;
  cap?: string | undefined;
  status?: number | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  dicHuyen?: DicHuyen[] | undefined;
  dicXaphuong?: DicXaphuong[] | undefined;

  constructor(data?: ICreateTinhDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ma = _data["ma"];
      this.tenTinh = _data["tenTinh"];
      this.cap = _data["cap"];
      this.status = _data["status"];
      if (Array.isArray(_data["dicBenhvien"])) {
        this.dicBenhvien = [] as any;
        for (let item of _data["dicBenhvien"])
          this.dicBenhvien!.push(DicBenhvien.fromJS(item));
      }
      if (Array.isArray(_data["dicHuyen"])) {
        this.dicHuyen = [] as any;
        for (let item of _data["dicHuyen"])
          this.dicHuyen!.push(DicHuyen.fromJS(item));
      }
      if (Array.isArray(_data["dicXaphuong"])) {
        this.dicXaphuong = [] as any;
        for (let item of _data["dicXaphuong"])
          this.dicXaphuong!.push(DicXaphuong.fromJS(item));
      }
    }
  }

  static fromJS(data: any): CreateTinhDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateTinhDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["ma"] = this.ma;
    data["tenTinh"] = this.tenTinh;
    data["cap"] = this.cap;
    data["status"] = this.status;
    if (Array.isArray(this.dicBenhvien)) {
      data["dicBenhvien"] = [];
      for (let item of this.dicBenhvien)
        data["dicBenhvien"].push(item.toJSON());
    }
    if (Array.isArray(this.dicHuyen)) {
      data["dicHuyen"] = [];
      for (let item of this.dicHuyen) data["dicHuyen"].push(item.toJSON());
    }
    if (Array.isArray(this.dicXaphuong)) {
      data["dicXaphuong"] = [];
      for (let item of this.dicXaphuong)
        data["dicXaphuong"].push(item.toJSON());
    }
    return data;
  }
}

export interface ICreateTinhDto {
  ma?: string | undefined;
  tenTinh?: string | undefined;
  cap?: string | undefined;
  status?: number | undefined;
  dicBenhvien?: DicBenhvien[] | undefined;
  dicHuyen?: DicHuyen[] | undefined;
  dicXaphuong?: DicXaphuong[] | undefined;
}

export class PagedResultDtoOfTinhDto implements IPagedResultDtoOfTinhDto {
  totalCount?: number | undefined;
  items?: TinhDto[] | undefined;

  constructor(data?: IPagedResultDtoOfTinhDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(TinhDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfTinhDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfTinhDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfTinhDto {
  totalCount?: number | undefined;
  items?: TinhDto[] | undefined;
}

export class AuthenticateModel implements IAuthenticateModel {
  userNameOrEmailAddress!: string;
  password!: string;
  rememberClient?: boolean | undefined;

  constructor(data?: IAuthenticateModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userNameOrEmailAddress = _data["userNameOrEmailAddress"];
      this.password = _data["password"];
      this.rememberClient = _data["rememberClient"];
    }
  }

  static fromJS(data: any): AuthenticateModel {
    data = typeof data === "object" ? data : {};
    let result = new AuthenticateModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
    data["password"] = this.password;
    data["rememberClient"] = this.rememberClient;
    return data;
  }
}

export interface IAuthenticateModel {
  userNameOrEmailAddress: string;
  password: string;
  rememberClient?: boolean | undefined;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
  accessToken?: string | undefined;
  encryptedAccessToken?: string | undefined;
  expireInSeconds?: number | undefined;
  userId?: number | undefined;

  constructor(data?: IAuthenticateResultModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.accessToken = _data["accessToken"];
      this.encryptedAccessToken = _data["encryptedAccessToken"];
      this.expireInSeconds = _data["expireInSeconds"];
      this.userId = _data["userId"];
    }
  }

  static fromJS(data: any): AuthenticateResultModel {
    data = typeof data === "object" ? data : {};
    let result = new AuthenticateResultModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["accessToken"] = this.accessToken;
    data["encryptedAccessToken"] = this.encryptedAccessToken;
    data["expireInSeconds"] = this.expireInSeconds;
    data["userId"] = this.userId;
    return data;
  }
}

export interface IAuthenticateResultModel {
  accessToken?: string | undefined;
  encryptedAccessToken?: string | undefined;
  expireInSeconds?: number | undefined;
  userId?: number | undefined;
}

export class ExternalLoginProviderInfoModel
  implements IExternalLoginProviderInfoModel {
  name?: string | undefined;
  clientId?: string | undefined;

  constructor(data?: IExternalLoginProviderInfoModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.clientId = _data["clientId"];
    }
  }

  static fromJS(data: any): ExternalLoginProviderInfoModel {
    data = typeof data === "object" ? data : {};
    let result = new ExternalLoginProviderInfoModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["clientId"] = this.clientId;
    return data;
  }
}

export interface IExternalLoginProviderInfoModel {
  name?: string | undefined;
  clientId?: string | undefined;
}

export class ExternalAuthenticateModel implements IExternalAuthenticateModel {
  authProvider!: string;
  providerKey!: string;
  providerAccessCode!: string;

  constructor(data?: IExternalAuthenticateModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.authProvider = _data["authProvider"];
      this.providerKey = _data["providerKey"];
      this.providerAccessCode = _data["providerAccessCode"];
    }
  }

  static fromJS(data: any): ExternalAuthenticateModel {
    data = typeof data === "object" ? data : {};
    let result = new ExternalAuthenticateModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["authProvider"] = this.authProvider;
    data["providerKey"] = this.providerKey;
    data["providerAccessCode"] = this.providerAccessCode;
    return data;
  }
}

export interface IExternalAuthenticateModel {
  authProvider: string;
  providerKey: string;
  providerAccessCode: string;
}

export class ExternalAuthenticateResultModel
  implements IExternalAuthenticateResultModel {
  accessToken?: string | undefined;
  encryptedAccessToken?: string | undefined;
  expireInSeconds?: number | undefined;
  waitingForActivation?: boolean | undefined;

  constructor(data?: IExternalAuthenticateResultModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.accessToken = _data["accessToken"];
      this.encryptedAccessToken = _data["encryptedAccessToken"];
      this.expireInSeconds = _data["expireInSeconds"];
      this.waitingForActivation = _data["waitingForActivation"];
    }
  }

  static fromJS(data: any): ExternalAuthenticateResultModel {
    data = typeof data === "object" ? data : {};
    let result = new ExternalAuthenticateResultModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["accessToken"] = this.accessToken;
    data["encryptedAccessToken"] = this.encryptedAccessToken;
    data["expireInSeconds"] = this.expireInSeconds;
    data["waitingForActivation"] = this.waitingForActivation;
    return data;
  }
}

export interface IExternalAuthenticateResultModel {
  accessToken?: string | undefined;
  encryptedAccessToken?: string | undefined;
  expireInSeconds?: number | undefined;
  waitingForActivation?: boolean | undefined;
}

export class CreateUserDto implements ICreateUserDto {
  userName!: string;
  name!: string;
  surname!: string;
  emailAddress!: string;
  isActive?: boolean | undefined;
  roleNames?: string[] | undefined;
  password!: string;

  constructor(data?: ICreateUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data["userName"];
      this.name = _data["name"];
      this.surname = _data["surname"];
      this.emailAddress = _data["emailAddress"];
      this.isActive = _data["isActive"];
      if (Array.isArray(_data["roleNames"])) {
        this.roleNames = [] as any;
        for (let item of _data["roleNames"]) this.roleNames!.push(item);
      }
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): CreateUserDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateUserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["userName"] = this.userName;
    data["name"] = this.name;
    data["surname"] = this.surname;
    data["emailAddress"] = this.emailAddress;
    data["isActive"] = this.isActive;
    if (Array.isArray(this.roleNames)) {
      data["roleNames"] = [];
      for (let item of this.roleNames) data["roleNames"].push(item);
    }
    data["password"] = this.password;
    return data;
  }
}

export interface ICreateUserDto {
  userName: string;
  name: string;
  surname: string;
  emailAddress: string;
  isActive?: boolean | undefined;
  roleNames?: string[] | undefined;
  password: string;
}

export class UserDto implements IUserDto {
  userName!: string;
  name!: string;
  surname!: string;
  emailAddress!: string;
  isActive?: boolean | undefined;
  fullName?: string | undefined;
  lastLoginTime?: Date | undefined;
  creationTime?: Date | undefined;
  roleNames?: string[] | undefined;
  id?: number | undefined;

  constructor(data?: IUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data["userName"];
      this.name = _data["name"];
      this.surname = _data["surname"];
      this.emailAddress = _data["emailAddress"];
      this.isActive = _data["isActive"];
      this.fullName = _data["fullName"];
      this.lastLoginTime = _data["lastLoginTime"]
        ? new Date(_data["lastLoginTime"].toString())
        : <any>undefined;
      this.creationTime = _data["creationTime"]
        ? new Date(_data["creationTime"].toString())
        : <any>undefined;
      if (Array.isArray(_data["roleNames"])) {
        this.roleNames = [] as any;
        for (let item of _data["roleNames"]) this.roleNames!.push(item);
      }
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): UserDto {
    data = typeof data === "object" ? data : {};
    let result = new UserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["userName"] = this.userName;
    data["name"] = this.name;
    data["surname"] = this.surname;
    data["emailAddress"] = this.emailAddress;
    data["isActive"] = this.isActive;
    data["fullName"] = this.fullName;
    data["lastLoginTime"] = this.lastLoginTime
      ? this.lastLoginTime.toISOString()
      : <any>undefined;
    data["creationTime"] = this.creationTime
      ? this.creationTime.toISOString()
      : <any>undefined;
    if (Array.isArray(this.roleNames)) {
      data["roleNames"] = [];
      for (let item of this.roleNames) data["roleNames"].push(item);
    }
    data["id"] = this.id;
    return data;
  }
}

export interface IUserDto {
  userName: string;
  name: string;
  surname: string;
  emailAddress: string;
  isActive?: boolean | undefined;
  fullName?: string | undefined;
  lastLoginTime?: Date | undefined;
  creationTime?: Date | undefined;
  roleNames?: string[] | undefined;
  id?: number | undefined;
}

export class ListResultDtoOfRoleDto implements IListResultDtoOfRoleDto {
  items?: RoleDto[] | undefined;

  constructor(data?: IListResultDtoOfRoleDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(RoleDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ListResultDtoOfRoleDto {
    data = typeof data === "object" ? data : {};
    let result = new ListResultDtoOfRoleDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IListResultDtoOfRoleDto {
  items?: RoleDto[] | undefined;
}

export class ChangeUserLanguageDto implements IChangeUserLanguageDto {
  languageName!: string;

  constructor(data?: IChangeUserLanguageDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.languageName = _data["languageName"];
    }
  }

  static fromJS(data: any): ChangeUserLanguageDto {
    data = typeof data === "object" ? data : {};
    let result = new ChangeUserLanguageDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["languageName"] = this.languageName;
    return data;
  }
}

export interface IChangeUserLanguageDto {
  languageName: string;
}

export class ChangePasswordDto implements IChangePasswordDto {
  currentPassword!: string;
  newPassword!: string;

  constructor(data?: IChangePasswordDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.currentPassword = _data["currentPassword"];
      this.newPassword = _data["newPassword"];
    }
  }

  static fromJS(data: any): ChangePasswordDto {
    data = typeof data === "object" ? data : {};
    let result = new ChangePasswordDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["currentPassword"] = this.currentPassword;
    data["newPassword"] = this.newPassword;
    return data;
  }
}

export interface IChangePasswordDto {
  currentPassword: string;
  newPassword: string;
}

export class ResetPasswordDto implements IResetPasswordDto {
  adminPassword!: string;
  userId!: number;
  newPassword!: string;

  constructor(data?: IResetPasswordDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.adminPassword = _data["adminPassword"];
      this.userId = _data["userId"];
      this.newPassword = _data["newPassword"];
    }
  }

  static fromJS(data: any): ResetPasswordDto {
    data = typeof data === "object" ? data : {};
    let result = new ResetPasswordDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["adminPassword"] = this.adminPassword;
    data["userId"] = this.userId;
    data["newPassword"] = this.newPassword;
    return data;
  }
}

export interface IResetPasswordDto {
  adminPassword: string;
  userId: number;
  newPassword: string;
}

export class PagedResultDtoOfUserDto implements IPagedResultDtoOfUserDto {
  totalCount?: number | undefined;
  items?: UserDto[] | undefined;

  constructor(data?: IPagedResultDtoOfUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalCount = _data["totalCount"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(UserDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): PagedResultDtoOfUserDto {
    data = typeof data === "object" ? data : {};
    let result = new PagedResultDtoOfUserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["totalCount"] = this.totalCount;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IPagedResultDtoOfUserDto {
  totalCount?: number | undefined;
  items?: UserDto[] | undefined;
}

export enum IsTenantAvailableOutputState {
  _1 = 1,
  _2 = 2,
  _3 = 3,
}

export enum SortDescriptorSortDirection {
  _0 = 0,
  _1 = 1,
}

export enum GroupDescriptorSortDirection {
  _0 = 0,
  _1 = 1,
}

export enum MethodInfoMemberType {
  _1 = 1,
  _2 = 2,
  _4 = 4,
  _8 = 8,
  _16 = 16,
  _32 = 32,
  _64 = 64,
  _128 = 128,
  _191 = 191,
}

export enum MethodInfoAttributes {
  _0 = 0,
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
  _5 = 5,
  _6 = 6,
  _7 = 7,
  _8 = 8,
  _16 = 16,
  _32 = 32,
  _64 = 64,
  _128 = 128,
  _256 = 256,
  _512 = 512,
  _1024 = 1024,
  _2048 = 2048,
  _4096 = 4096,
  _8192 = 8192,
  _16384 = 16384,
  _32768 = 32768,
  _53248 = 53248,
}

export enum MethodInfoMethodImplementationFlags {
  _0 = 0,
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
  _8 = 8,
  _16 = 16,
  _32 = 32,
  _64 = 64,
  _128 = 128,
  _256 = 256,
  _4096 = 4096,
  _65535 = 65535,
}

export enum MethodInfoCallingConvention {
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _32 = 32,
  _64 = 64,
}

export enum ParameterInfoAttributes {
  _0 = 0,
  _1 = 1,
  _2 = 2,
  _4 = 4,
  _8 = 8,
  _16 = 16,
  _4096 = 4096,
  _8192 = 8192,
  _16384 = 16384,
  _32768 = 32768,
  _61440 = 61440,
}

export enum MemberInfoMemberType {
  _1 = 1,
  _2 = 2,
  _4 = 4,
  _8 = 8,
  _16 = 16,
  _32 = 32,
  _64 = 64,
  _128 = 128,
  _191 = 191,
}

export enum AssemblySecurityRuleSet {
  _0 = 0,
  _1 = 1,
  _2 = 2,
}

export enum ConstructorInfoMemberType {
  _1 = 1,
  _2 = 2,
  _4 = 4,
  _8 = 8,
  _16 = 16,
  _32 = 32,
  _64 = 64,
  _128 = 128,
  _191 = 191,
}

export enum ConstructorInfoAttributes {
  _0 = 0,
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
  _5 = 5,
  _6 = 6,
  _7 = 7,
  _8 = 8,
  _16 = 16,
  _32 = 32,
  _64 = 64,
  _128 = 128,
  _256 = 256,
  _512 = 512,
  _1024 = 1024,
  _2048 = 2048,
  _4096 = 4096,
  _8192 = 8192,
  _16384 = 16384,
  _32768 = 32768,
  _53248 = 53248,
}

export enum ConstructorInfoMethodImplementationFlags {
  _0 = 0,
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
  _8 = 8,
  _16 = 16,
  _32 = 32,
  _64 = 64,
  _128 = 128,
  _256 = 256,
  _4096 = 4096,
  _65535 = 65535,
}

export enum ConstructorInfoCallingConvention {
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _32 = 32,
  _64 = 64,
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
  return obj && obj.isAxiosError === true;
}
